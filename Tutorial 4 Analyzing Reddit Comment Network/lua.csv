,author,body,body_html,created_utc,distinguished,edited,id,is_submitter,link_id,parent_id,permalink,replies,saved,score,stickied,submission,subreddit,subreddit_id
0,suhcoR,"Thanks. I had a first look at it and asked myself whether this fork implemented essentially the same features as RaptorJIT. It also - like RaptorJIT - seems only to support x86-64, i.e. stripped away all platforms originally supported by LuaJIT. Could you elaborate on this, please?","<div class=""md""><p>Thanks. I had a first look at it and asked myself whether this fork implemented essentially the same features as RaptorJIT. It also - like RaptorJIT - seems only to support x86-64, i.e. stripped away all platforms originally supported by LuaJIT. Could you elaborate on this, please?</p>
</div>",1571090450.0,,False,f3rpsgw,False,t3_dhxplo,t3_dhxplo,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3rpsgw/,1,False,5,False,dhxplo,lua,t5_2qjla
1,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1571120125.0,,1588860701.0,f3t6f2y,False,t3_dhxplo,t3_dhxplo,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3t6f2y/,1,False,2,False,dhxplo,lua,t5_2qjla
2,moarthenfeeling,"Supporting a lot of platforms at once brings a huge overhead to the development process. By making every little change, you're eventually going to break some platforms, unless you thoroughly test them - which we didn't have time or resources for.

So it's better to say ""platforms other than x86-64 Linux"" are not supported than to have them in a half-broken state.","<div class=""md""><p>Supporting a lot of platforms at once brings a huge overhead to the development process. By making every little change, you&#39;re eventually going to break some platforms, unless you thoroughly test them - which we didn&#39;t have time or resources for.</p>

<p>So it&#39;s better to say &quot;platforms other than x86-64 Linux&quot; are not supported than to have them in a half-broken state.</p>
</div>",1571091349.0,,False,f3rsqdx,True,t3_dhxplo,t1_f3rpsgw,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3rsqdx/,1,False,1,False,dhxplo,lua,t5_2qjla
3,moarthenfeeling,"It's explained in the article... There was no such thing in 2015, when we started the fork.","<div class=""md""><p>It&#39;s explained in the article... There was no such thing in 2015, when we started the fork.</p>
</div>",1571120738.0,,False,f3t6ya1,True,t3_dhxplo,t1_f3t6f2y,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3t6ya1/,0,False,5,False,dhxplo,lua,t5_2qjla
4,suhcoR,"Ok, thanks, I understand that. Meanwhile I was able to watch the talk by Anton at LIM 17 and read a bit more about the fork. But I still don't get what the major differences to RaptorJIT are. What are the core benefits of your implementation compared to RaptorJIT?","<div class=""md""><p>Ok, thanks, I understand that. Meanwhile I was able to watch the talk by Anton at LIM 17 and read a bit more about the fork. But I still don&#39;t get what the major differences to RaptorJIT are. What are the core benefits of your implementation compared to RaptorJIT?</p>
</div>",1571092550.0,,False,f3rvg22,False,t3_dhxplo,t1_f3rsqdx,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3rvg22/,1,False,2,False,dhxplo,lua,t5_2qjla
5,moarthenfeeling,"I don't know that much about RaptorJIT, so I don't know which features it has which our fork doesn't. And some unique features are quoted in the article from the original announcement post.

Well, I know some of the unique things that were developed in-house and are certainly unique:

* Huge testing system, which can be used to test any Lua/LuaJIT implementation (based on several major testing suites)
* Trace analyzer/visualizer (RaptorJIT has it as well, but I'm not sure how they compare)
* Concept of ""sealing"" (something similar to ""const"" in other languages - ""sealed"" data reduces the pressure on GC)
* Memory and CPU profiler
* Code coverage tool
* *Amazing* docs - a lot of the code is better documented than original LuaJIT docs - some code was tricky and hard to understand, so once we understood how something works, we usually annotated it in a source code, or rewrote it in a more readable way.
* Tons of new optimizations, which are probably use-case specific - we just profiled our proprietary Lua server code and fixed the bottlenecks (for example, by making some things compilable, which  were not compilable with LuaJIT)

LuaVela is not a competitor to RaptorJIT - it's an initially proprietary fork, which the company decided to open source as a ""thank you"" to a Lua community - hopefully some of the active forks can get some nice features from it!","<div class=""md""><p>I don&#39;t know that much about RaptorJIT, so I don&#39;t know which features it has which our fork doesn&#39;t. And some unique features are quoted in the article from the original announcement post.</p>

<p>Well, I know some of the unique things that were developed in-house and are certainly unique:</p>

<ul>
<li>Huge testing system, which can be used to test any Lua/LuaJIT implementation (based on several major testing suites)</li>
<li>Trace analyzer/visualizer (RaptorJIT has it as well, but I&#39;m not sure how they compare)</li>
<li>Concept of &quot;sealing&quot; (something similar to &quot;const&quot; in other languages - &quot;sealed&quot; data reduces the pressure on GC)</li>
<li>Memory and CPU profiler</li>
<li>Code coverage tool</li>
<li><em>Amazing</em> docs - a lot of the code is better documented than original LuaJIT docs - some code was tricky and hard to understand, so once we understood how something works, we usually annotated it in a source code, or rewrote it in a more readable way.</li>
<li>Tons of new optimizations, which are probably use-case specific - we just profiled our proprietary Lua server code and fixed the bottlenecks (for example, by making some things compilable, which  were not compilable with LuaJIT)</li>
</ul>

<p>LuaVela is not a competitor to RaptorJIT - it&#39;s an initially proprietary fork, which the company decided to open source as a &quot;thank you&quot; to a Lua community - hopefully some of the active forks can get some nice features from it!</p>
</div>",1571093159.0,,False,f3rwo0w,True,t3_dhxplo,t1_f3rvg22,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3rwo0w/,1,False,2,False,dhxplo,lua,t5_2qjla
6,suhcoR,"That was very helpful, thank you very much. The last two points (code documentation and assumed removal of some NYI) look very interesting to me; I will have a detailed look at the code base. It's very generous that the company open sourced it and I'm sure it will be very much appreciated.","<div class=""md""><p>That was very helpful, thank you very much. The last two points (code documentation and assumed removal of some NYI) look very interesting to me; I will have a detailed look at the code base. It&#39;s very generous that the company open sourced it and I&#39;m sure it will be very much appreciated.</p>
</div>",1571093613.0,,False,f3rxmlp,False,t3_dhxplo,t1_f3rwo0w,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3rxmlp/,1,False,2,False,dhxplo,lua,t5_2qjla
7,moarthenfeeling,"Glad if was, thanks for reading the article. :)
Feel free to PM me if there are some questions (though I might not be able to answer everything, but can easily ask original devs about some of more in-depth stuff)","<div class=""md""><p>Glad if was, thanks for reading the article. :)
Feel free to PM me if there are some questions (though I might not be able to answer everything, but can easily ask original devs about some of more in-depth stuff)</p>
</div>",1571093825.0,,False,f3ry352,True,t3_dhxplo,t1_f3rxmlp,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3ry352/,1,False,2,False,dhxplo,lua,t5_2qjla
8,suhcoR,Thanks for the offer. Meanwhile I was able to read your article referenced in the post. Very interesting. When reading it I actually asked myself whether it wouldn't have been easier and less effort to implement a new LuaJIT bytecode interpreter using the RPython toolchain and let it generate the tracing compiler and all the other needed stuff. Or even go more to the front and directly implement a Lua 5.x parser in RPython (causing more effort of course than y bytecode interpreter). What do you think?,"<div class=""md""><p>Thanks for the offer. Meanwhile I was able to read your article referenced in the post. Very interesting. When reading it I actually asked myself whether it wouldn&#39;t have been easier and less effort to implement a new LuaJIT bytecode interpreter using the RPython toolchain and let it generate the tracing compiler and all the other needed stuff. Or even go more to the front and directly implement a Lua 5.x parser in RPython (causing more effort of course than y bytecode interpreter). What do you think?</p>
</div>",1571095519.0,,False,f3s1pd2,False,t3_dhxplo,t1_f3ry352,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3s1pd2/,1,False,1,False,dhxplo,lua,t5_2qjla
9,moarthenfeeling,"This new interpreter certainly wouldn't be as performant as LuaJIT's handcrafted interpreter. It's easier to modify it, than write something as complex as it is from scratch.","<div class=""md""><p>This new interpreter certainly wouldn&#39;t be as performant as LuaJIT&#39;s handcrafted interpreter. It&#39;s easier to modify it, than write something as complex as it is from scratch.</p>
</div>",1571096127.0,,False,f3s2ysu,True,t3_dhxplo,t1_f3s1pd2,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3s2ysu/,1,False,1,False,dhxplo,lua,t5_2qjla
10,suhcoR,"> This new interpreter certainly wouldn't be as performant as LuaJIT's handcrafted interpreter

Maybe; actually I'm not aware anyone has tried it yet; maybe I will look into it when I find some time; would be really interesting to have some measurements to be able to assess the tradeoff between loss of performance and reduction in development effort.","<div class=""md""><blockquote>
<p>This new interpreter certainly wouldn&#39;t be as performant as LuaJIT&#39;s handcrafted interpreter</p>
</blockquote>

<p>Maybe; actually I&#39;m not aware anyone has tried it yet; maybe I will look into it when I find some time; would be really interesting to have some measurements to be able to assess the tradeoff between loss of performance and reduction in development effort.</p>
</div>",1571096603.0,,False,f3s403u,False,t3_dhxplo,t1_f3s2ysu,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3s403u/,1,False,1,False,dhxplo,lua,t5_2qjla
11,moarthenfeeling,"Well, one of the comparisons is Lua's interpreter written in C vs LuaJIT's interpreter written in DynASM :)

https://luajit.org/performance_x86.html

... and I'm sure that writing the interpreter in Python would a lot bigger differences in performance.

And please note that we usually wrote most of the stuff in C - the interpreter is a stable part which was changed very rarely.","<div class=""md""><p>Well, one of the comparisons is Lua&#39;s interpreter written in C vs LuaJIT&#39;s interpreter written in DynASM :)</p>

<p><a href=""https://luajit.org/performance_x86.html"">https://luajit.org/performance_x86.html</a></p>

<p>... and I&#39;m sure that writing the interpreter in Python would a lot bigger differences in performance.</p>

<p>And please note that we usually wrote most of the stuff in C - the interpreter is a stable part which was changed very rarely.</p>
</div>",1571098526.0,,False,f3s837l,True,t3_dhxplo,t1_f3s403u,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3s837l/,1,False,1,False,dhxplo,lua,t5_2qjla
12,suhcoR,"> Well, one of the comparisons is Lua's interpreter written in C vs LuaJIT's interpreter written in DynASM

No, that's not a relevant comparison. For one part the interpreter written in (portable) C has less means to optimally use the given CPU than the assembler version (e.g. to build a threaded interpreter), but the latter of course is not portable. But I'm interested in comparing the tracing JIT automatically generated by the RPython toolchain with the one implemented in Lua JIT. The former is automatically portable to a lot of architectures, the latter is hand crafted with enormous effort and error probability. That's why the tradeoff would be interesting.

> writing the interpreter in Python would a lot bigger differences in performance.

That's not now it works. The interpreter written in RPython (a static subset of Python) is translated to C and some other stuff like the JIT and GC are part of the generation process and no individual implementation is needed. Writing a LuaJIT bytecode interpreter is easy; I've actually already done it just for learning purpose: https://github.com/rochus-keller/LjTools/blob/master/LuaJitEngine.cpp. Migrating to RPython doesn't seem to be difficult.","<div class=""md""><blockquote>
<p>Well, one of the comparisons is Lua&#39;s interpreter written in C vs LuaJIT&#39;s interpreter written in DynASM</p>
</blockquote>

<p>No, that&#39;s not a relevant comparison. For one part the interpreter written in (portable) C has less means to optimally use the given CPU than the assembler version (e.g. to build a threaded interpreter), but the latter of course is not portable. But I&#39;m interested in comparing the tracing JIT automatically generated by the RPython toolchain with the one implemented in Lua JIT. The former is automatically portable to a lot of architectures, the latter is hand crafted with enormous effort and error probability. That&#39;s why the tradeoff would be interesting.</p>

<blockquote>
<p>writing the interpreter in Python would a lot bigger differences in performance.</p>
</blockquote>

<p>That&#39;s not now it works. The interpreter written in RPython (a static subset of Python) is translated to C and some other stuff like the JIT and GC are part of the generation process and no individual implementation is needed. Writing a LuaJIT bytecode interpreter is easy; I&#39;ve actually already done it just for learning purpose: <a href=""https://github.com/rochus-keller/LjTools/blob/master/LuaJitEngine.cpp"">https://github.com/rochus-keller/LjTools/blob/master/LuaJitEngine.cpp</a>. Migrating to RPython doesn&#39;t seem to be difficult.</p>
</div>",1571099267.0,,False,f3s9n7p,False,t3_dhxplo,t1_f3s837l,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3s9n7p/,1,False,1,False,dhxplo,lua,t5_2qjla
13,moarthenfeeling,"Sure, it'll be an interesting experiment.

The error probability of LuaJIT/LuaVela interpreter is very low - it was tested on a very different code, in production, for a long time. All the bugs/crashes/etc. were found and fixed. With such complex systems you either get a ""correct"" generated interpreter, or hand-crafted, but meticulously optimized one. At such low level it's hard to rely on generic tools.","<div class=""md""><p>Sure, it&#39;ll be an interesting experiment.</p>

<p>The error probability of LuaJIT/LuaVela interpreter is very low - it was tested on a very different code, in production, for a long time. All the bugs/crashes/etc. were found and fixed. With such complex systems you either get a &quot;correct&quot; generated interpreter, or hand-crafted, but meticulously optimized one. At such low level it&#39;s hard to rely on generic tools.</p>
</div>",1571100097.0,,False,f3sbfv6,True,t3_dhxplo,t1_f3s9n7p,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3sbfv6/,1,False,1,False,dhxplo,lua,t5_2qjla
14,suhcoR,"I assume that this is one important feature of LuaVela which makes it interesting.
In case I have the chance to implement an RPython based LuaJIT bytecode interpreter I will send you a message.
Was nice talking to you, good luck.","<div class=""md""><p>I assume that this is one important feature of LuaVela which makes it interesting.
In case I have the chance to implement an RPython based LuaJIT bytecode interpreter I will send you a message.
Was nice talking to you, good luck.</p>
</div>",1571100364.0,,False,f3sc0ay,False,t3_dhxplo,t1_f3sbfv6,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3sc0ay/,1,False,1,False,dhxplo,lua,t5_2qjla
15,moarthenfeeling,Good luck to you as well! :),"<div class=""md""><p>Good luck to you as well! :)</p>
</div>",1571100470.0,,False,f3sc911,True,t3_dhxplo,t1_f3sc0ay,/r/lua/comments/dhxplo/luavela_the_luajit_fork_ive_worked_on/f3sc911/,0,False,1,False,dhxplo,lua,t5_2qjla
16,TheSkourou,Both have different uses java make mc Lua idk good physics engines,"<div class=""md""><p>Both have different uses java make mc Lua idk good physics engines</p>
</div>",1662804899.0,,False,inu7x0e,False,t3_xaf52u,t3_xaf52u,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/inu7x0e/,2,False,4,False,xaf52u,lua,t5_2qjla
17,N0tH1tl3r_V2,(C = Lua) > Every other interpreted language,"<div class=""md""><p>(C = Lua) &gt; Every other interpreted language</p>
</div>",1662831777.0,,False,invqerc,False,t3_xaf52u,t3_xaf52u,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/invqerc/,1,False,3,False,xaf52u,lua,t5_2qjla
18,Rubber_Tech_2,Lua is the best,"<div class=""md""><p>Lua is the best</p>
</div>",1662783893.0,,False,inth1li,False,t3_xaf52u,t3_xaf52u,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/inth1li/,0,False,6,False,xaf52u,lua,t5_2qjla
19,KoRUpTeD_DEV,Like music to my ears 🥹,"<div class=""md""><p>Like music to my ears 🥹</p>
</div>",1662799618.0,,False,inu1qvm,False,t3_xaf52u,t3_xaf52u,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/inu1qvm/,0,False,4,False,xaf52u,lua,t5_2qjla
20,arkuw,"Umm... 

    var text = ""Hello world"";

Static vs dynamic typing... same battle as Emacs vs Vi","<div class=""md""><p>Umm... </p>

<pre><code>var text = &quot;Hello world&quot;;
</code></pre>

<p>Static vs dynamic typing... same battle as Emacs vs Vi</p>
</div>",1663019650.0,,False,io6eri7,False,t3_xaf52u,t3_xaf52u,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/io6eri7/,0,False,2,False,xaf52u,lua,t5_2qjla
21,Rude-Enthusiasm-7255,"Lua God

JAVA zzzzzzz","<div class=""md""><p>Lua God</p>

<p>JAVA zzzzzzz</p>
</div>",1662799653.0,,False,inu1sbf,False,t3_xaf52u,t3_xaf52u,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/inu1sbf/,0,False,0,False,xaf52u,lua,t5_2qjla
22,Newer53,SOO TRUE!,"<div class=""md""><p>SOO TRUE!</p>
</div>",1663620231.0,,False,ip40vfd,False,t3_xaf52u,t3_xaf52u,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/ip40vfd/,0,False,1,False,xaf52u,lua,t5_2qjla
23,,"Yeah, it’s all in good fun. It just came to mind while I was learning and I had a laugh making it","<div class=""md""><p>Yeah, it’s all in good fun. It just came to mind while I was learning and I had a laugh making it</p>
</div>",1662813272.0,,False,inujyop,False,t3_xaf52u,t1_inu7x0e,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/inujyop/,0,False,2,False,xaf52u,lua,t5_2qjla
24,AKingOfDragons,"Java made Minecraft, yes. And Lua powers, Core,(Roblox contender) Roblox (Luau a subsidiary of lua) World Of Warcraft, and Digital Combat Simulator. Plus a ton of games are modded with Lua. Also G-mod.","<div class=""md""><p>Java made Minecraft, yes. And Lua powers, Core,(Roblox contender) Roblox (Luau a subsidiary of lua) World Of Warcraft, and Digital Combat Simulator. Plus a ton of games are modded with Lua. Also G-mod.</p>
</div>",1662865840.0,,False,inxwdl9,False,t3_xaf52u,t1_inu7x0e,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/inxwdl9/,1,False,1,False,xaf52u,lua,t5_2qjla
25,,Unironically C + lua is all you need,"<div class=""md""><p>Unironically C + lua is all you need</p>
</div>",1662837634.0,,False,inw52mq,False,t3_xaf52u,t1_invqerc,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/inw52mq/,2,False,1,False,xaf52u,lua,t5_2qjla
26,SqulbWorb,Technically C/C++ powers those games and lua powers official modifications of these games.,"<div class=""md""><p>Technically C/C++ powers those games and lua powers official modifications of these games.</p>
</div>",1664836450.0,,False,iqxzx76,False,t3_xaf52u,t1_inxwdl9,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/iqxzx76/,0,False,1,False,xaf52u,lua,t5_2qjla
27,N0tH1tl3r_V2,"Yea, and lua is literally C on easy mode.

&#x200B;

&#x200B;

And LuaJIT compiler is so small too","<div class=""md""><p>Yea, and lua is literally C on easy mode.</p>

<p>&#x200B;</p>

<p>&#x200B;</p>

<p>And LuaJIT compiler is so small too</p>
</div>",1662897918.0,,False,inz6mgs,False,t3_xaf52u,t1_inw52mq,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/inz6mgs/,1,False,3,False,xaf52u,lua,t5_2qjla
28,lambda_abstraction,Depends.  Some libraries and frameworks make cooperation with Lua and C more than a bit painful.,"<div class=""md""><p>Depends.  Some libraries and frameworks make cooperation with Lua and C more than a bit painful.</p>
</div>",1664552874.0,,False,iqig241,False,t3_xaf52u,t1_inw52mq,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/iqig241/,0,False,1,False,xaf52u,lua,t5_2qjla
29,lambda_abstraction,"Actually, Lua has more in common with Scheme than C.  Lua certainly allows you to trivially wrap C code to provide an ""easy mode"" access.","<div class=""md""><p>Actually, Lua has more in common with Scheme than C.  Lua certainly allows you to trivially wrap C code to provide an &quot;easy mode&quot; access.</p>
</div>",1664552816.0,,False,iqifwt6,False,t3_xaf52u,t1_inz6mgs,/r/lua/comments/xaf52u/i_thought_yall_might_appreciate_this_more_than/iqifwt6/,0,False,1,False,xaf52u,lua,t5_2qjla
30,whoopdedo,"Congratulations, you've discovered that the poorly named Lua ""length"" operator does not actually measure length. *tl;dr* You're using `#` wrong.

[Lua 5.4 Reference Manual  3.4.7 – The Length Operator](https://www.lua.org/manual/5.4/manual.html#3.4.7)

>The length operator applied on a table returns a border in that table. A _border_ in a table `t` is any non-negative integer that satisfies the following condition:
>
     (border == 0 or t[border] ~= nil) and
     (t[border + 1] == nil or border == math.maxinteger)
>
>In words, a border is any positive integer index present in the table that is followed by an absent index, plus two limit cases: zero, when index 1 is absent; and the maximum value for an integer, when that index is present. Note that keys that are not positive integers do not interfere with borders. 

...

>When `t` is not a sequence, `#t` can return any of its borders. (The exact one depends on details of the internal representation of the table, which in turn can depend on how the table was populated and the memory addresses of its non-numeric keys.) 

The last paragraph is what you're seeing. Both 10 and 5 are valid values for your `#t`. There's no promise that you'll always get the same value.","<div class=""md""><p>Congratulations, you&#39;ve discovered that the poorly named Lua &quot;length&quot; operator does not actually measure length. <em>tl;dr</em> You&#39;re using <code>#</code> wrong.</p>

<p><a href=""https://www.lua.org/manual/5.4/manual.html#3.4.7"">Lua 5.4 Reference Manual  3.4.7 – The Length Operator</a></p>

<blockquote>
<p>The length operator applied on a table returns a border in that table. A <em>border</em> in a table <code>t</code> is any non-negative integer that satisfies the following condition:</p>

<pre><code> (border == 0 or t[border] ~= nil) and
 (t[border + 1] == nil or border == math.maxinteger)
</code></pre>

<p>In words, a border is any positive integer index present in the table that is followed by an absent index, plus two limit cases: zero, when index 1 is absent; and the maximum value for an integer, when that index is present. Note that keys that are not positive integers do not interfere with borders. </p>
</blockquote>

<p>...</p>

<blockquote>
<p>When <code>t</code> is not a sequence, <code>#t</code> can return any of its borders. (The exact one depends on details of the internal representation of the table, which in turn can depend on how the table was populated and the memory addresses of its non-numeric keys.) </p>
</blockquote>

<p>The last paragraph is what you&#39;re seeing. Both 10 and 5 are valid values for your <code>#t</code>. There&#39;s no promise that you&#39;ll always get the same value.</p>
</div>",1669786110.0,,1669786918.0,iybruay,False,t3_z8hnt8,t3_z8hnt8,/r/lua/comments/z8hnt8/aneurysmlua/iybruay/,1,False,26,False,z8hnt8,lua,t5_2qjla
31,TwilCynder,"Yeah, the #t operator is broken if used outside of the case where you added elements sequentially

Anyway, a well-written lua program should not need to use this operator","<div class=""md""><p>Yeah, the #t operator is broken if used outside of the case where you added elements sequentially</p>

<p>Anyway, a well-written lua program should not need to use this operator</p>
</div>",1669815099.0,,False,iycuhvp,False,t3_z8hnt8,t3_z8hnt8,/r/lua/comments/z8hnt8/aneurysmlua/iycuhvp/,0,False,2,False,z8hnt8,lua,t5_2qjla
32,Tritonio,"You could make your own array type that works ""correctly"" with the length operator: make an empty table and assign a metatable to it that hooks the \_\_newindex, \_\_index and \_\_len operations. Make\_\_newindex and \_\_index so that they update a variable with the number of non nil elements while storing the actual data in an underlying array (the empty table I mentioned will stay empty forever and the data is passed through to the underlying one). Make \_\_len (or is called \_\_length?) return the value of that count variable. If you need your new array type to work with pairs etc you may want to hook even more operations with the metatable so that you can make them work with the underlying array.","<div class=""md""><p>You could make your own array type that works &quot;correctly&quot; with the length operator: make an empty table and assign a metatable to it that hooks the __newindex, __index and __len operations. Make__newindex and __index so that they update a variable with the number of non nil elements while storing the actual data in an underlying array (the empty table I mentioned will stay empty forever and the data is passed through to the underlying one). Make __len (or is called __length?) return the value of that count variable. If you need your new array type to work with pairs etc you may want to hook even more operations with the metatable so that you can make them work with the underlying array.</p>
</div>",1669834255.0,,False,iye4ypp,False,t3_z8hnt8,t3_z8hnt8,/r/lua/comments/z8hnt8/aneurysmlua/iye4ypp/,0,False,2,False,z8hnt8,lua,t5_2qjla
33,ChakatStormCloud,"I hurt... why... why does #table mutate state.... why....  
someone please tell me this is just of bug of the online sandbox.","<div class=""md""><p>I hurt... why... why does #table mutate state.... why....<br/>
someone please tell me this is just of bug of the online sandbox.</p>
</div>",1669783797.0,,False,iybnwk7,True,t3_z8hnt8,t3_z8hnt8,/r/lua/comments/z8hnt8/aneurysmlua/iybnwk7/,1,False,1,False,z8hnt8,lua,t5_2qjla
34,moomoomoo309,"Just treat the table like a stack, add and remove from the end only, then it'll be fine. Need to remove something from the middle? Swap it with the end element, then remove it from the end.","<div class=""md""><p>Just treat the table like a stack, add and remove from the end only, then it&#39;ll be fine. Need to remove something from the middle? Swap it with the end element, then remove it from the end.</p>
</div>",1669816186.0,,False,iycwjss,False,t3_z8hnt8,t3_z8hnt8,/r/lua/comments/z8hnt8/aneurysmlua/iycwjss/,1,False,1,False,z8hnt8,lua,t5_2qjla
35,Couried,u/savevideo,"<div class=""md""><p><a href=""/u/savevideo"">u/savevideo</a></p>
</div>",1670646099.0,,False,izmeyt9,False,t3_z8hnt8,t3_z8hnt8,/r/lua/comments/z8hnt8/aneurysmlua/izmeyt9/,1,False,1,False,z8hnt8,lua,t5_2qjla
36,ChakatStormCloud,"Okay, explain why \_observing it\_ at it's peak, causes it to ignore a series of gaps after,notice that I'm setting indicies 6-9 to nil, and leaving 1-5 and 10 alone.","<div class=""md""><p>Okay, explain why _observing it_ at it&#39;s peak, causes it to ignore a series of gaps after,notice that I&#39;m setting indicies 6-9 to nil, and leaving 1-5 and 10 alone.</p>
</div>",1669786451.0,,False,iybse5r,True,t3_z8hnt8,t1_iybruay,/r/lua/comments/z8hnt8/aneurysmlua/iybse5r/,2,False,-4,False,z8hnt8,lua,t5_2qjla
37,m-faith,Thanks for posting this. I'm learning lua now and had no idea the length operator does not actually measure the length of a table… this behavior of `#t` is a little demoralizing actually :(,"<div class=""md""><p>Thanks for posting this. I&#39;m learning lua now and had no idea the length operator does not actually measure the length of a table… this behavior of <code>#t</code> is a little demoralizing actually :(</p>
</div>",1669812230.0,,False,iycpfci,False,t3_z8hnt8,t1_iybnwk7,/r/lua/comments/z8hnt8/aneurysmlua/iycpfci/,2,False,-1,False,z8hnt8,lua,t5_2qjla
38,Spellsweaver,"Not really, table.remove is perfectly capable of removing elements from the middle of the table.","<div class=""md""><p>Not really, table.remove is perfectly capable of removing elements from the middle of the table.</p>
</div>",1669822215.0,,False,iyd9xai,False,t3_z8hnt8,t1_iycwjss,/r/lua/comments/z8hnt8/aneurysmlua/iyd9xai/,1,False,2,False,z8hnt8,lua,t5_2qjla
39,SaveVideo,"###[View link](https://redditsave.com/r/lua/comments/z8hnt8/aneurysmlua/)


 --- 
 [**Info**](https://np.reddit.com/user/SaveVideo/comments/jv323v/info/)&#32;|&#32; [**Feedback**](https://np.reddit.com/message/compose/?to=Kryptonh&subject=Feedback for savevideo)&#32;|&#32;[**Donate**](https://ko-fi.com/getvideo) &#32;|&#32; [**DMCA**](https://np.reddit.com/message/compose/?to=Kryptonh&subject=Content removal request for savevideo&message=https://np.reddit.com//r/lua/comments/z8hnt8/aneurysmlua/) &#32;|&#32; 
 [^(reddit video downloader)](https://redditsave.com) &#32;|&#32; [^(download video tiktok)](https://taksave.com)","<div class=""md""><h3><a href=""https://redditsave.com/r/lua/comments/z8hnt8/aneurysmlua/"">View link</a></h3>

<hr/>

<p><a href=""https://np.reddit.com/user/SaveVideo/comments/jv323v/info/""><strong>Info</strong></a>&#32;|&#32; <a href=""https://np.reddit.com/message/compose/?to=Kryptonh&amp;subject=Feedback%20for%20savevideo""><strong>Feedback</strong></a>&#32;|&#32;<a href=""https://ko-fi.com/getvideo""><strong>Donate</strong></a> &#32;|&#32; <a href=""https://np.reddit.com/message/compose/?to=Kryptonh&amp;subject=Content%20removal%20request%20for%20savevideo&amp;message=https://np.reddit.com//r/lua/comments/z8hnt8/aneurysmlua/""><strong>DMCA</strong></a> &#32;|&#32; 
 <a href=""https://redditsave.com""><sup>reddit video downloader</sup></a> &#32;|&#32; <a href=""https://taksave.com""><sup>download video tiktok</sup></a></p>
</div>",1670646102.0,,False,izmez08,False,t3_z8hnt8,t1_izmeyt9,/r/lua/comments/z8hnt8/aneurysmlua/izmez08/,0,False,1,False,z8hnt8,lua,t5_2qjla
40,smog_alado,"I believe this behavior is an optimization introduced in Lua 5.4. You can read about it [over here](https://github.com/lua/lua/blob/be908a7d4d8130264ad67c5789169769f824c5d1/ltable.c#L889). Look for the places that use the `alimit` field.

When Lua 5.4 computes a table length it remembers that value, to speed up the next time you need to compute the length. In the general case, the the length operator has to do an expensive binary search to find the table length. But since Lua 5.4 there are now special cases that are faster when the new length is exactly the same as the previous length, or one plus the previous length. For example, these special cases give a noticeable speed boost to loops where you append to the end of the list. Try comparing a loop similar to the one below in Lua 5.4 vs Lua 5.3

    local xs = {}
    for i = 1, 10000 do
        xs[#xs+1] = i
    end","<div class=""md""><p>I believe this behavior is an optimization introduced in Lua 5.4. You can read about it <a href=""https://github.com/lua/lua/blob/be908a7d4d8130264ad67c5789169769f824c5d1/ltable.c#L889"">over here</a>. Look for the places that use the <code>alimit</code> field.</p>

<p>When Lua 5.4 computes a table length it remembers that value, to speed up the next time you need to compute the length. In the general case, the the length operator has to do an expensive binary search to find the table length. But since Lua 5.4 there are now special cases that are faster when the new length is exactly the same as the previous length, or one plus the previous length. For example, these special cases give a noticeable speed boost to loops where you append to the end of the list. Try comparing a loop similar to the one below in Lua 5.4 vs Lua 5.3</p>

<pre><code>local xs = {}
for i = 1, 10000 do
    xs[#xs+1] = i
end
</code></pre>
</div>",1669819245.0,,1669824904.0,iyd2zbs,False,t3_z8hnt8,t1_iybse5r,/r/lua/comments/z8hnt8/aneurysmlua/iyd2zbs/,2,False,4,False,z8hnt8,lua,t5_2qjla
41,whoopdedo,I added a bit of extra context to my post since you've replied.,"<div class=""md""><p>I added a bit of extra context to my post since you&#39;ve replied.</p>
</div>",1669786992.0,,False,iybt97d,False,t3_z8hnt8,t1_iybse5r,/r/lua/comments/z8hnt8/aneurysmlua/iybt97d/,1,False,1,False,z8hnt8,lua,t5_2qjla
42,smog_alado,"As revered said, the problem is when you try to store `nil` in the table. Because of this, I recommend using `false` to represent missing values, instead of `nil`.","<div class=""md""><p>As revered said, the problem is when you try to store <code>nil</code> in the table. Because of this, I recommend using <code>false</code> to represent missing values, instead of <code>nil</code>.</p>
</div>",1669819665.0,,False,iyd3wxx,False,t3_z8hnt8,t1_iycpfci,/r/lua/comments/z8hnt8/aneurysmlua/iyd3wxx/,2,False,4,False,z8hnt8,lua,t5_2qjla
43,revereddesecration,"If your table is contiguous, that is, all elements are either preceded by an element or follow an element, then it does measure length. You just need to be wary of when to use it. 

Writing your own table length method is easy, just use the pairs function.","<div class=""md""><p>If your table is contiguous, that is, all elements are either preceded by an element or follow an element, then it does measure length. You just need to be wary of when to use it. </p>

<p>Writing your own table length method is easy, just use the pairs function.</p>
</div>",1669814440.0,,False,iyctamx,False,t3_z8hnt8,t1_iycpfci,/r/lua/comments/z8hnt8/aneurysmlua/iyctamx/,1,False,1,False,z8hnt8,lua,t5_2qjla
44,moomoomoo309,"Yes, but it's O(n) because it moves the subsequent elements if they're in a contiguous array internally.","<div class=""md""><p>Yes, but it&#39;s O(n) because it moves the subsequent elements if they&#39;re in a contiguous array internally.</p>
</div>",1669823415.0,,False,iydcvlt,False,t3_z8hnt8,t1_iyd9xai,/r/lua/comments/z8hnt8/aneurysmlua/iydcvlt/,1,False,1,False,z8hnt8,lua,t5_2qjla
45,AutoModerator,"Hi! Your code block was formatted using triple backticks in Reddit's Markdown mode, which unfortunately does not display properly for users viewing via old.reddit.com and some third-party readers.  This means your code will look mangled for those users, but it's easy to fix.  If you edit your comment, choose ""Switch to fancy pants editor"", and click ""Save edits"" it should automatically convert the code block into Reddit's original four-spaces code block format for you. 

*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/lua) if you have any questions or concerns.*","<div class=""md""><p>Hi! Your code block was formatted using triple backticks in Reddit&#39;s Markdown mode, which unfortunately does not display properly for users viewing via old.reddit.com and some third-party readers.  This means your code will look mangled for those users, but it&#39;s easy to fix.  If you edit your comment, choose &quot;Switch to fancy pants editor&quot;, and click &quot;Save edits&quot; it should automatically convert the code block into Reddit&#39;s original four-spaces code block format for you. </p>

<p><em>I am a bot, and this action was performed automatically. Please <a href=""/message/compose/?to=/r/lua"">contact the moderators of this subreddit</a> if you have any questions or concerns.</em></p>
</div>",1669819245.0,moderator,False,iyd2zce,False,t3_z8hnt8,t1_iyd2zbs,/r/lua/comments/z8hnt8/aneurysmlua/iyd2zce/,0,False,1,False,z8hnt8,lua,t5_2qjla
46,fatboychummy,"I feel like setting the border value to `nil` should cause it to recompute the border value on the next ""get-length"" call.

Feels weird that it seemingly isn't doing that.","<div class=""md""><p>I feel like setting the border value to <code>nil</code> should cause it to recompute the border value on the next &quot;get-length&quot; call.</p>

<p>Feels weird that it seemingly isn&#39;t doing that.</p>
</div>",1669843489.0,,False,iyesxn4,False,t3_z8hnt8,t1_iyd2zbs,/r/lua/comments/z8hnt8/aneurysmlua/iyesxn4/,1,False,1,False,z8hnt8,lua,t5_2qjla
47,ChakatStormCloud,"that implies that using the length operator actually affects the stored structure of the table itself, since, in the demo, I didn't actually change how it was populated, just whether or not I checked ~~which hole the electron went through~~ what value was before removing the middle indices.

I know that's just ""hey it's not guaranteed to be consistent"" but this level of... inconsistence is... quantum.

(I mean, I know it's probably just caching the first result and checking if it's still valid the second time, but the longer I think about it the more I want to drink)","<div class=""md""><p>that implies that using the length operator actually affects the stored structure of the table itself, since, in the demo, I didn&#39;t actually change how it was populated, just whether or not I checked <del>which hole the electron went through</del> what value was before removing the middle indices.</p>

<p>I know that&#39;s just &quot;hey it&#39;s not guaranteed to be consistent&quot; but this level of... inconsistence is... quantum.</p>

<p>(I mean, I know it&#39;s probably just caching the first result and checking if it&#39;s still valid the second time, but the longer I think about it the more I want to drink)</p>
</div>",1669787438.0,,1669788654.0,iybtxvx,True,t3_z8hnt8,t1_iybt97d,/r/lua/comments/z8hnt8/aneurysmlua/iybtxvx/,1,False,0,False,z8hnt8,lua,t5_2qjla
48,Spellsweaver,"Or table.remove, depending on what your goal is.","<div class=""md""><p>Or table.remove, depending on what your goal is.</p>
</div>",1669822157.0,,False,iyd9s8f,False,t3_z8hnt8,t1_iyd3wxx,/r/lua/comments/z8hnt8/aneurysmlua/iyd9s8f/,0,False,1,False,z8hnt8,lua,t5_2qjla
49,m-faith,Is this a compromise that was made for the purpose of keeping the language lightweight? Like maybe due to the nature of bytecode the mechanism that checks the length of a string isn't able to get the length of a table in all circumstances?,"<div class=""md""><p>Is this a compromise that was made for the purpose of keeping the language lightweight? Like maybe due to the nature of bytecode the mechanism that checks the length of a string isn&#39;t able to get the length of a table in all circumstances?</p>
</div>",1669822436.0,,False,iydagf7,False,t3_z8hnt8,t1_iyd3wxx,/r/lua/comments/z8hnt8/aneurysmlua/iydagf7/,1,False,1,False,z8hnt8,lua,t5_2qjla
50,Spellsweaver,"Despite my 10-something years of working with Lua, I don't think I ever found myself in a situation where I would need to know the number of elements in a non-array table (hash/dict/object/whatever). At most, I had to check for emptiness with next() sometimes.

I can imagine it happen, in theory, but in most of those cases you'd really just want an array either instead of hash, or in addition to it.","<div class=""md""><p>Despite my 10-something years of working with Lua, I don&#39;t think I ever found myself in a situation where I would need to know the number of elements in a non-array table (hash/dict/object/whatever). At most, I had to check for emptiness with next() sometimes.</p>

<p>I can imagine it happen, in theory, but in most of those cases you&#39;d really just want an array either instead of hash, or in addition to it.</p>
</div>",1669821973.0,,False,iyd9c0z,False,t3_z8hnt8,t1_iyctamx,/r/lua/comments/z8hnt8/aneurysmlua/iyd9c0z/,0,False,2,False,z8hnt8,lua,t5_2qjla
51,Spellsweaver,"I guess, if you don't care about the order of elements and have a huge list that you constantly change, it can improve the performance somewhat. But this situation is far from ordinary.","<div class=""md""><p>I guess, if you don&#39;t care about the order of elements and have a huge list that you constantly change, it can improve the performance somewhat. But this situation is far from ordinary.</p>
</div>",1669825324.0,,False,iydhn1e,False,t3_z8hnt8,t1_iydcvlt,/r/lua/comments/z8hnt8/aneurysmlua/iydhn1e/,1,False,1,False,z8hnt8,lua,t5_2qjla
52,smog_alado,"That should already happen. The confusing case that the OP found is when you set other places to nil, creating more holes/borders.","<div class=""md""><p>That should already happen. The confusing case that the OP found is when you set other places to nil, creating more holes/borders.</p>
</div>",1669844685.0,,False,iyevxk3,False,t3_z8hnt8,t1_iyesxn4,/r/lua/comments/z8hnt8/aneurysmlua/iyevxk3/,1,False,1,False,z8hnt8,lua,t5_2qjla
53,whoopdedo,That's the way of implementation-defined behavior. Better to learn it now than have your app break mysteriously a year later when the Lua runtime changes.,"<div class=""md""><p>That&#39;s the way of implementation-defined behavior. Better to learn it now than have your app break mysteriously a year later when the Lua runtime changes.</p>
</div>",1669788807.0,,False,iybvzef,False,t3_z8hnt8,t1_iybtxvx,/r/lua/comments/z8hnt8/aneurysmlua/iybvzef/,2,False,11,False,z8hnt8,lua,t5_2qjla
54,smog_alado,"Kind of... It's due to two design decisions: 1) There is a single table type, instead of separate types for arrays and hash tables; 2) The way to remove an element from a table is to assign `nil` to it.

Reason \#1 is related to Lua's minimalism but reason \#2 is more to blame for this weirdness with nil ""holes"". It means that, from the point of view of Lua, there is no difference between a truly sparse array and situations where the programmer intends to have an array that contains nil elements. For the truly sparse arrays, it's not clear what the length would be. But for the compact arrays it would be clear, if we had a way to tell the difference between nils that belong to the list and nils that are outside the list. Maybe if we could go back in time, it would be possible to change this. If we had a separate `delete`  operation, then there would be a difference between removing an item and assigning `nil` to one of the array slots. Unfortunately, now it's too late to go back and change this, because it would break too many programs. Maybe in Lua 6.0 if that ever comes out, but chances are low.","<div class=""md""><p>Kind of... It&#39;s due to two design decisions: 1) There is a single table type, instead of separate types for arrays and hash tables; 2) The way to remove an element from a table is to assign <code>nil</code> to it.</p>

<p>Reason #1 is related to Lua&#39;s minimalism but reason #2 is more to blame for this weirdness with nil &quot;holes&quot;. It means that, from the point of view of Lua, there is no difference between a truly sparse array and situations where the programmer intends to have an array that contains nil elements. For the truly sparse arrays, it&#39;s not clear what the length would be. But for the compact arrays it would be clear, if we had a way to tell the difference between nils that belong to the list and nils that are outside the list. Maybe if we could go back in time, it would be possible to change this. If we had a separate <code>delete</code>  operation, then there would be a difference between removing an item and assigning <code>nil</code> to one of the array slots. Unfortunately, now it&#39;s too late to go back and change this, because it would break too many programs. Maybe in Lua 6.0 if that ever comes out, but chances are low.</p>
</div>",1669824308.0,,1669824846.0,iydf399,False,t3_z8hnt8,t1_iydagf7,/r/lua/comments/z8hnt8/aneurysmlua/iydf399/,1,False,5,False,z8hnt8,lua,t5_2qjla
55,moomoomoo309,"I usually use it for building a list that isn't in a particular order, which then is not likely to change. I actually used that technique for a random iterator, create a table of 1 to N, swap a random element with the end, remove it, return that element.","<div class=""md""><p>I usually use it for building a list that isn&#39;t in a particular order, which then is not likely to change. I actually used that technique for a random iterator, create a table of 1 to N, swap a random element with the end, remove it, return that element.</p>
</div>",1669827894.0,,False,iydo7ag,False,t3_z8hnt8,t1_iydhn1e,/r/lua/comments/z8hnt8/aneurysmlua/iydo7ag/,0,False,2,False,z8hnt8,lua,t5_2qjla
56,fatboychummy,"Ah, misread their code. I though the second loop removed 6-10, not 6-9.","<div class=""md""><p>Ah, misread their code. I though the second loop removed 6-10, not 6-9.</p>
</div>",1669850717.0,,False,iyfa4hf,False,t3_z8hnt8,t1_iyevxk3,/r/lua/comments/z8hnt8/aneurysmlua/iyfa4hf/,0,False,2,False,z8hnt8,lua,t5_2qjla
57,ChakatStormCloud,"yeah, thankfully all it really means is:  
never use it for lists that may contain nil, manually track size/length  
never store a value in a numbered index on a table that's also storing a list, (no idea why someone would, but still)  
deletions from a list NEED to be filled in, if I'm using it for length.","<div class=""md""><p>yeah, thankfully all it really means is:<br/>
never use it for lists that may contain nil, manually track size/length<br/>
never store a value in a numbered index on a table that&#39;s also storing a list, (no idea why someone would, but still)<br/>
deletions from a list NEED to be filled in, if I&#39;m using it for length.</p>
</div>",1669789326.0,,False,iybwqa6,True,t3_z8hnt8,t1_iybvzef,/r/lua/comments/z8hnt8/aneurysmlua/iybwqa6/,1,False,1,False,z8hnt8,lua,t5_2qjla
58,m-faith,"> the way of implementation-defined behavior

would you like to elaborate on this?","<div class=""md""><blockquote>
<p>the way of implementation-defined behavior</p>
</blockquote>

<p>would you like to elaborate on this?</p>
</div>",1669809987.0,,1669810222.0,iyclvw0,False,t3_z8hnt8,t1_iybvzef,/r/lua/comments/z8hnt8/aneurysmlua/iyclvw0/,1,False,1,False,z8hnt8,lua,t5_2qjla
59,m-faith,"> The way to remove an element from a table is to assign nil to it

What about `table.remove`?","<div class=""md""><blockquote>
<p>The way to remove an element from a table is to assign nil to it</p>
</blockquote>

<p>What about <code>table.remove</code>?</p>
</div>",1669825223.0,,False,iydhdpy,False,t3_z8hnt8,t1_iydf399,/r/lua/comments/z8hnt8/aneurysmlua/iydhdpy/,1,False,1,False,z8hnt8,lua,t5_2qjla
60,yessiest,"Use pairs for counting. It iterates over evreryting, so it's as consistent as it gets.","<div class=""md""><p>Use pairs for counting. It iterates over evreryting, so it&#39;s as consistent as it gets.</p>
</div>",1669808193.0,,False,iycjc2o,False,t3_z8hnt8,t1_iybwqa6,/r/lua/comments/z8hnt8/aneurysmlua/iycjc2o/,0,False,1,False,z8hnt8,lua,t5_2qjla
61,whoopdedo,"https://predr.ag/blog/falsehoods-programmers-believe-about-undefined-behavior/

UB and IDB are things that have no guarantee they will be predictable, consistent, won't change, or even make sense. If you write a program assuming something that isn't part of the language specification you can't call it a bug when the program doesn't work. 

That's not to say UB is never a bug. If something out-of-spec is a security risk or causes crashes that's a reason to change it.","<div class=""md""><p><a href=""https://predr.ag/blog/falsehoods-programmers-believe-about-undefined-behavior/"">https://predr.ag/blog/falsehoods-programmers-believe-about-undefined-behavior/</a></p>

<p>UB and IDB are things that have no guarantee they will be predictable, consistent, won&#39;t change, or even make sense. If you write a program assuming something that isn&#39;t part of the language specification you can&#39;t call it a bug when the program doesn&#39;t work. </p>

<p>That&#39;s not to say UB is never a bug. If something out-of-spec is a security risk or causes crashes that&#39;s a reason to change it.</p>
</div>",1669840926.0,,False,iyem8he,False,t3_z8hnt8,t1_iyclvw0,/r/lua/comments/z8hnt8/aneurysmlua/iyem8he/,0,False,3,False,z8hnt8,lua,t5_2qjla
62,smog_alado,"Table.remove works by assigning `nil`. From the point of view of Lua the language, table.remove is just a regular function. It's different from say Python or Javascript where the language has a special `delete` statement.","<div class=""md""><p>Table.remove works by assigning <code>nil</code>. From the point of view of Lua the language, table.remove is just a regular function. It&#39;s different from say Python or Javascript where the language has a special <code>delete</code> statement.</p>
</div>",1669825806.0,,1669825990.0,iydiusv,False,t3_z8hnt8,t1_iydhdpy,/r/lua/comments/z8hnt8/aneurysmlua/iydiusv/,2,False,3,False,z8hnt8,lua,t5_2qjla
63,raews_i_esrever_ton,"I was under the impression that given table

    t={'apple', 'banana', 'orange'} 


    t[2]=nil

would be different than

    table.remove(t, 2)


I thought the first one would result table

    t={'apple', nil, 'orange'}

for which #t would give 1


and the second one would result table

    t={'apple', 'orange'}

for which #t would give 2","<div class=""md""><p>I was under the impression that given table</p>

<pre><code>t={&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;} 


t[2]=nil
</code></pre>

<p>would be different than</p>

<pre><code>table.remove(t, 2)
</code></pre>

<p>I thought the first one would result table</p>

<pre><code>t={&#39;apple&#39;, nil, &#39;orange&#39;}
</code></pre>

<p>for which #t would give 1</p>

<p>and the second one would result table</p>

<pre><code>t={&#39;apple&#39;, &#39;orange&#39;}
</code></pre>

<p>for which #t would give 2</p>
</div>",1669835360.0,,False,iye7sz5,False,t3_z8hnt8,t1_iydiusv,/r/lua/comments/z8hnt8/aneurysmlua/iye7sz5/,1,False,2,False,z8hnt8,lua,t5_2qjla
64,m-faith,"> From the point of view of Lua the language, table.remove is just a regular function

A ""regular function"" as opposed to what?... a ""language built-in"" or something?","<div class=""md""><blockquote>
<p>From the point of view of Lua the language, table.remove is just a regular function</p>
</blockquote>

<p>A &quot;regular function&quot; as opposed to what?... a &quot;language built-in&quot; or something?</p>
</div>",1669836535.0,,1669842574.0,iyeard6,False,t3_z8hnt8,t1_iydiusv,/r/lua/comments/z8hnt8/aneurysmlua/iyeard6/,1,False,1,False,z8hnt8,lua,t5_2qjla
65,smog_alado,"Yup. In that case `table.remove(t,2)` is equivalent to

    t[2] = t[3]
    t[3] = nil

If you're curious about the nitty gritty [check out the actual implementation](https://github.com/lua/lua/blob/be908a7d4d8130264ad67c5789169769f824c5d1/ltablib.c#L91). Note that it all boils down to a series of `get` and `set` operations.","<div class=""md""><p>Yup. In that case <code>table.remove(t,2)</code> is equivalent to</p>

<pre><code>t[2] = t[3]
t[3] = nil
</code></pre>

<p>If you&#39;re curious about the nitty gritty <a href=""https://github.com/lua/lua/blob/be908a7d4d8130264ad67c5789169769f824c5d1/ltablib.c#L91"">check out the actual implementation</a>. Note that it all boils down to a series of <code>get</code> and <code>set</code> operations.</p>
</div>",1669835895.0,,False,iye9549,False,t3_z8hnt8,t1_iye7sz5,/r/lua/comments/z8hnt8/aneurysmlua/iye9549/,1,False,3,False,z8hnt8,lua,t5_2qjla
66,smog_alado,Exactly. It's a regular function that just does a bunch of table assignments. We could have implemented it ourselves if we wanted.,"<div class=""md""><p>Exactly. It&#39;s a regular function that just does a bunch of table assignments. We could have implemented it ourselves if we wanted.</p>
</div>",1669837509.0,,False,iyedba2,False,t3_z8hnt8,t1_iyeard6,/r/lua/comments/z8hnt8/aneurysmlua/iyedba2/,1,False,2,False,z8hnt8,lua,t5_2qjla
67,raews_i_esrever_ton,"Ah, that makes sense. Good to know. So it just kind of reorders the table.","<div class=""md""><p>Ah, that makes sense. Good to know. So it just kind of reorders the table.</p>
</div>",1669836162.0,,False,iye9tjr,False,t3_z8hnt8,t1_iye9549,/r/lua/comments/z8hnt8/aneurysmlua/iye9tjr/,0,False,3,False,z8hnt8,lua,t5_2qjla
68,m-faith,"> We could have implemented it ourselves if we wanted.

Do you mean that figuratively? (*not* literally)?  I wouldn't anticipate being able to add a literal `table.somethingnew` function. Like our own implementation of `table.remove` would be like `function table_remove = ...` and then something to perform the...

    t[2] = t[3]
    t[3] = nil

...part. Right? If wrong, I'm very interested to learn how `table.whatever` could be extended.","<div class=""md""><blockquote>
<p>We could have implemented it ourselves if we wanted.</p>
</blockquote>

<p>Do you mean that figuratively? (<em>not</em> literally)?  I wouldn&#39;t anticipate being able to add a literal <code>table.somethingnew</code> function. Like our own implementation of <code>table.remove</code> would be like <code>function table_remove = ...</code> and then something to perform the...</p>

<pre><code>t[2] = t[3]
t[3] = nil
</code></pre>

<p>...part. Right? If wrong, I&#39;m very interested to learn how <code>table.whatever</code> could be extended.</p>
</div>",1669845408.0,,False,iyexqeo,False,t3_z8hnt8,t1_iyedba2,/r/lua/comments/z8hnt8/aneurysmlua/iyexqeo/,1,False,1,False,z8hnt8,lua,t5_2qjla
69,smog_alado,"Like this:

    table.remove = function(t, i)
        print(""This is our version of table.remove"")
        local n = #t
        i = i or n
        local ret = t[i]
        for j = i, n-1 do
            t[i] = t[i+1]
        end
        t[n] = nil
        return ret
    end","<div class=""md""><p>Like this:</p>

<pre><code>table.remove = function(t, i)
    print(&quot;This is our version of table.remove&quot;)
    local n = #t
    i = i or n
    local ret = t[i]
    for j = i, n-1 do
        t[i] = t[i+1]
    end
    t[n] = nil
    return ret
end
</code></pre>
</div>",1669849814.0,,1669850018.0,iyf82uw,False,t3_z8hnt8,t1_iyexqeo,/r/lua/comments/z8hnt8/aneurysmlua/iyf82uw/,2,False,2,False,z8hnt8,lua,t5_2qjla
70,m-faith,what? that's possible just like that? so excited to try that out...,"<div class=""md""><p>what? that&#39;s possible just like that? so excited to try that out...</p>
</div>",1669856841.0,,False,iyfn92a,False,t3_z8hnt8,t1_iyf82uw,/r/lua/comments/z8hnt8/aneurysmlua/iyfn92a/,0,False,2,False,z8hnt8,lua,t5_2qjla
71,m-faith,"wow, I love that lua lets me add `.foo()` or whatever to the existing `table` construct/thing. Is that commonly possible among programming languages? Is there a term which describes that ability?","<div class=""md""><p>wow, I love that lua lets me add <code>.foo()</code> or whatever to the existing <code>table</code> construct/thing. Is that commonly possible among programming languages? Is there a term which describes that ability?</p>
</div>",1669908874.0,,False,iyi0btu,False,t3_z8hnt8,t1_iyf82uw,/r/lua/comments/z8hnt8/aneurysmlua/iyi0btu/,1,False,1,False,z8hnt8,lua,t5_2qjla
72,smog_alado,Fairly common in dynamic and scripting languages. Not as common in typed language. (Google for Monkey Patching),"<div class=""md""><p>Fairly common in dynamic and scripting languages. Not as common in typed language. (Google for Monkey Patching)</p>
</div>",1669913237.0,,False,iyib3sg,False,t3_z8hnt8,t1_iyi0btu,/r/lua/comments/z8hnt8/aneurysmlua/iyib3sg/,1,False,2,False,z8hnt8,lua,t5_2qjla
73,m-faith,"nice, thanks! Monkeypatching. I like it. I didn't expect that to be possible!","<div class=""md""><p>nice, thanks! Monkeypatching. I like it. I didn&#39;t expect that to be possible!</p>
</div>",1669915535.0,,False,iyih47p,False,t3_z8hnt8,t1_iyib3sg,/r/lua/comments/z8hnt8/aneurysmlua/iyih47p/,0,False,1,False,z8hnt8,lua,t5_2qjla
74,diego_moita,"LuaJIT for ARM? Wow, if it could be used with Corona SDK or Android then it has a huge potential.

FFI looks fantastic, too. Too bad it won't be available to standard Lua, since it is implemented in the compiler.

Mike Pall is the 2nd big thing to happen to Lua (after Lua itself, of course).","<div class=""md""><p>LuaJIT for ARM? Wow, if it could be used with Corona SDK or Android then it has a huge potential.</p>

<p>FFI looks fantastic, too. Too bad it won&#39;t be available to standard Lua, since it is implemented in the compiler.</p>

<p>Mike Pall is the 2nd big thing to happen to Lua (after Lua itself, of course).</p>
</div>",1295707779.0,,False,c1drf82,False,t3_f6tw8,t3_f6tw8,/r/lua/comments/f6tw8/luajit_roadmap_2011/c1drf82/,0,False,10,False,f6tw8,lua,t5_2qjla
75,,This is a very interesting article. I wonder if we might someday see a LuaJIT that is compatible with the reference Lua implementation.,"<div class=""md""><p>This is a very interesting article. I wonder if we might someday see a LuaJIT that is compatible with the reference Lua implementation.</p>
</div>",1508405626.0,,False,dokx80g,False,t3_77cywp,t3_77cywp,/r/lua/comments/77cywp/helping_to_make_luajit_faster/dokx80g/,1,False,3,False,77cywp,lua,t5_2qjla
76,halfduece,"Great to see what Laurence Tratt has been up to. I used to read his blog, but haven't in several years, time to look him up again (http://tratt.net/laurie/blog/).

Does anyone have any information about how Cloudflare uses LuaJit specifically?","<div class=""md""><p>Great to see what Laurence Tratt has been up to. I used to read his blog, but haven&#39;t in several years, time to look him up again (<a href=""http://tratt.net/laurie/blog/"">http://tratt.net/laurie/blog/</a>).</p>

<p>Does anyone have any information about how Cloudflare uses LuaJit specifically?</p>
</div>",1508423821.0,,1508425251.0,dol7ovq,False,t3_77cywp,t3_77cywp,/r/lua/comments/77cywp/helping_to_make_luajit_faster/dol7ovq/,1,False,2,False,77cywp,lua,t5_2qjla
77,,If so it won't be from these folks; it sounds like CloudFlare is interested in performance only.,"<div class=""md""><p>If so it won&#39;t be from these folks; it sounds like CloudFlare is interested in performance only.</p>
</div>",1508431242.0,,False,dolew63,False,t3_77cywp,t1_dokx80g,/r/lua/comments/77cywp/helping_to_make_luajit_faster/dolew63/,0,False,3,False,77cywp,lua,t5_2qjla
78,mordnis,"If you search 'LuaJIT' on their blog, you can find some information. They blogged about Lua and LuaJIT a few times.","<div class=""md""><p>If you search &#39;LuaJIT&#39; on their blog, you can find some information. They blogged about Lua and LuaJIT a few times.</p>
</div>",1508427667.0,,False,dolbchg,False,t3_77cywp,t1_dol7ovq,/r/lua/comments/77cywp/helping_to_make_luajit_faster/dolbchg/,0,False,1,False,77cywp,lua,t5_2qjla
79,Togfox,"That is really cool.  I'll get into that stuff one day but I've still got to learn so much about LOVE.

Keep at it.","<div class=""md""><p>That is really cool.  I&#39;ll get into that stuff one day but I&#39;ve still got to learn so much about LOVE.</p>

<p>Keep at it.</p>
</div>",1689511419.0,,False,js6mv4r,False,t3_1512gry,t3_1512gry,/r/lua/comments/1512gry/lövr_first_person_view_test/js6mv4r/,1,False,4,False,1512gry,lua,t5_2qjla
80,justinlua,Neat!,"<div class=""md""><p>Neat!</p>
</div>",1689505717.0,,False,js6e35o,False,t3_1512gry,t3_1512gry,/r/lua/comments/1512gry/lövr_first_person_view_test/js6e35o/,1,False,2,False,1512gry,lua,t5_2qjla
81,Mexlicano,"Thanks, but I'm using LOVR. It's like Love2D, but for 3D/VR development.","<div class=""md""><p>Thanks, but I&#39;m using LOVR. It&#39;s like Love2D, but for 3D/VR development.</p>
</div>",1689553878.0,,False,js9d1t2,True,t3_1512gry,t1_js6mv4r,/r/lua/comments/1512gry/lövr_first_person_view_test/js9d1t2/,1,False,2,False,1512gry,lua,t5_2qjla
82,Mexlicano,Thank you. It took me more than just basics.,"<div class=""md""><p>Thank you. It took me more than just basics.</p>
</div>",1689505833.0,,False,js6e95n,True,t3_1512gry,t1_js6e35o,/r/lua/comments/1512gry/lövr_first_person_view_test/js6e95n/,0,False,2,False,1512gry,lua,t5_2qjla
83,Togfox,"Yep. I know.  :)

When I'm done with LOVE2D I'll move on to LOVR. Maybe you'll have lots of reference material for newbies by then.  =)","<div class=""md""><p>Yep. I know.  :)</p>

<p>When I&#39;m done with LOVE2D I&#39;ll move on to LOVR. Maybe you&#39;ll have lots of reference material for newbies by then.  =)</p>
</div>",1689559496.0,,False,js9omsi,False,t3_1512gry,t1_js9d1t2,/r/lua/comments/1512gry/lövr_first_person_view_test/js9omsi/,0,False,2,False,1512gry,lua,t5_2qjla
84,fatboychummy,Moonscript also exists... but I prefer just coding in pure Lua,"<div class=""md""><p>Moonscript also exists... but I prefer just coding in pure Lua</p>
</div>",1665280763.0,,False,irl20oe,False,t3_xyzmdq,t3_xyzmdq,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irl20oe/,0,False,11,False,xyzmdq,lua,t5_2qjla
85,Thadeu_de_Paula,"There is Pallene, from some of the Official Lua members:

https://github.com/pallene-lang/pallene","<div class=""md""><p>There is Pallene, from some of the Official Lua members:</p>

<p><a href=""https://github.com/pallene-lang/pallene"">https://github.com/pallene-lang/pallene</a></p>
</div>",1665268738.0,,False,irkdexn,False,t3_xyzmdq,t3_xyzmdq,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irkdexn/,1,False,8,False,xyzmdq,lua,t5_2qjla
86,plus4dbu,"...but, why?

I argue loosely typed languages are more useful because you have greater flexibility and sometimes cleaner code. For example, parsing a string to a number can use the same variable. Since Lua does not allow overloaded methods, then each parameter can be whatever type it needs to be and can be handled as needed within the function.","<div class=""md""><p>...but, why?</p>

<p>I argue loosely typed languages are more useful because you have greater flexibility and sometimes cleaner code. For example, parsing a string to a number can use the same variable. Since Lua does not allow overloaded methods, then each parameter can be whatever type it needs to be and can be handled as needed within the function.</p>
</div>",1665334776.0,,False,irnkepw,False,t3_xyzmdq,t3_xyzmdq,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irnkepw/,3,False,3,False,xyzmdq,lua,t5_2qjla
87,jacobhumston,If you use `--!strict` with Luau wouldn't it be kinda the same thing unless I'm missing something.,"<div class=""md""><p>If you use <code>--!strict</code> with Luau wouldn&#39;t it be kinda the same thing unless I&#39;m missing something.</p>
</div>",1665289474.0,,False,irligu5,False,t3_xyzmdq,t3_xyzmdq,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irligu5/,1,False,2,False,xyzmdq,lua,t5_2qjla
88,_Felix44,"There are many languages that compile to Lua, like MoonScript or Clue","<div class=""md""><p>There are many languages that compile to Lua, like MoonScript or Clue</p>
</div>",1665303344.0,,False,irm1dox,False,t3_xyzmdq,t3_xyzmdq,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irm1dox/,0,False,1,False,xyzmdq,lua,t5_2qjla
89,PPinYourMomsAss,Teal is amazing! Highly reccomend,"<div class=""md""><p>Teal is amazing! Highly reccomend</p>
</div>",1665350531.0,,False,iroo7a2,False,t3_xyzmdq,t3_xyzmdq,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/iroo7a2/,0,False,1,False,xyzmdq,lua,t5_2qjla
90,Comfortable-Debt-524,"You can also just use C++ and embed Lua into it, after all Lua was created as an extension to C++.","<div class=""md""><p>You can also just use C++ and embed Lua into it, after all Lua was created as an extension to C++.</p>
</div>",1665903403.0,,False,isikn7w,False,t3_xyzmdq,t3_xyzmdq,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/isikn7w/,0,False,1,False,xyzmdq,lua,t5_2qjla
91,ewmailing,"Roberto Ierusalimschy recently gave a talk on Lua & Pallene at DConf'22:

https://www.youtube.com/watch?v=H3inzGGFefg","<div class=""md""><p>Roberto Ierusalimschy recently gave a talk on Lua &amp; Pallene at DConf&#39;22:</p>

<p><a href=""https://www.youtube.com/watch?v=H3inzGGFefg"">https://www.youtube.com/watch?v=H3inzGGFefg</a></p>
</div>",1665309868.0,,False,irm9581,False,t3_xyzmdq,t1_irkdexn,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irm9581/,0,False,4,False,xyzmdq,lua,t5_2qjla
92,PPinYourMomsAss,When you get to large projects it becomes a lot more maintainable,"<div class=""md""><p>When you get to large projects it becomes a lot more maintainable</p>
</div>",1665350569.0,,False,irooai3,False,t3_xyzmdq,t1_irnkepw,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irooai3/,0,False,2,False,xyzmdq,lua,t5_2qjla
93,NetsuDagneel,"I found in large projects that having a statically typed language is more beneficial, I'd rather do

`int a = 10`

`string b = a.toString()`

and then for sure know what `a` and `b` is, or a more extreme example:

`function doSometing(x, y, name, callback, cards)`

`x`, `y` and `name` are somewhat easier to figure out, but `callback` and `cards` might be more confusing/difficult, than if we just did this:

`int[] function doSomething(int x, int y, string name, func(str, str) callback, CardObj card)`

The above says so much about the function from just a glance...

Or let's even say this:

variable `a` can be either a *string* or an *array*, we don't know, we played with our variables in unpredictable ways, so now we have to do this: 

    if typeof a == array: 
      a.join("""").toFloat()
    else if typeof a == string:
      a.toFloat()
    // whoops, we forgot to check the other types we have, so if a is anything other than an array or a string our code will be broken

Now we have a typed language:

`a` \-> this is a string (or alternatively `string | array[string] a;`), we know this because that is what we told it to be

`a.toFloat() // no worries, we know it's a string`

But again, everyone prefers something else. I found that once I started working I started using dynamically typed languages less, just because very large projects becomes incredibly difficult to maintain over time, especially if you use dynamically typed languages","<div class=""md""><p>I found in large projects that having a statically typed language is more beneficial, I&#39;d rather do</p>

<p><code>int a = 10</code></p>

<p><code>string b = a.toString()</code></p>

<p>and then for sure know what <code>a</code> and <code>b</code> is, or a more extreme example:</p>

<p><code>function doSometing(x, y, name, callback, cards)</code></p>

<p><code>x</code>, <code>y</code> and <code>name</code> are somewhat easier to figure out, but <code>callback</code> and <code>cards</code> might be more confusing/difficult, than if we just did this:</p>

<p><code>int[] function doSomething(int x, int y, string name, func(str, str) callback, CardObj card)</code></p>

<p>The above says so much about the function from just a glance...</p>

<p>Or let&#39;s even say this:</p>

<p>variable <code>a</code> can be either a <em>string</em> or an <em>array</em>, we don&#39;t know, we played with our variables in unpredictable ways, so now we have to do this: </p>

<pre><code>if typeof a == array: 
  a.join(&quot;&quot;).toFloat()
else if typeof a == string:
  a.toFloat()
// whoops, we forgot to check the other types we have, so if a is anything other than an array or a string our code will be broken
</code></pre>

<p>Now we have a typed language:</p>

<p><code>a</code> -&gt; this is a string (or alternatively <code>string | array[string] a;</code>), we know this because that is what we told it to be</p>

<p><code>a.toFloat() // no worries, we know it&#39;s a string</code></p>

<p>But again, everyone prefers something else. I found that once I started working I started using dynamically typed languages less, just because very large projects becomes incredibly difficult to maintain over time, especially if you use dynamically typed languages</p>
</div>",1665340273.0,,False,irnyjfk,True,t3_xyzmdq,t1_irnkepw,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irnyjfk/,0,False,1,False,xyzmdq,lua,t5_2qjla
94,lambda_abstraction,"More to the point, just about any way of imposing static types on Lua is going to have gaping holes.  Consider a function taking a table with keyword parameters.  That table might be constructed at run time.  How do you check when you don't know what's there?  At best you'll capture a subset of Lua's functionality.

To the large project counter argument: I think of large systems done successfully in Common Lisp (Macsyma as an example) or large business systems in Smalltalk.  The thing about both these languages is that they often involve very good documentation systems often within their corresponding IDEs frequently built right into the language itself.  I wonder how hard it would be to construct something like this for Lua around a common editor like Emacs.  The harder thing is the crash/resume style debugging that both Common Lisp and Smalltalk provide.  While one can hook an error, I don't think process resumption could be a thing.  Someone ding me over the head if this is available in Lua with little effort.","<div class=""md""><p>More to the point, just about any way of imposing static types on Lua is going to have gaping holes.  Consider a function taking a table with keyword parameters.  That table might be constructed at run time.  How do you check when you don&#39;t know what&#39;s there?  At best you&#39;ll capture a subset of Lua&#39;s functionality.</p>

<p>To the large project counter argument: I think of large systems done successfully in Common Lisp (Macsyma as an example) or large business systems in Smalltalk.  The thing about both these languages is that they often involve very good documentation systems often within their corresponding IDEs frequently built right into the language itself.  I wonder how hard it would be to construct something like this for Lua around a common editor like Emacs.  The harder thing is the crash/resume style debugging that both Common Lisp and Smalltalk provide.  While one can hook an error, I don&#39;t think process resumption could be a thing.  Someone ding me over the head if this is available in Lua with little effort.</p>
</div>",1665411941.0,,1665412278.0,irriu4u,False,t3_xyzmdq,t1_irnkepw,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irriu4u/,1,False,1,False,xyzmdq,lua,t5_2qjla
95,PPinYourMomsAss,Luau is only really good for Roblox,"<div class=""md""><p>Luau is only really good for Roblox</p>
</div>",1665350550.0,,False,iroo8tb,False,t3_xyzmdq,t1_irligu5,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/iroo8tb/,1,False,3,False,xyzmdq,lua,t5_2qjla
96,plus4dbu,Zerobrane is a great IDE that allows breakpoint debugging and step by step execution. You can also watch any variable during run time.,"<div class=""md""><p>Zerobrane is a great IDE that allows breakpoint debugging and step by step execution. You can also watch any variable during run time.</p>
</div>",1665438652.0,,False,irtc3et,False,t3_xyzmdq,t1_irriu4u,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irtc3et/,1,False,1,False,xyzmdq,lua,t5_2qjla
97,jacobhumston,You're not exactly wrong but it can be used for other stuff too I suppose,"<div class=""md""><p>You&#39;re not exactly wrong but it can be used for other stuff too I suppose</p>
</div>",1665355789.0,,False,iroztst,False,t3_xyzmdq,t1_iroo8tb,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/iroztst/,1,False,1,False,xyzmdq,lua,t5_2qjla
98,lambda_abstraction,That's not quite the same thing as the fix-and-resume nature of Smalltalk and Lisp.,"<div class=""md""><p>That&#39;s not quite the same thing as the fix-and-resume nature of Smalltalk and Lisp.</p>
</div>",1665445305.0,,False,irtqhzl,False,t3_xyzmdq,t1_irtc3et,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irtqhzl/,0,False,2,False,xyzmdq,lua,t5_2qjla
99,PPinYourMomsAss,"It is too sandboxed for that, and embedding it is harder than regular lua","<div class=""md""><p>It is too sandboxed for that, and embedding it is harder than regular lua</p>
</div>",1665357674.0,,False,irp3uhy,False,t3_xyzmdq,t1_iroztst,/r/lua/comments/xyzmdq/you_can_make_lua_compiledstatically_typed_using/irp3uhy/,0,False,0,False,xyzmdq,lua,t5_2qjla
100,,"Why only for lua though? 

It's such a small subreddit and there isn't much to lua apart from being embeddable and a scripting language. 

/r/codingladies would make more sense.","<div class=""md""><p>Why only for lua though? </p>

<p>It&#39;s such a small subreddit and there isn&#39;t much to lua apart from being embeddable and a scripting language. </p>

<p><a href=""/r/codingladies"">/r/codingladies</a> would make more sense.</p>
</div>",1418302814.0,,False,cmrqxd8,False,t3_2owoue,t3_2owoue,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmrqxd8/,0,False,4,False,2owoue,lua,t5_2qjla
101,randrews,"The thing is, if it were a group for Lua programmers from Finland, or Lua programmers who are teenagers, or Lua programmers over 60, or any other subgroup of humanity, no one would question it at all. But try to make something specifically for women and you get people coming out of the woodwork asking ""why do we need this?"" It's complete bullshit.

Thank you for calling it out, and adding the link to the sidebar.","<div class=""md""><p>The thing is, if it were a group for Lua programmers from Finland, or Lua programmers who are teenagers, or Lua programmers over 60, or any other subgroup of humanity, no one would question it at all. But try to make something specifically for women and you get people coming out of the woodwork asking &quot;why do we need this?&quot; It&#39;s complete bullshit.</p>

<p>Thank you for calling it out, and adding the link to the sidebar.</p>
</div>",1418277094.0,,False,cmrkvea,False,t3_2owoue,t3_2owoue,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmrkvea/,2,False,15,False,2owoue,lua,t5_2qjla
102,robertmeta,"> Thought experiment: I'd like any guy reading this to list all of the social circles you hang out in which are more than 80% female.

(Pedantic nah'huh incoming, but in a kind tone) Nurses, and they are wonderful, amazing people.  I sleep really odd hours, so end up with lots of 3rd shift friends.  The group I hang out with is exclusively female, but nationally (United States) about 6% of nurses are men.  Being an RN is a hard but rewarding job with one of the fastest growing salaries in the US (approaching 70k average).  The gender ""norms"" things hits real hard here -- my friends, who are female nurses, even feel male nurses are far less masculine  ... 

I would support a ""support group"" for male nurses, so I guess I support his as well!  Yey, separate but equal.  

Or... more honestly, I don't care... life is far too short to get angry over people wanting to self-organize around physical properties... if they think it improves the quality of their life, who am I to argue.  Race, gender, location, height, eye color, age, foot size, whatever you want to self-organize around, go for it!  To anyone who might be angry about this -- form your own group, maybe it will end up in the sidebar!","<div class=""md""><blockquote>
<p>Thought experiment: I&#39;d like any guy reading this to list all of the social circles you hang out in which are more than 80% female.</p>
</blockquote>

<p>(Pedantic nah&#39;huh incoming, but in a kind tone) Nurses, and they are wonderful, amazing people.  I sleep really odd hours, so end up with lots of 3rd shift friends.  The group I hang out with is exclusively female, but nationally (United States) about 6% of nurses are men.  Being an RN is a hard but rewarding job with one of the fastest growing salaries in the US (approaching 70k average).  The gender &quot;norms&quot; things hits real hard here -- my friends, who are female nurses, even feel male nurses are far less masculine  ... </p>

<p>I would support a &quot;support group&quot; for male nurses, so I guess I support his as well!  Yey, separate but equal.  </p>

<p>Or... more honestly, I don&#39;t care... life is far too short to get angry over people wanting to self-organize around physical properties... if they think it improves the quality of their life, who am I to argue.  Race, gender, location, height, eye color, age, foot size, whatever you want to self-organize around, go for it!  To anyone who might be angry about this -- form your own group, maybe it will end up in the sidebar!</p>
</div>",1418282717.0,,1418318704.0,cmrmnzv,False,t3_2owoue,t3_2owoue,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmrmnzv/,0,False,2,False,2owoue,lua,t5_2qjla
103,catwell,"This just earned you Gold :)

Also: http://ncase.me/polygons/","<div class=""md""><p>This just earned you Gold :)</p>

<p>Also: <a href=""http://ncase.me/polygons/"">http://ncase.me/polygons/</a></p>
</div>",1418250619.0,,1418250846.0,cmr7xm1,False,t3_2owoue,t3_2owoue,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmr7xm1/,2,False,5,False,2owoue,lua,t5_2qjla
104,revereddesecration,Your head seems to be screwed on right. Glad to have you as a mod!,"<div class=""md""><p>Your head seems to be screwed on right. Glad to have you as a mod!</p>
</div>",1418252955.0,,False,cmr989f,False,t3_2owoue,t3_2owoue,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmr989f/,0,False,4,False,2owoue,lua,t5_2qjla
105,,[removed],"<div class=""md""><p>[removed]</p>
</div>",1418253985.0,,False,cmr9ryf,False,t3_2owoue,t3_2owoue,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmr9ryf/,0,False,2,False,2owoue,lua,t5_2qjla
106,hisham_hm,Bravo! Cheers and upvotes!,"<div class=""md""><p>Bravo! Cheers and upvotes!</p>
</div>",1418266410.0,,False,cmrg0sa,False,t3_2owoue,t3_2owoue,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmrg0sa/,0,False,0,False,2owoue,lua,t5_2qjla
107,edalcol,"It could have contained the word sexism, you know, the highschoolers weren't just highschoolers, they went down to directly insulting a member of our community over this.

But tbh, I'm glad they seem not to even be members of the Lua community, it seems like they just came here through a link to cause embarrassment!

I'm very happy the moderation decided to act upon. This is just great! ","<div class=""md""><p>It could have contained the word sexism, you know, the highschoolers weren&#39;t just highschoolers, they went down to directly insulting a member of our community over this.</p>

<p>But tbh, I&#39;m glad they seem not to even be members of the Lua community, it seems like they just came here through a link to cause embarrassment!</p>

<p>I&#39;m very happy the moderation decided to act upon. This is just great! </p>
</div>",1418265180.0,,False,cmrferr,False,t3_2owoue,t3_2owoue,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmrferr/,0,False,1,False,2owoue,lua,t5_2qjla
108,heatherhaks,"Yeah. I'm a girl, but this kind of arrogant crap from a mod of this subreddit kinda makes me not want to be a member here.","<div class=""md""><p>Yeah. I&#39;m a girl, but this kind of arrogant crap from a mod of this subreddit kinda makes me not want to be a member here.</p>
</div>",1418285140.0,,False,cmrnac4,False,t3_2owoue,t3_2owoue,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmrnac4/,1,False,-2,False,2owoue,lua,t5_2qjla
109,robertmeta,"Yep, groups often self-organize around physical properties, yet certain ones just rub people the wrong way... Retired Lua programmers would be an awesome (if small) group. ","<div class=""md""><p>Yep, groups often self-organize around physical properties, yet certain ones just rub people the wrong way... Retired Lua programmers would be an awesome (if small) group. </p>
</div>",1418283200.0,,False,cmrmsor,False,t3_2owoue,t1_cmrkvea,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmrmsor/,0,False,3,False,2owoue,lua,t5_2qjla
110,EricTboneJackson,"None of this is true. /r/lua has next to zero traffic. It does not need subgroups. Period. Yet if you say that, and the subgroup happens to be women, you get accused of being sexist. That's complete bullshit.","<div class=""md""><p>None of this is true. <a href=""/r/lua"">/r/lua</a> has next to zero traffic. It does not need subgroups. Period. Yet if you say that, and the subgroup happens to be women, you get accused of being sexist. That&#39;s complete bullshit.</p>
</div>",1418510804.0,,False,cmu25fr,False,t3_2owoue,t1_cmrkvea,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmu25fr/,0,False,2,False,2owoue,lua,t5_2qjla
111,edalcol,I love that post!,"<div class=""md""><p>I love that post!</p>
</div>",1418263416.0,,False,cmrejay,False,t3_2owoue,t1_cmr7xm1,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmrejay/,0,False,5,False,2owoue,lua,t5_2qjla
112,pygy_,"That post is awesome, and completely changed the way I think about the lack of diversity in tech circles, and about positive discrimination in general.","<div class=""md""><p>That post is awesome, and completely changed the way I think about the lack of diversity in tech circles, and about positive discrimination in general.</p>
</div>",1418253235.0,,False,cmr9dn8,False,t3_2owoue,t1_cmr7xm1,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmr9dn8/,0,False,6,False,2owoue,lua,t5_2qjla
113,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1418338442.0,,False,cms9fd0,False,t3_2owoue,t1_cmrnac4,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cms9fd0/,1,False,1,False,2owoue,lua,t5_2qjla
114,edalcol,"As a woman and one of the founders of LuaLadies I did not consider this white knighting since he is the moderator who happens to be a male, and not a random person. I think he is doing this in his position as a mod. Anyway, that's just how I see it. As to the need of a post, this was due to the fact that my announcement post for LuaLadies got invaded by trolls, it seems. Also, this woman was in that topic arguing that there's no such thing as a gender issue in technology, which, while I'm happy that she seems not to be affected by it, it's false.","<div class=""md""><p>As a woman and one of the founders of LuaLadies I did not consider this white knighting since he is the moderator who happens to be a male, and not a random person. I think he is doing this in his position as a mod. Anyway, that&#39;s just how I see it. As to the need of a post, this was due to the fact that my announcement post for LuaLadies got invaded by trolls, it seems. Also, this woman was in that topic arguing that there&#39;s no such thing as a gender issue in technology, which, while I&#39;m happy that she seems not to be affected by it, it&#39;s false.</p>
</div>",1418373921.0,,1418374122.0,cmsoj2p,False,t3_2owoue,t1_cms9fd0,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmsoj2p/,1,False,4,False,2owoue,lua,t5_2qjla
115,heatherhaks,I never said there wasn't a gender issue in technology. I said I've never experienced a gender issue in programming. Please don't misquote me to further your agenda.,"<div class=""md""><p>I never said there wasn&#39;t a gender issue in technology. I said I&#39;ve never experienced a gender issue in programming. Please don&#39;t misquote me to further your agenda.</p>
</div>",1418405903.0,,False,cmsyyxi,False,t3_2owoue,t1_cmsoj2p,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmsyyxi/,1,False,-2,False,2owoue,lua,t5_2qjla
116,edalcol,"And you're acting like your experience disqualifies others' experience. The fact that you don't see an utility in this group is great, really! It is really great that the gender imbalance does not have an impact on you. But that does not mean that others feel the same exact way! That's my whole issue with your discourse. It's not about agenda. This is real. ""It doesn't happen to me, so let's not care"" sounds really... I don't even know what to say. If that's not what you meant, then I'm sorry, but that's really what I'm getting from everything you're saying so far...","<div class=""md""><p>And you&#39;re acting like your experience disqualifies others&#39; experience. The fact that you don&#39;t see an utility in this group is great, really! It is really great that the gender imbalance does not have an impact on you. But that does not mean that others feel the same exact way! That&#39;s my whole issue with your discourse. It&#39;s not about agenda. This is real. &quot;It doesn&#39;t happen to me, so let&#39;s not care&quot; sounds really... I don&#39;t even know what to say. If that&#39;s not what you meant, then I&#39;m sorry, but that&#39;s really what I&#39;m getting from everything you&#39;re saying so far...</p>
</div>",1418437485.0,,False,cmtes7x,False,t3_2owoue,t1_cmsyyxi,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmtes7x/,1,False,4,False,2owoue,lua,t5_2qjla
117,heatherhaks,"My view is that if everyone agrees the Lua community doesn't have a sexism problem, and my take of the previous conversation is that everyone does agree on that, then any separation based on gender serves merely to introduce sexism to the community, not eliminate it.

Are you saying it sucks that this group doesn't have sexism in it? It sure sounds like it does.","<div class=""md""><p>My view is that if everyone agrees the Lua community doesn&#39;t have a sexism problem, and my take of the previous conversation is that everyone does agree on that, then any separation based on gender serves merely to introduce sexism to the community, not eliminate it.</p>

<p>Are you saying it sucks that this group doesn&#39;t have sexism in it? It sure sounds like it does.</p>
</div>",1418438731.0,,False,cmtfabo,False,t3_2owoue,t1_cmtes7x,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmtfabo/,1,False,-1,False,2owoue,lua,t5_2qjla
118,edalcol,"I *never* said the Lua community is sexist. I said the Lua community has very few females. Which is true. Neither have I said that this is a separation of the community, on the contrary. You're putting words in my mouth. I already explained this on the other topic you participated. ","<div class=""md""><p>I <em>never</em> said the Lua community is sexist. I said the Lua community has very few females. Which is true. Neither have I said that this is a separation of the community, on the contrary. You&#39;re putting words in my mouth. I already explained this on the other topic you participated. </p>
</div>",1418460117.0,,False,cmtm42m,False,t3_2owoue,t1_cmtfabo,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmtm42m/,1,False,4,False,2owoue,lua,t5_2qjla
119,heatherhaks,"You put words in my mouth first. Further, I never claimed -you- said it was separation. -I- said it was. It is. It is singling out females, in a group where both sexes are treated equally. That, in itself, is sexist and wrong.","<div class=""md""><p>You put words in my mouth first. Further, I never claimed -you- said it was separation. -I- said it was. It is. It is singling out females, in a group where both sexes are treated equally. That, in itself, is sexist and wrong.</p>
</div>",1418460370.0,,False,cmtm5tc,False,t3_2owoue,t1_cmtm42m,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmtm5tc/,1,False,-1,False,2owoue,lua,t5_2qjla
120,edalcol,"I keep what I said, that you're acting that an issue that does not affect _you_ should not be addressed. No, this is not sexist, neither wrong. This is addressing a real issue, that we have few females in the community, and trying to increase it. This group will never ever sling out females already from the main Lua community. Simply because it doesn't work that way! On the contrary, it will bring in new women that did not participate before. Lua being a nice community is the exact reason that it is a great group to receive a new number of women.

As, apparently, my words fail to touch you, here are some links that explain this well: 
http://www.chesnok.com/daily/2013/02/23/why-pyladies/
http://www.informit.com/articles/article.aspx?p=2137399
http://railsgirls.com/press","<div class=""md""><p>I keep what I said, that you&#39;re acting that an issue that does not affect <em>you</em> should not be addressed. No, this is not sexist, neither wrong. This is addressing a real issue, that we have few females in the community, and trying to increase it. This group will never ever sling out females already from the main Lua community. Simply because it doesn&#39;t work that way! On the contrary, it will bring in new women that did not participate before. Lua being a nice community is the exact reason that it is a great group to receive a new number of women.</p>

<p>As, apparently, my words fail to touch you, here are some links that explain this well: 
<a href=""http://www.chesnok.com/daily/2013/02/23/why-pyladies/"">http://www.chesnok.com/daily/2013/02/23/why-pyladies/</a>
<a href=""http://www.informit.com/articles/article.aspx?p=2137399"">http://www.informit.com/articles/article.aspx?p=2137399</a>
<a href=""http://railsgirls.com/press"">http://railsgirls.com/press</a></p>
</div>",1418461315.0,,False,cmtmcdn,False,t3_2owoue,t1_cmtm5tc,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmtmcdn/,1,False,5,False,2owoue,lua,t5_2qjla
121,heatherhaks,You are completely failing to understand me and you keep trying to put words in my mouth and attack me as a person. ,"<div class=""md""><p>You are completely failing to understand me and you keep trying to put words in my mouth and attack me as a person. </p>
</div>",1418461957.0,,False,cmtmgl0,False,t3_2owoue,t1_cmtmcdn,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmtmgl0/,1,False,1,False,2owoue,lua,t5_2qjla
122,edalcol,"It's just it's very frustrating to be called sexist repeatedly. You have accused my project of being sexist multiple times and you are also completely failing to understand me. I'm sorry if I seemed to attack you, that was not my intention. From my end, it looks like I'm trying to make something to help and you are just trying to invalidate and jinx it. Even though that are similar projects to sustain my idea that it works. It *is* very frustrating. Have checked out the links I posted?","<div class=""md""><p>It&#39;s just it&#39;s very frustrating to be called sexist repeatedly. You have accused my project of being sexist multiple times and you are also completely failing to understand me. I&#39;m sorry if I seemed to attack you, that was not my intention. From my end, it looks like I&#39;m trying to make something to help and you are just trying to invalidate and jinx it. Even though that are similar projects to sustain my idea that it works. It <em>is</em> very frustrating. Have checked out the links I posted?</p>
</div>",1418462520.0,,1418462733.0,cmtmk65,False,t3_2owoue,t1_cmtmgl0,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmtmk65/,1,False,1,False,2owoue,lua,t5_2qjla
123,heatherhaks,"No, I haven't. I'm really not interested in continuing this with you. My post here was criticizing the arrogant behavior of the OP. You're the one who called me out. 

As for why I believe this particular project to be sexist is because it is introducing separation between genders in a group that doesn't have it. ","<div class=""md""><p>No, I haven&#39;t. I&#39;m really not interested in continuing this with you. My post here was criticizing the arrogant behavior of the OP. You&#39;re the one who called me out. </p>

<p>As for why I believe this particular project to be sexist is because it is introducing separation between genders in a group that doesn&#39;t have it. </p>
</div>",1418463464.0,,False,cmtmq4t,False,t3_2owoue,t1_cmtmk65,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmtmq4t/,1,False,-2,False,2owoue,lua,t5_2qjla
124,edalcol,Ok.,"<div class=""md""><p>Ok.</p>
</div>",1418463587.0,,False,cmtmqw7,False,t3_2owoue,t1_cmtmq4t,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmtmqw7/,1,False,2,False,2owoue,lua,t5_2qjla
125,adnzzzzZ,"No offense to your project or anything, but this whole discussion made people pick sides and divided the community. The actual effect of your actions (despite good intentions) on this particular community was that it created a division that previously didn't exist, which is /u/heatherhaks point. I mean, when a mod has to come out and call people highschoolers because they disagree with something, doesn't it seem like it's doing more damage than good? Either way, good luck with this and your other projects (Sailor looks pretty interesting).","<div class=""md""><p>No offense to your project or anything, but this whole discussion made people pick sides and divided the community. The actual effect of your actions (despite good intentions) on this particular community was that it created a division that previously didn&#39;t exist, which is <a href=""/u/heatherhaks"">/u/heatherhaks</a> point. I mean, when a mod has to come out and call people highschoolers because they disagree with something, doesn&#39;t it seem like it&#39;s doing more damage than good? Either way, good luck with this and your other projects (Sailor looks pretty interesting).</p>
</div>",1418566707.0,,1418566906.0,cmuiqk4,False,t3_2owoue,t1_cmtmqw7,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmuiqk4/,1,False,0,False,2owoue,lua,t5_2qjla
126,edalcol,"I totally get what you mean. Except that I was not creating a division. I made an announcement, came back 2 days later to find out my project was being bashed. And it was the bashing that made the division, not the group. Like someone said before, if it was a group for Lua teenagers or french or over 60 nobody would question it. 

(thanks, Sailor is indeed really cool :3 )","<div class=""md""><p>I totally get what you mean. Except that I was not creating a division. I made an announcement, came back 2 days later to find out my project was being bashed. And it was the bashing that made the division, not the group. Like someone said before, if it was a group for Lua teenagers or french or over 60 nobody would question it. </p>

<p>(thanks, Sailor is indeed really cool :3 )</p>
</div>",1418738377.0,,False,cmwixdh,False,t3_2owoue,t1_cmuiqk4,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmwixdh/,1,False,3,False,2owoue,lua,t5_2qjla
127,adnzzzzZ,">Except that I was not creating a division.

I know, that's why I said ""despite good intentions"".

>Like someone said before, if it was a group for Lua teenagers or french or over 60 nobody would question it. 

I don't think the comparison stands. Lua for children/old people/people from [city]/people who speak [language] are all understandable. They all have the goal of creating resources that are better suited for those types of people. For children you'd create tutorials aimed at children and those differ than normal tutorials. For people who speak [language] you'd create tutorials in that language, plus you enable this technology for people who only speak that language and not English. For people who are from some city you create a group of people who can meet locally and in real life, which some people find valuable.

But Lua for women, black people, asians, disabled people; whatever else on the line where there's only a physical external differences doesn't seem to make sense to me. If someone create LuaBlacks for black people only there'd probably be a similar backlash. Similarly for LuaDisableds, like, why? There's no particular challenge in using Lua that prevents disabled people from using it just like everyone else.

There's another problem where, if people create LuaBlacks, the community would justifiably ask: ""why does this need to exist? Is this community somehow racist?"" and then if you proceeded to ask this question and then the moderator of said community called you a high schooler and an immature person, it'd certainly create some previously non-existant animosity towards black people.","<div class=""md""><blockquote>
<p>Except that I was not creating a division.</p>
</blockquote>

<p>I know, that&#39;s why I said &quot;despite good intentions&quot;.</p>

<blockquote>
<p>Like someone said before, if it was a group for Lua teenagers or french or over 60 nobody would question it. </p>
</blockquote>

<p>I don&#39;t think the comparison stands. Lua for children/old people/people from [city]/people who speak [language] are all understandable. They all have the goal of creating resources that are better suited for those types of people. For children you&#39;d create tutorials aimed at children and those differ than normal tutorials. For people who speak [language] you&#39;d create tutorials in that language, plus you enable this technology for people who only speak that language and not English. For people who are from some city you create a group of people who can meet locally and in real life, which some people find valuable.</p>

<p>But Lua for women, black people, asians, disabled people; whatever else on the line where there&#39;s only a physical external differences doesn&#39;t seem to make sense to me. If someone create LuaBlacks for black people only there&#39;d probably be a similar backlash. Similarly for LuaDisableds, like, why? There&#39;s no particular challenge in using Lua that prevents disabled people from using it just like everyone else.</p>

<p>There&#39;s another problem where, if people create LuaBlacks, the community would justifiably ask: &quot;why does this need to exist? Is this community somehow racist?&quot; and then if you proceeded to ask this question and then the moderator of said community called you a high schooler and an immature person, it&#39;d certainly create some previously non-existant animosity towards black people.</p>
</div>",1418742762.0,,False,cmwkoz3,False,t3_2owoue,t1_cmwixdh,/r/lua/comments/2owoue/lua_ladies_is_going_in_the_sidebar_and_youre_all/cmwkoz3/,0,False,2,False,2owoue,lua,t5_2qjla
128,whoopdedo,"Python 3

Perl 6

PHP ~~6~~ 7

Breakage is inevitable. The Lua developers have recognized this fact and refuse to be a slave to compatibility.

Now, whether his critiques about the design of 5.3 are worth something can be debated. The point of dual-mode numbers is to allow 64-bit values to properly round-trip through Lua because lots of software uses them these days. Making it work involved compromises that in the long run may be regrettable. If so, they can just fix it in 5.4. 

It doesn't matter that Lua is different than LuaJIT because Lua isn't even the same as a different major release of Lua. 5.3 breaks 5.2. And 5.2 broke 5.1, and 5.0 broke 4.0, and so on. (5.1 didn't break a lot from 5.0 but only by accident.)
","<div class=""md""><p>Python 3</p>

<p>Perl 6</p>

<p>PHP <del>6</del> 7</p>

<p>Breakage is inevitable. The Lua developers have recognized this fact and refuse to be a slave to compatibility.</p>

<p>Now, whether his critiques about the design of 5.3 are worth something can be debated. The point of dual-mode numbers is to allow 64-bit values to properly round-trip through Lua because lots of software uses them these days. Making it work involved compromises that in the long run may be regrettable. If so, they can just fix it in 5.4. </p>

<p>It doesn&#39;t matter that Lua is different than LuaJIT because Lua isn&#39;t even the same as a different major release of Lua. 5.3 breaks 5.2. And 5.2 broke 5.1, and 5.0 broke 4.0, and so on. (5.1 didn&#39;t break a lot from 5.0 but only by accident.)</p>
</div>",1426989156.0,,False,cpmk804,False,t3_2zutj8,t3_2zutj8,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmk804/,3,False,16,False,2zutj8,lua,t5_2qjla
129,EricTboneJackson,"> Lua is forked - and that is very bad for the language.

It's bad if you want Lua to be a general purpose, stand-alone language with a vibrant module community. I would love this, because I love the language, but that ship never even left the port, primarily because it's *not what the language was designed for*.

Lua designed to be a language-as-library, for use as an embedded scripting language. In that sense, Lua is *always* forked. World of Warcraft Lua is not Gary's Mod Lua. That's why things like the number type were added, because people embedding the language wanted it, and compatibility issues created for Lua as a stand-alone language are always secondary to that.

That's also why it doesn't really matter if LuaJIT supports Lua 5.3. LuaJIT has always been a fork, and it was forked at a good point in Lua's history, so it's a fine language.","<div class=""md""><blockquote>
<p>Lua is forked - and that is very bad for the language.</p>
</blockquote>

<p>It&#39;s bad if you want Lua to be a general purpose, stand-alone language with a vibrant module community. I would love this, because I love the language, but that ship never even left the port, primarily because it&#39;s <em>not what the language was designed for</em>.</p>

<p>Lua designed to be a language-as-library, for use as an embedded scripting language. In that sense, Lua is <em>always</em> forked. World of Warcraft Lua is not Gary&#39;s Mod Lua. That&#39;s why things like the number type were added, because people embedding the language wanted it, and compatibility issues created for Lua as a stand-alone language are always secondary to that.</p>

<p>That&#39;s also why it doesn&#39;t really matter if LuaJIT supports Lua 5.3. LuaJIT has always been a fork, and it was forked at a good point in Lua&#39;s history, so it&#39;s a fine language.</p>
</div>",1427054687.0,,1427060222.0,cpn7xm3,False,t3_2zutj8,t3_2zutj8,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpn7xm3/,0,False,15,False,2zutj8,lua,t5_2qjla
130,makoven,"Reminds me of the story about the C / C ++. Companies refuse to recognize the version above C89 because of breaking compatibility with c ++.
Lua is a great language. I am glad that it is developing. Burn in hell, retrogrades. You hampering progress for their own benefit","<div class=""md""><p>Reminds me of the story about the C / C ++. Companies refuse to recognize the version above C89 because of breaking compatibility with c ++.
Lua is a great language. I am glad that it is developing. Burn in hell, retrogrades. You hampering progress for their own benefit</p>
</div>",1426991574.0,,False,cpmlcbg,False,t3_2zutj8,t3_2zutj8,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmlcbg/,0,False,4,False,2zutj8,lua,t5_2qjla
131,hisham_hm,Is this news? He disliked Lua 5.2 too.,"<div class=""md""><p>Is this news? He disliked Lua 5.2 too.</p>
</div>",1426984241.0,,False,cpmhv2j,False,t3_2zutj8,t3_2zutj8,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmhv2j/,1,False,5,False,2zutj8,lua,t5_2qjla
132,lua_x_ia,">Lua is forked - and that is very bad for the language.

It was already forked -- LuaJIT never supported _ENV, so it's been separate since 5.2. I think this is fine, because LuaJIT is really a better basis for an ecosystem than Lua itself, and imo third-party libraries depending on standalone Lua should probably target LuaJIT.","<div class=""md""><blockquote>
<p>Lua is forked - and that is very bad for the language.</p>
</blockquote>

<p>It was already forked -- LuaJIT never supported _ENV, so it&#39;s been separate since 5.2. I think this is fine, because LuaJIT is really a better basis for an ecosystem than Lua itself, and imo third-party libraries depending on standalone Lua should probably target LuaJIT.</p>
</div>",1427075987.0,,False,cpnjgj6,False,t3_2zutj8,t3_2zutj8,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpnjgj6/,0,False,3,False,2zutj8,lua,t5_2qjla
133,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1426983332.0,,False,cpmhftj,False,t3_2zutj8,t3_2zutj8,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmhftj/,2,False,6,False,2zutj8,lua,t5_2qjla
134,fabzter,"Then ""simply"" someone needs to fork luajit","<div class=""md""><p>Then &quot;simply&quot; someone needs to fork luajit</p>
</div>",1426987481.0,,False,cpmjeer,False,t3_2zutj8,t3_2zutj8,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmjeer/,1,False,4,False,2zutj8,lua,t5_2qjla
135,hisham_hm,"> Making it work involved compromises that in the long run may be regrettable

I didn't see many compromises in that. Some code paths became a lot faster, and some became slightly slower (but in a percent difference that, if you care about speed that much, you're probably using LuaJIT instead anyway).

> 5.1 didn't break a lot from 5.0 but only by accident

5.1 broke `for k,v in t` which was one of the most common idioms of the language. (It was deprecated in 5.0 but still supported.)
","<div class=""md""><blockquote>
<p>Making it work involved compromises that in the long run may be regrettable</p>
</blockquote>

<p>I didn&#39;t see many compromises in that. Some code paths became a lot faster, and some became slightly slower (but in a percent difference that, if you care about speed that much, you&#39;re probably using LuaJIT instead anyway).</p>

<blockquote>
<p>5.1 didn&#39;t break a lot from 5.0 but only by accident</p>
</blockquote>

<p>5.1 broke <code>for k,v in t</code> which was one of the most common idioms of the language. (It was deprecated in 5.0 but still supported.)</p>
</div>",1427089457.0,,False,cpnpho9,False,t3_2zutj8,t1_cpmk804,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpnpho9/,1,False,3,False,2zutj8,lua,t5_2qjla
136,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1427161468.0,,False,cpon6wk,False,t3_2zutj8,t1_cpmk804,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpon6wk/,1,False,2,False,2zutj8,lua,t5_2qjla
137,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1427024068.0,,False,cpmum7w,False,t3_2zutj8,t1_cpmk804,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmum7w/,1,False,-6,False,2zutj8,lua,t5_2qjla
138,DeadManSoon,"I think his words here clearly suggest that LuaJIT will never support Lua 5.3, not even ""mostly"" (i.e. much worse than the 5.2 situation).

","<div class=""md""><p>I think his words here clearly suggest that LuaJIT will never support Lua 5.3, not even &quot;mostly&quot; (i.e. much worse than the 5.2 situation).</p>
</div>",1426984978.0,,False,cpmi7mh,True,t3_2zutj8,t1_cpmhv2j,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmi7mh/,1,False,7,False,2zutj8,lua,t5_2qjla
139,DeadManSoon,"Lua 5.3 libraries cannot be used with LuaJIT for starters. The old 5.1/5.2 split was not that bad because those versions were almost identical. Porting from one to the other was usually trivial and LuaJIT fully supports 5.1 and mostly supports 5.2. 

It was perfectly possible (and common) to develop Lua libraries ""compatible with 5.1, 5.2, and LuaJIT"". 

In the other direction, people who want / need the speed of LuaJIT will stay away from 5.3 and all further development of the Lua language, thus reducing the (already relatively small) size of the Lua community.

Last but not least I think your view of ""environments Lua is intended to be deployed in"" is a little limited. It is true that Lua is primarily used as a minimalist scripting language embedded into a host application. However, that is not its only use. 

Look at all the Lua libraries which exist. That ecosystem will suffer horribly now that people will have to decide which fork they want to support. The community will be divided into a 5.1/5.2/LuaJIT camp and a Lua 5.3 camp.

I hate having to make that choice. 
","<div class=""md""><p>Lua 5.3 libraries cannot be used with LuaJIT for starters. The old 5.1/5.2 split was not that bad because those versions were almost identical. Porting from one to the other was usually trivial and LuaJIT fully supports 5.1 and mostly supports 5.2. </p>

<p>It was perfectly possible (and common) to develop Lua libraries &quot;compatible with 5.1, 5.2, and LuaJIT&quot;. </p>

<p>In the other direction, people who want / need the speed of LuaJIT will stay away from 5.3 and all further development of the Lua language, thus reducing the (already relatively small) size of the Lua community.</p>

<p>Last but not least I think your view of &quot;environments Lua is intended to be deployed in&quot; is a little limited. It is true that Lua is primarily used as a minimalist scripting language embedded into a host application. However, that is not its only use. </p>

<p>Look at all the Lua libraries which exist. That ecosystem will suffer horribly now that people will have to decide which fork they want to support. The community will be divided into a 5.1/5.2/LuaJIT camp and a Lua 5.3 camp.</p>

<p>I hate having to make that choice. </p>
</div>",1426984600.0,,False,cpmi15y,True,t3_2zutj8,t1_cpmhftj,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmi15y/,1,False,5,False,2zutj8,lua,t5_2qjla
140,jringstad,"I think this is clearly a bad thing. It's not about upgrading, but about having the option of having another drop-in runtime that is faster (both when in interpreter-mode on iOS and when using with JIT.) Should it happen that luajit becomes infeasible to use because it's not keeping up with lua anymore (and hence using certain important libraries becomes difficult/impossible), then I think lua will drop from the radar of many people.

And even if you ignore the luajit speed benefit, having two viable (competing) implementations is better than one, for a myriad of reasons.","<div class=""md""><p>I think this is clearly a bad thing. It&#39;s not about upgrading, but about having the option of having another drop-in runtime that is faster (both when in interpreter-mode on iOS and when using with JIT.) Should it happen that luajit becomes infeasible to use because it&#39;s not keeping up with lua anymore (and hence using certain important libraries becomes difficult/impossible), then I think lua will drop from the radar of many people.</p>

<p>And even if you ignore the luajit speed benefit, having two viable (competing) implementations is better than one, for a myriad of reasons.</p>
</div>",1427049885.0,,False,cpn5e5s,False,t3_2zutj8,t1_cpmhftj,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpn5e5s/,0,False,2,False,2zutj8,lua,t5_2qjla
141,jringstad,"Well, the way I read it he only said he wouldn't do the porting himself, not that he wouldn't accept patches for 5.3 compat. So doesn't sound to me like a luajit fork is necessary, only that someone else does the work.","<div class=""md""><p>Well, the way I read it he only said he wouldn&#39;t do the porting himself, not that he wouldn&#39;t accept patches for 5.3 compat. So doesn&#39;t sound to me like a luajit fork is necessary, only that someone else does the work.</p>
</div>",1427049573.0,,False,cpn587r,False,t3_2zutj8,t1_cpmjeer,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpn587r/,1,False,3,False,2zutj8,lua,t5_2qjla
142,whoopdedo,"The compromise I was talking about is in complexity of the language. Previously Lua was ""a number is just a number"". Now it's ""a number is a number except when it's an integer"". And the rules of when you can expect to have or use a float versus an integer aren't always obvious. 5.3 tries to do the most sensible thing, but if you're not careful you may end up with one when you want the other and will get very different results because of it. So we're made to sprinkle `math.tointeger` or `*1.0` throughout the code like so many C casts.

> It was deprecated in 5.0 but still supported.

Then 5.0 broke it. Deprecation is the sole nod to backward compatibility where the developer says ""Why are you still doing this? Stop doing this!""","<div class=""md""><p>The compromise I was talking about is in complexity of the language. Previously Lua was &quot;a number is just a number&quot;. Now it&#39;s &quot;a number is a number except when it&#39;s an integer&quot;. And the rules of when you can expect to have or use a float versus an integer aren&#39;t always obvious. 5.3 tries to do the most sensible thing, but if you&#39;re not careful you may end up with one when you want the other and will get very different results because of it. So we&#39;re made to sprinkle <code>math.tointeger</code> or <code>*1.0</code> throughout the code like so many C casts.</p>

<blockquote>
<p>It was deprecated in 5.0 but still supported.</p>
</blockquote>

<p>Then 5.0 broke it. Deprecation is the sole nod to backward compatibility where the developer says &quot;Why are you still doing this? Stop doing this!&quot;</p>
</div>",1427091040.0,,False,cpnpyo5,False,t3_2zutj8,t1_cpnpho9,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpnpyo5/,0,False,3,False,2zutj8,lua,t5_2qjla
143,whoopdedo,"Numbers are symbolic and can mean whatever symbolism you place on them. It doesn't matter that it's called ""5.3"" or ""6.0"" or ""Lua SysX v.10 Vista SE"". Changing the dot number *is* a major release. I think it was once described that the first part is the version of the language, second is the implementation, and third is release.

Semantic versioning is not some axiomatic law that must be followed else your project be irrevocably broken. Lua versions are what they are. To insist it's wrong is pure dogma.","<div class=""md""><p>Numbers are symbolic and can mean whatever symbolism you place on them. It doesn&#39;t matter that it&#39;s called &quot;5.3&quot; or &quot;6.0&quot; or &quot;Lua SysX v.10 Vista SE&quot;. Changing the dot number <em>is</em> a major release. I think it was once described that the first part is the version of the language, second is the implementation, and third is release.</p>

<p>Semantic versioning is not some axiomatic law that must be followed else your project be irrevocably broken. Lua versions are what they are. To insist it&#39;s wrong is pure dogma.</p>
</div>",1427164497.0,,False,cpooz1p,False,t3_2zutj8,t1_cpon6wk,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpooz1p/,1,False,2,False,2zutj8,lua,t5_2qjla
144,whoopdedo,"You completely missed the point of my reply. Breaking changes are not bad. They are *inevitable.* Lua avoids the problems that Python faced by allowing things to break on every major release.
","<div class=""md""><p>You completely missed the point of my reply. Breaking changes are not bad. They are <em>inevitable.</em> Lua avoids the problems that Python faced by allowing things to break on every major release.</p>
</div>",1427037077.0,,False,cpmyr10,False,t3_2zutj8,t1_cpmum7w,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmyr10/,0,False,2,False,2zutj8,lua,t5_2qjla
145,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1426987141.0,,False,cpmj8il,False,t3_2zutj8,t1_cpmi7mh,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmj8il/,2,False,5,False,2zutj8,lua,t5_2qjla
146,armornick,"> Lua 5.3 libraries cannot be used with LuaJIT for starters. The old 5.1/5.2 split was not that bad because those versions were almost identical. Porting from one to the other was usually trivial and LuaJIT fully supports 5.1 and mostly supports 5.2.

That's because of compatibility libraries. The reason 5.3 stuff can't be used with LuaJit is because all the deprecated stuff was dropped. LuaJit is still 5.1-only with a few backports.

But as the previous poster said, it doesn't really matter because you can still use the old versions. I still mostly use 5.1 (vanilla).

> Look at all the Lua libraries which exist. That ecosystem will suffer horribly now that people will have to decide which fork they want to support. The community will be divided into a 5.1/5.2/LuaJIT camp and a Lua 5.3 camp.

Or you can support both.","<div class=""md""><blockquote>
<p>Lua 5.3 libraries cannot be used with LuaJIT for starters. The old 5.1/5.2 split was not that bad because those versions were almost identical. Porting from one to the other was usually trivial and LuaJIT fully supports 5.1 and mostly supports 5.2.</p>
</blockquote>

<p>That&#39;s because of compatibility libraries. The reason 5.3 stuff can&#39;t be used with LuaJit is because all the deprecated stuff was dropped. LuaJit is still 5.1-only with a few backports.</p>

<p>But as the previous poster said, it doesn&#39;t really matter because you can still use the old versions. I still mostly use 5.1 (vanilla).</p>

<blockquote>
<p>Look at all the Lua libraries which exist. That ecosystem will suffer horribly now that people will have to decide which fork they want to support. The community will be divided into a 5.1/5.2/LuaJIT camp and a Lua 5.3 camp.</p>
</blockquote>

<p>Or you can support both.</p>
</div>",1427048706.0,,False,cpn4rbu,False,t3_2zutj8,t1_cpmi15y,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpn4rbu/,0,False,1,False,2zutj8,lua,t5_2qjla
147,hisham_hm,patches to support _ENV in LuaJIT have existed for a long time.,"<div class=""md""><p>patches to support _ENV in LuaJIT have existed for a long time.</p>
</div>",1427089650.0,,False,cpnpjru,False,t3_2zutj8,t1_cpn587r,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpnpjru/,0,False,3,False,2zutj8,lua,t5_2qjla
148,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1427242513.0,,False,cppp6pd,False,t3_2zutj8,t1_cpooz1p,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cppp6pd/,2,False,2,False,2zutj8,lua,t5_2qjla
149,TheNosferatu,"Well, if I want to start a new project, I want to use the latest version of the language I'm working with, if something like LuaJiT isn't willing to support the latest version, I'm not willing to use it because I want to prevent version- and vendor-locking where I can","<div class=""md""><p>Well, if I want to start a new project, I want to use the latest version of the language I&#39;m working with, if something like LuaJiT isn&#39;t willing to support the latest version, I&#39;m not willing to use it because I want to prevent version- and vendor-locking where I can</p>
</div>",1427039966.0,,False,cpn05ha,False,t3_2zutj8,t1_cpmj8il,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpn05ha/,0,False,2,False,2zutj8,lua,t5_2qjla
150,ZorbaTHut,"Well, he also has potential clients who don't want to be hamstrung with an obsolete version of Lua. I'm at the point where I'd probably avoid LuaJIT just because it's clear it will never advance, and I used to use it for *everything*.","<div class=""md""><p>Well, he also has potential clients who don&#39;t want to be hamstrung with an obsolete version of Lua. I&#39;m at the point where I&#39;d probably avoid LuaJIT just because it&#39;s clear it will never advance, and I used to use it for <em>everything</em>.</p>
</div>",1427017317.0,,False,cpmtcjf,False,t3_2zutj8,t1_cpmj8il,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmtcjf/,1,False,1,False,2zutj8,lua,t5_2qjla
151,whoopdedo,"Just multiply Lua version numbers in your head by 10 and you get the politically correct form of semantic versioning.
","<div class=""md""><p>Just multiply Lua version numbers in your head by 10 and you get the politically correct form of semantic versioning.</p>
</div>",1427243775.0,,False,cpppxkj,False,t3_2zutj8,t1_cppp6pd,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpppxkj/,1,False,5,False,2zutj8,lua,t5_2qjla
152,hisham_hm,"> irresponsible with backwards compatibility.

Lua is one of the most responsible projects in terms of backwards compatibility that I've ever seen. It's you who are failing to see that they simply use a different numbering system from what _you_ want. 

Lua X.Y.0 releases may make any changes whatsoever. Lua x.y.Z updates _never_ make any backward incompatible changes, either in terms of API _or_ ABI. Not many projects out there give ABI guarantees on point releases.

And Lua has been doing this for years and years, way before semver was invented, and Lua keeps its consistency in its numbering.

I know Tom Preston-Werner's semver has become really popular in some circles, but believe me, it is no absolute truth or a consensus in the computing world. People has been versioning code long before that and will continue to do so long after it is replaced by the next fashion.

","<div class=""md""><blockquote>
<p>irresponsible with backwards compatibility.</p>
</blockquote>

<p>Lua is one of the most responsible projects in terms of backwards compatibility that I&#39;ve ever seen. It&#39;s you who are failing to see that they simply use a different numbering system from what <em>you</em> want. </p>

<p>Lua X.Y.0 releases may make any changes whatsoever. Lua x.y.Z updates <em>never</em> make any backward incompatible changes, either in terms of API <em>or</em> ABI. Not many projects out there give ABI guarantees on point releases.</p>

<p>And Lua has been doing this for years and years, way before semver was invented, and Lua keeps its consistency in its numbering.</p>

<p>I know Tom Preston-Werner&#39;s semver has become really popular in some circles, but believe me, it is no absolute truth or a consensus in the computing world. People has been versioning code long before that and will continue to do so long after it is replaced by the next fashion.</p>
</div>",1427352751.0,,False,cpr5heg,False,t3_2zutj8,t1_cppp6pd,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpr5heg/,1,False,4,False,2zutj8,lua,t5_2qjla
153,davethecomposer,"Lua is the only language I know how to program in and I've run into situations where I *really* need LuaJIT's speed but like you I've come to the conclusion that LuaJIT is not going to upgrade so either I go with the version that continues to add new features at the cost of speed or the one that is not going to grow but is super fast. I've chosen the former, I now use Lua 5.3 and will switch to 5.4 when it comes out. Partly I feel like there's more community support for the 5.3 branch which is something I really need (as I suck at programming).","<div class=""md""><p>Lua is the only language I know how to program in and I&#39;ve run into situations where I <em>really</em> need LuaJIT&#39;s speed but like you I&#39;ve come to the conclusion that LuaJIT is not going to upgrade so either I go with the version that continues to add new features at the cost of speed or the one that is not going to grow but is super fast. I&#39;ve chosen the former, I now use Lua 5.3 and will switch to 5.4 when it comes out. Partly I feel like there&#39;s more community support for the 5.3 branch which is something I really need (as I suck at programming).</p>
</div>",1427033941.0,,False,cpmxde2,False,t3_2zutj8,t1_cpmtcjf,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpmxde2/,1,False,2,False,2zutj8,lua,t5_2qjla
154,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1427295448.0,,False,cpq94hf,False,t3_2zutj8,t1_cpppxkj,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpq94hf/,1,False,0,False,2zutj8,lua,t5_2qjla
155,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1427390524.0,,False,cprk9y7,False,t3_2zutj8,t1_cpr5heg,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cprk9y7/,1,False,1,False,2zutj8,lua,t5_2qjla
156,dividuum,"I understand what you're saying, but I want to add a different point of view: While luajit didn't adopt the changes in Lua 5.3 (and partly 5.2) it doesn't mean that it's inferior. It just has a different focus: performance. You probably won't get the same awesome [ffi library](http://luajit.org/ext_ffi.html) in Lua 5.3. There is https://github.com/jmckaskill/luaffi, but it seems like it didn't get updated for 5.3 and will never be as fast as the luajit version since it's less integrated into the runtime. Plain Lua doesn't offer the [low overhead profiler](http://repo.or.cz/w/luajit-2.0.git/blob_plain/8cc89332ffa3b65a43f6e730df18e282bb66ea41:/doc/ext_profiler.html) that luajit (v2.1 branch) provides. Also going with 5.1 provides you with almost 10 years of solved problems ready to be googled. Right now I feel like Lua 5.3 doesn't offer enough to convince me to update.","<div class=""md""><p>I understand what you&#39;re saying, but I want to add a different point of view: While luajit didn&#39;t adopt the changes in Lua 5.3 (and partly 5.2) it doesn&#39;t mean that it&#39;s inferior. It just has a different focus: performance. You probably won&#39;t get the same awesome <a href=""http://luajit.org/ext_ffi.html"">ffi library</a> in Lua 5.3. There is <a href=""https://github.com/jmckaskill/luaffi"">https://github.com/jmckaskill/luaffi</a>, but it seems like it didn&#39;t get updated for 5.3 and will never be as fast as the luajit version since it&#39;s less integrated into the runtime. Plain Lua doesn&#39;t offer the <a href=""http://repo.or.cz/w/luajit-2.0.git/blob_plain/8cc89332ffa3b65a43f6e730df18e282bb66ea41:/doc/ext_profiler.html"">low overhead profiler</a> that luajit (v2.1 branch) provides. Also going with 5.1 provides you with almost 10 years of solved problems ready to be googled. Right now I feel like Lua 5.3 doesn&#39;t offer enough to convince me to update.</p>
</div>",1427116427.0,,False,cpnw0zq,False,t3_2zutj8,t1_cpmxde2,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpnw0zq/,1,False,3,False,2zutj8,lua,t5_2qjla
157,whoopdedo,"***A Lua Point Release IS a Major Release***

Get that into your head and stop foolishly insisting that these arbitrary numbers have a universal meaning and you'll see you have no reason to complain.","<div class=""md""><p><strong><em>A Lua Point Release IS a Major Release</em></strong></p>

<p>Get that into your head and stop foolishly insisting that these arbitrary numbers have a universal meaning and you&#39;ll see you have no reason to complain.</p>
</div>",1427308406.0,,False,cpqhl6q,False,t3_2zutj8,t1_cpq94hf,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpqhl6q/,0,False,2,False,2zutj8,lua,t5_2qjla
158,hisham_hm,"In Lua, X.Y.0 releases are the breaking releases, but they take _years_ to be released.

Any X.Y.Z release with Z > 0 is _completely_ compatible with X.Y.0. _Only_ bugfixes are made. No changes, no additions. There's not even a way to get the .Z point release number programatically from inside Lua, because it _doesn't matter_. That's how far they go in backward compatibility guarantees. Lua 5.2 is Lua 5.2, no matter if it is 5.2.0, 5.2.1 or 5.2.5.

Plus, a while after they release X.Y.0, they release another releasing X.(Y-1).Z, fixing _all known bugs_. Yes, there are currently _no known bugs_ for Lua 5.2.

http://www.lua.org/bugs.html

The distinction between bumping X and Y is somewhat arbitrary, but take a look at the timeline:

http://www.lua.org/versions.html

Roughly, in a new X.Y+1 release, there is compatibility breakage but you have an upgrade path. The list of incompatible changes is usually short, and I maintain [code](http://luarocks.org) that runs in 5.1, 5.2 and 5.3 with no issues, and I've seen people who maintain code even for 5.0 (I don't do it because no one in my user base seems to be using that anymore.)

I wasn't around in the 4.0->5.0 switch, but I hear it was a major change that required significant rewriting. Same with 3.2->4.0 (I know of companies who remained in 3.2 long after 5.0 was released because it ""just works"".) Having said that, Lua 6.0 is nowhere in sight. As you can see in the above timeline, Lua releases have been stabilizing over the years. The release date timelines for point releases are also interesting.

http://www.lua.org/ftp/
","<div class=""md""><p>In Lua, X.Y.0 releases are the breaking releases, but they take <em>years</em> to be released.</p>

<p>Any X.Y.Z release with Z &gt; 0 is <em>completely</em> compatible with X.Y.0. <em>Only</em> bugfixes are made. No changes, no additions. There&#39;s not even a way to get the .Z point release number programatically from inside Lua, because it <em>doesn&#39;t matter</em>. That&#39;s how far they go in backward compatibility guarantees. Lua 5.2 is Lua 5.2, no matter if it is 5.2.0, 5.2.1 or 5.2.5.</p>

<p>Plus, a while after they release X.Y.0, they release another releasing X.(Y-1).Z, fixing <em>all known bugs</em>. Yes, there are currently <em>no known bugs</em> for Lua 5.2.</p>

<p><a href=""http://www.lua.org/bugs.html"">http://www.lua.org/bugs.html</a></p>

<p>The distinction between bumping X and Y is somewhat arbitrary, but take a look at the timeline:</p>

<p><a href=""http://www.lua.org/versions.html"">http://www.lua.org/versions.html</a></p>

<p>Roughly, in a new X.Y+1 release, there is compatibility breakage but you have an upgrade path. The list of incompatible changes is usually short, and I maintain <a href=""http://luarocks.org"">code</a> that runs in 5.1, 5.2 and 5.3 with no issues, and I&#39;ve seen people who maintain code even for 5.0 (I don&#39;t do it because no one in my user base seems to be using that anymore.)</p>

<p>I wasn&#39;t around in the 4.0-&gt;5.0 switch, but I hear it was a major change that required significant rewriting. Same with 3.2-&gt;4.0 (I know of companies who remained in 3.2 long after 5.0 was released because it &quot;just works&quot;.) Having said that, Lua 6.0 is nowhere in sight. As you can see in the above timeline, Lua releases have been stabilizing over the years. The release date timelines for point releases are also interesting.</p>

<p><a href=""http://www.lua.org/ftp/"">http://www.lua.org/ftp/</a></p>
</div>",1427427370.0,,False,cps6p3w,False,t3_2zutj8,t1_cprk9y7,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cps6p3w/,0,False,4,False,2zutj8,lua,t5_2qjla
159,davethecomposer,"> it doesn't mean that it's inferior.

I never meant to imply that LuaJIT is inferior! All I'm doing is looking to the future. Will LuaJIT always remain at this point while the other Lua branch continues to grow? My one, lone, massive project is built on Lua and I want it to be in use and continually modified for a very very long time so the question becomes which version of Lua will be relevant in five years or ten years with new features?","<div class=""md""><blockquote>
<p>it doesn&#39;t mean that it&#39;s inferior.</p>
</blockquote>

<p>I never meant to imply that LuaJIT is inferior! All I&#39;m doing is looking to the future. Will LuaJIT always remain at this point while the other Lua branch continues to grow? My one, lone, massive project is built on Lua and I want it to be in use and continually modified for a very very long time so the question becomes which version of Lua will be relevant in five years or ten years with new features?</p>
</div>",1427120335.0,,False,cpnxptu,False,t3_2zutj8,t1_cpnw0zq,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/cpnxptu/,1,False,1,False,2zutj8,lua,t5_2qjla
160,CIB,"I think if you genuinely care about the situation in, say, 10 years from now, lua isn't your best option in any case. Its strength is that it ""just works"", and that strength kind of gets undone if you don't stick to one lua version for the duration of your project.","<div class=""md""><p>I think if you genuinely care about the situation in, say, 10 years from now, lua isn&#39;t your best option in any case. Its strength is that it &quot;just works&quot;, and that strength kind of gets undone if you don&#39;t stick to one lua version for the duration of your project.</p>
</div>",1434882824.0,,False,csdp7ll,False,t3_2zutj8,t1_cpnxptu,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/csdp7ll/,1,False,1,False,2zutj8,lua,t5_2qjla
161,davethecomposer,"Interesting. In the last few weeks I've become convinced that I should switch to LuaJIT regardless of whether it ever adds significant new features. As long as it just works (and continues to do so) and is so blazingly fast I should switch. And it's not like I'm taking full advantage of whatever Lua 5.3 (or any other language) offers anyway -- I'm just a hack programmer (in the worst sense).

So after I merge my current dev branch (which involves *massive* fundamental changes) back into the master branch, I'm going to start a LuaJIT branch which will eventually become the new master. ","<div class=""md""><p>Interesting. In the last few weeks I&#39;ve become convinced that I should switch to LuaJIT regardless of whether it ever adds significant new features. As long as it just works (and continues to do so) and is so blazingly fast I should switch. And it&#39;s not like I&#39;m taking full advantage of whatever Lua 5.3 (or any other language) offers anyway -- I&#39;m just a hack programmer (in the worst sense).</p>

<p>So after I merge my current dev branch (which involves <em>massive</em> fundamental changes) back into the master branch, I&#39;m going to start a LuaJIT branch which will eventually become the new master. </p>
</div>",1434899442.0,,False,csdu19d,False,t3_2zutj8,t1_csdp7ll,/r/lua/comments/2zutj8/mike_pall_luajit_dislikes_lua_53/csdu19d/,0,False,2,False,2zutj8,lua,t5_2qjla
162,edalcol,"I'm a professionally trained musician (as in I went to music university) but I'm not an actual musician and I don't do anything with music for years now. But I'm a programmer and a regular at the Lua community and I have to say WOW THIS SEEMS AMAZING! I can't wait to fiddle with it during christmas break. Maybe I'll do some music again now :) 

I didn't look at the code yet, but I would love to contribute as well! May I ask what made you pick gitlab over github? ","<div class=""md""><p>I&#39;m a professionally trained musician (as in I went to music university) but I&#39;m not an actual musician and I don&#39;t do anything with music for years now. But I&#39;m a programmer and a regular at the Lua community and I have to say WOW THIS SEEMS AMAZING! I can&#39;t wait to fiddle with it during christmas break. Maybe I&#39;ll do some music again now :) </p>

<p>I didn&#39;t look at the code yet, but I would love to contribute as well! May I ask what made you pick gitlab over github? </p>
</div>",1482485779.0,,False,dbjgnoc,False,t3_5jsnl8,t3_5jsnl8,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbjgnoc/,1,False,3,False,5jsnl8,lua,t5_2qjla
163,picklebobdogflog,This is amazing! You should definitely post this on news.ycombinator.com. This sub doesn't get a lot of traffic unfortunately. ,"<div class=""md""><p>This is amazing! You should definitely post this on news.ycombinator.com. This sub doesn&#39;t get a lot of traffic unfortunately. </p>
</div>",1482518571.0,,False,dbjya7m,False,t3_5jsnl8,t3_5jsnl8,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbjya7m/,1,False,3,False,5jsnl8,lua,t5_2qjla
164,,"Dude, wow! You should put this on HN. This is beyond amazing. Congratulations on the milestone! 



Edit: And your Lua is VERY clean too. I’d love to contribute to this but I am not much of a music person. Any way non-music-theory people can help out?","<div class=""md""><p>Dude, wow! You should put this on HN. This is beyond amazing. Congratulations on the milestone! </p>

<p>Edit: And your Lua is VERY clean too. I’d love to contribute to this but I am not much of a music person. Any way non-music-theory people can help out?</p>
</div>",1482470684.0,,False,dbjajp6,False,t3_5jsnl8,t3_5jsnl8,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbjajp6/,1,False,2,False,5jsnl8,lua,t5_2qjla
165,Kinrany,It would be nice to have some examples on the site.,"<div class=""md""><p>It would be nice to have some examples on the site.</p>
</div>",1482508907.0,,False,dbjqsjz,False,t3_5jsnl8,t3_5jsnl8,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbjqsjz/,1,False,1,False,5jsnl8,lua,t5_2qjla
166,davethecomposer,"Thank you very much! If you do play with it please let me know how the installation went, how the tutorial was, etc. As best as I can tell I'm the only person to actually run it so far. Some people have looked at it but if anyone has actually tried to run it (and succeeded or not) is not something they've let me know. Also, once you get used to it it's a lot of fun! Changing parameters slightly to see how they affect the music and printing out several kinds of sheet music can be addicting.

And I'm definitely looking for any help I can get. I made the beginnings of a partial list of *big* issues that I don't get in another comment. The list of smaller issues is even bigger. I'm really just flailing about and feel pretty fortunate that so much of it works so well. For instance, I spend way too much time on the typography of the documentation because, I don't know, I'm a composer sooooo ... art?

As for gitlab over github that's an interesting question. When I first began the code was a huge horrible mess and pretty much every week it changed radically. So when I first put it up I wanted to keep the repository private as there would have been absolutely no use in letting someone else see it. At that time gitlab allowed for free private repositories with 5 contributors while github did not have free private repositories at all. So I went with gitlab. I understand now that github allows free private repositories but gitlab seems to work just fine so I don't see a need to change.","<div class=""md""><p>Thank you very much! If you do play with it please let me know how the installation went, how the tutorial was, etc. As best as I can tell I&#39;m the only person to actually run it so far. Some people have looked at it but if anyone has actually tried to run it (and succeeded or not) is not something they&#39;ve let me know. Also, once you get used to it it&#39;s a lot of fun! Changing parameters slightly to see how they affect the music and printing out several kinds of sheet music can be addicting.</p>

<p>And I&#39;m definitely looking for any help I can get. I made the beginnings of a partial list of <em>big</em> issues that I don&#39;t get in another comment. The list of smaller issues is even bigger. I&#39;m really just flailing about and feel pretty fortunate that so much of it works so well. For instance, I spend way too much time on the typography of the documentation because, I don&#39;t know, I&#39;m a composer sooooo ... art?</p>

<p>As for gitlab over github that&#39;s an interesting question. When I first began the code was a huge horrible mess and pretty much every week it changed radically. So when I first put it up I wanted to keep the repository private as there would have been absolutely no use in letting someone else see it. At that time gitlab allowed for free private repositories with 5 contributors while github did not have free private repositories at all. So I went with gitlab. I understand now that github allows free private repositories but gitlab seems to work just fine so I don&#39;t see a need to change.</p>
</div>",1482528007.0,,False,dbk4y2v,True,t3_5jsnl8,t1_dbjgnoc,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbk4y2v/,1,False,2,False,5jsnl8,lua,t5_2qjla
167,davethecomposer,"Wow, that seems like a pretty hardcore site for my pretty modest efforts. One I get the online front-end up and running then I plan on really ~~spamming~~ promoting it everywhere.

Also, thanks! I'm pretty proud of what I've accomplished so far and look forward every day to improving it.","<div class=""md""><p>Wow, that seems like a pretty hardcore site for my pretty modest efforts. One I get the online front-end up and running then I plan on really <del>spamming</del> promoting it everywhere.</p>

<p>Also, thanks! I&#39;m pretty proud of what I&#39;ve accomplished so far and look forward every day to improving it.</p>
</div>",1482526603.0,,False,dbk40mz,True,t3_5jsnl8,t1_dbjya7m,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbk40mz/,0,False,1,False,5jsnl8,lua,t5_2qjla
168,davethecomposer,"> Dude, wow! You should put this on HN

Is that Hacker News? That place seem much more hardcore than what I've done so far. But since another person mentioned it I'll look into it.

> This is beyond amazing. Congratulations on the milestone! 

Thank you! Having everything (up to this point) basically working and usable documentation and an updated website felt really good.  And the next version (six months?) will be even cooler!

> And your Lua is VERY clean too.

Thank you! It's gotten soooooo much better the more I learn. I'm working really hard to develop a consistent and readable style so that others will have an easy time of using it and contributing. With much of the style I'm just winging it for now kind of feeling around to see what works best. At one point, for example, I took a hard line against anything even resembling a global variable but now I put some pseudo-global variables in a global table and I think I'm ok with it (and it makes using the code much easier).

> I’d love to contribute to this but I am not much of a music person. Any way non-music-theory people can help out?

Heck yeah! As my name implies my training is in music and most definitely not programming. There's like literally a million things that real programmers could do to help out. Millions: I have no idea how to create an online front-end, I want to expand the command line interpreter, I'm sure my binary search algorithm is a horrible shitty mess of code that only works because I completely ignore it now (if it knew I was looking it would blow up my laptop), I'm concerned that my hash algorithms aren't up to snuff (though I trust the pcg-random code), you don't want to know how I ""merged"" the dev branch into the master (hint: I didn't actually merge it), and just so on and on and on and on! Literally every single aspect of project management is beyond me.","<div class=""md""><blockquote>
<p>Dude, wow! You should put this on HN</p>
</blockquote>

<p>Is that Hacker News? That place seem much more hardcore than what I&#39;ve done so far. But since another person mentioned it I&#39;ll look into it.</p>

<blockquote>
<p>This is beyond amazing. Congratulations on the milestone! </p>
</blockquote>

<p>Thank you! Having everything (up to this point) basically working and usable documentation and an updated website felt really good.  And the next version (six months?) will be even cooler!</p>

<blockquote>
<p>And your Lua is VERY clean too.</p>
</blockquote>

<p>Thank you! It&#39;s gotten soooooo much better the more I learn. I&#39;m working really hard to develop a consistent and readable style so that others will have an easy time of using it and contributing. With much of the style I&#39;m just winging it for now kind of feeling around to see what works best. At one point, for example, I took a hard line against anything even resembling a global variable but now I put some pseudo-global variables in a global table and I think I&#39;m ok with it (and it makes using the code much easier).</p>

<blockquote>
<p>I’d love to contribute to this but I am not much of a music person. Any way non-music-theory people can help out?</p>
</blockquote>

<p>Heck yeah! As my name implies my training is in music and most definitely not programming. There&#39;s like literally a million things that real programmers could do to help out. Millions: I have no idea how to create an online front-end, I want to expand the command line interpreter, I&#39;m sure my binary search algorithm is a horrible shitty mess of code that only works because I completely ignore it now (if it knew I was looking it would blow up my laptop), I&#39;m concerned that my hash algorithms aren&#39;t up to snuff (though I trust the pcg-random code), you don&#39;t want to know how I &quot;merged&quot; the dev branch into the master (hint: I didn&#39;t actually merge it), and just so on and on and on and on! Literally every single aspect of project management is beyond me.</p>
</div>",1482527274.0,,1482528212.0,dbk4gnb,True,t3_5jsnl8,t1_dbjajp6,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbk4gnb/,1,False,2,False,5jsnl8,lua,t5_2qjla
169,davethecomposer,"I'm sorry, which site do you mean by ""the site""? My website does have examples of everything the software does but you do have to drill down to the individual pages for the different features. I think my website is designed more for aesthetics than usability. Probably hurts more than it helps but I dig the simplicity and minimalism. At the end of the day I'm an artist and not a programmer or web-dev-SEO-promoter-type.","<div class=""md""><p>I&#39;m sorry, which site do you mean by &quot;the site&quot;? My website does have examples of everything the software does but you do have to drill down to the individual pages for the different features. I think my website is designed more for aesthetics than usability. Probably hurts more than it helps but I dig the simplicity and minimalism. At the end of the day I&#39;m an artist and not a programmer or web-dev-SEO-promoter-type.</p>
</div>",1482528350.0,,False,dbk56cx,True,t3_5jsnl8,t1_dbjqsjz,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbk56cx/,1,False,1,False,5jsnl8,lua,t5_2qjla
170,Live_Think_Diagnosis,Github? Free private repositories? I have not seen that. Can you tell me where you read that? ,"<div class=""md""><p>Github? Free private repositories? I have not seen that. Can you tell me where you read that? </p>
</div>",1482994714.0,,False,dbqxs45,False,t3_5jsnl8,t1_dbk4y2v,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbqxs45/,1,False,1,False,5jsnl8,lua,t5_2qjla
171,,"Yes it is, and I think it'd make for a great Show HN. 




There's nothing wrong with a global table. Don't be too afraid to use globals, they're there for a reason. 




I'll take a look tomorrow, but honestly, I *suck* at anything science related in computer science. I can just sit down and program a lot. If you have any use for that please let me know.","<div class=""md""><p>Yes it is, and I think it&#39;d make for a great Show HN. </p>

<p>There&#39;s nothing wrong with a global table. Don&#39;t be too afraid to use globals, they&#39;re there for a reason. </p>

<p>I&#39;ll take a look tomorrow, but honestly, I <em>suck</em> at anything science related in computer science. I can just sit down and program a lot. If you have any use for that please let me know.</p>
</div>",1482560887.0,,False,dbko4pi,False,t3_5jsnl8,t1_dbk4gnb,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbko4pi/,0,False,1,False,5jsnl8,lua,t5_2qjla
172,Kinrany,"Yeah, I guess I just failed to find them, usually they're on the front page or one click away.","<div class=""md""><p>Yeah, I guess I just failed to find them, usually they&#39;re on the front page or one click away.</p>
</div>",1482529039.0,,False,dbk5mj3,False,t3_5jsnl8,t1_dbk56cx,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbk5mj3/,0,False,1,False,5jsnl8,lua,t5_2qjla
173,davethecomposer,I don't see anything about it now. It was just something I thought I remembered seeing on Reddit. I was already using gitlab and wasn't going to change so I didn't bother investigating it then. Looking at their website now maybe if you're a student?,"<div class=""md""><p>I don&#39;t see anything about it now. It was just something I thought I remembered seeing on Reddit. I was already using gitlab and wasn&#39;t going to change so I didn&#39;t bother investigating it then. Looking at their website now maybe if you&#39;re a student?</p>
</div>",1483029105.0,,False,dbrckye,True,t3_5jsnl8,t1_dbqxs45,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbrckye/,1,False,1,False,5jsnl8,lua,t5_2qjla
174,Live_Think_Diagnosis,Maybe. I'll look into that. Thank you. ,"<div class=""md""><p>Maybe. I&#39;ll look into that. Thank you. </p>
</div>",1483030588.0,,False,dbrdqkr,False,t3_5jsnl8,t1_dbrckye,/r/lua/comments/5jsnl8/a_small_announcement_and_a_big_thanks/dbrdqkr/,0,False,1,False,5jsnl8,lua,t5_2qjla
175,gcross,Honest question here as someone interested in programming languages in general:  could someone explain to me what the benefit is of cramming arrays and hashtables into the same data structure?  After reading this article it looks at first glance like a design decision that has resulted in a mess of strange behavior.,"<div class=""md""><p>Honest question here as someone interested in programming languages in general:  could someone explain to me what the benefit is of cramming arrays and hashtables into the same data structure?  After reading this article it looks at first glance like a design decision that has resulted in a mess of strange behavior.</p>
</div>",1589316505.0,,False,fqf05vg,False,t3_gigp9k,t3_gigp9k,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqf05vg/,5,False,1,False,gigp9k,lua,t5_2qjla
176,SP4C3_SH0T,And couldn't ya just fill nill white 0 and solve this,"<div class=""md""><p>And couldn&#39;t ya just fill nill white 0 and solve this</p>
</div>",1642316712.0,,False,hsvh88v,False,t3_gigp9k,t3_gigp9k,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/hsvh88v/,0,False,1,False,gigp9k,lua,t5_2qjla
177,8bitslime,"Lua was designed to be dead simple. I think it was just easier than having 2 separate data structures when they behave very similarly on the user side of things: put a key in, get a value out. Doesn't matter if the key is a number or a string.","<div class=""md""><p>Lua was designed to be dead simple. I think it was just easier than having 2 separate data structures when they behave very similarly on the user side of things: put a key in, get a value out. Doesn&#39;t matter if the key is a number or a string.</p>
</div>",1589317501.0,,False,fqf28ri,False,t3_gigp9k,t1_fqf05vg,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqf28ri/,1,False,11,False,gigp9k,lua,t5_2qjla
178,,"It's only confusing because you're bringing your preconceived notions to Lua. Forget what you already know; a table is simply a table. Whether it behaves as a key/value data structure or a sequential list is not an inherent property of the table; it has to do with how you interact with it it.

It's a particle *and* a wave!","<div class=""md""><p>It&#39;s only confusing because you&#39;re bringing your preconceived notions to Lua. Forget what you already know; a table is simply a table. Whether it behaves as a key/value data structure or a sequential list is not an inherent property of the table; it has to do with how you interact with it it.</p>

<p>It&#39;s a particle <em>and</em> a wave!</p>
</div>",1589327743.0,,False,fqfmtag,False,t3_gigp9k,t1_fqf05vg,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqfmtag/,2,False,7,False,gigp9k,lua,t5_2qjla
179,KerbalSpark,"Well, as for me, I prefer to do all operations with tables efficiently and remember to pay attention to the behavior of tables.","<div class=""md""><p>Well, as for me, I prefer to do all operations with tables efficiently and remember to pay attention to the behavior of tables.</p>
</div>",1589385702.0,,False,fqhw9yj,True,t3_gigp9k,t1_fqf05vg,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqhw9yj/,1,False,1,False,gigp9k,lua,t5_2qjla
180,bonfire_processor,"The best source to understand the design principles behind Lua is this article:

[https://dl.acm.org/doi/pdf/10.1145/3186277?download=true](https://dl.acm.org/doi/pdf/10.1145/3186277?download=true)

(„A look at the design of Lua“)

The key element of Lua is, that there are very few mechanisms in the language which are easy to learn and understand. Everything else is achieved by reusing the basics. Syntactic sugar gives some comfort on top of the basics, e.g. using the colon to implement an implicit „self“ parameter.

The array part of a table is just an optimization for a common case. The problem comes from exposing this implementation detail with the # operator and giving the array part an order exposed by ipairs. This exposes the implementation detail to a semantic property.

Nevertheless once you are aware this is not a real problem: Just don't mix the hash and array semantics, use a given table as either one of them, never both. The same as you would do in a language with separate types for both.

When I compare Lua with Python, I like the minimalist approach of Lua: Because everything is build with the few simple mechanisms, everything is straight forward. With Python in contrast you need to remember syntax and semantic of lists, tuples, objects, dictionaries, modules, etc. And Python did a great effort in making them all very different....","<div class=""md""><p>The best source to understand the design principles behind Lua is this article:</p>

<p><a href=""https://dl.acm.org/doi/pdf/10.1145/3186277?download=true"">https://dl.acm.org/doi/pdf/10.1145/3186277?download=true</a></p>

<p>(„A look at the design of Lua“)</p>

<p>The key element of Lua is, that there are very few mechanisms in the language which are easy to learn and understand. Everything else is achieved by reusing the basics. Syntactic sugar gives some comfort on top of the basics, e.g. using the colon to implement an implicit „self“ parameter.</p>

<p>The array part of a table is just an optimization for a common case. The problem comes from exposing this implementation detail with the # operator and giving the array part an order exposed by ipairs. This exposes the implementation detail to a semantic property.</p>

<p>Nevertheless once you are aware this is not a real problem: Just don&#39;t mix the hash and array semantics, use a given table as either one of them, never both. The same as you would do in a language with separate types for both.</p>

<p>When I compare Lua with Python, I like the minimalist approach of Lua: Because everything is build with the few simple mechanisms, everything is straight forward. With Python in contrast you need to remember syntax and semantic of lists, tuples, objects, dictionaries, modules, etc. And Python did a great effort in making them all very different....</p>
</div>",1589582196.0,,False,fqrdfyx,False,t3_gigp9k,t1_fqf05vg,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqrdfyx/,1,False,1,False,gigp9k,lua,t5_2qjla
181,pm_me_ur_happy_traiI,JavaScript essentially does the same thing with arrays being a special kind of object,"<div class=""md""><p>JavaScript essentially does the same thing with arrays being a special kind of object</p>
</div>",1589628717.0,,False,fqt3h0j,False,t3_gigp9k,t1_fqf05vg,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqt3h0j/,0,False,1,False,gigp9k,lua,t5_2qjla
182,ewmailing,"Great explanation. Just to add as another thought example, consider a sparse array. If you have holes all over your array, is it an array or hash table? In Lua, since they are the same thing, sparse arrays just work.

As a similar thought exercise, consider arrays with negative indices. Again, these just work in Lua.","<div class=""md""><p>Great explanation. Just to add as another thought example, consider a sparse array. If you have holes all over your array, is it an array or hash table? In Lua, since they are the same thing, sparse arrays just work.</p>

<p>As a similar thought exercise, consider arrays with negative indices. Again, these just work in Lua.</p>
</div>",1589320877.0,,False,fqf9atl,False,t3_gigp9k,t1_fqf28ri,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqf9atl/,2,False,4,False,gigp9k,lua,t5_2qjla
183,ws-ilazki,"My problem with table behaviour isn't that it's confusing, it's that it's convenient right up until the point that it's not, and you won't necessarily realise you've hit that point until a bug appears.  Tables have some fun edge cases with things like nils that are good at biting you in the ass like that and could be avoided with separate structures for arrays and hash maps.  

They're convenient a lot of the time, though, and good for quickly learning the language, so what would be nice is if, in addition to the current table behaviour, we had some way of defining arrays and maps (or declaring a table as array- or map-only) and avoiding the weirdness when needed.","<div class=""md""><p>My problem with table behaviour isn&#39;t that it&#39;s confusing, it&#39;s that it&#39;s convenient right up until the point that it&#39;s not, and you won&#39;t necessarily realise you&#39;ve hit that point until a bug appears.  Tables have some fun edge cases with things like nils that are good at biting you in the ass like that and could be avoided with separate structures for arrays and hash maps.  </p>

<p>They&#39;re convenient a lot of the time, though, and good for quickly learning the language, so what would be nice is if, in addition to the current table behaviour, we had some way of defining arrays and maps (or declaring a table as array- or map-only) and avoiding the weirdness when needed.</p>
</div>",1589335313.0,,False,fqg0czz,False,t3_gigp9k,t1_fqfmtag,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqg0czz/,3,False,2,False,gigp9k,lua,t5_2qjla
184,SP4C3_SH0T,Beauty thing is of ya don't like the way it fumctions ya can probably write a module that would give you data structures more.to your likeing,"<div class=""md""><p>Beauty thing is of ya don&#39;t like the way it fumctions ya can probably write a module that would give you data structures more.to your likeing</p>
</div>",1642316560.0,,False,hsvh098,False,t3_gigp9k,t1_fqfmtag,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/hsvh098/,0,False,1,False,gigp9k,lua,t5_2qjla
185,gcross,"Wouldn't it hypothetically be easier, then, to be able to specify explicitly when you intend a table to act like an array rather than hoping that you understand how it works well enough that you can make it act like an array by happy accident?  The blog post made it seem like it is easy to get behavior that is not immediately what one might first expect.

Also, it is worth noting that your comment seems to be atypical here because what I think am gleaming from the other responses is that one shouldn't think of tables as potentially being arrays at all but simply as a data structure where you put keys in and get values out where maybe some optimizations happen under the hood that you shouldn't think too hard about.","<div class=""md""><p>Wouldn&#39;t it hypothetically be easier, then, to be able to specify explicitly when you intend a table to act like an array rather than hoping that you understand how it works well enough that you can make it act like an array by happy accident?  The blog post made it seem like it is easy to get behavior that is not immediately what one might first expect.</p>

<p>Also, it is worth noting that your comment seems to be atypical here because what I think am gleaming from the other responses is that one shouldn&#39;t think of tables as potentially being arrays at all but simply as a data structure where you put keys in and get values out where maybe some optimizations happen under the hood that you shouldn&#39;t think too hard about.</p>
</div>",1589392045.0,,False,fqi7ye5,False,t3_gigp9k,t1_fqhw9yj,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqi7ye5/,1,False,2,False,gigp9k,lua,t5_2qjla
186,gcross,"Thank you for the link.  I can appreciate the value of minimizing the number of concepts in a language, but in the case of tables Lua doesn't seem to actually be doing this because even though there is a single notation for mapping keys to values you still have to understand array semantics and hash semantics as separate concepts and that you should never mix them whether intentionally or by accident or else you might get bitten by an unexpected behavior, which adds its own complexity to the language--unless you are claiming that in practice caring about whether one's table is effectively an array or not is an incredibly advanced topic and/or comes up incredibly rarely?

Having said that, upon reflection I can see some hypothetical benefit to having a data structure that lets you simultaneously efficiently store an array of data *as well as* a hash table so that it can have fields and methods and the like, even if it makes the language more complicated.","<div class=""md""><p>Thank you for the link.  I can appreciate the value of minimizing the number of concepts in a language, but in the case of tables Lua doesn&#39;t seem to actually be doing this because even though there is a single notation for mapping keys to values you still have to understand array semantics and hash semantics as separate concepts and that you should never mix them whether intentionally or by accident or else you might get bitten by an unexpected behavior, which adds its own complexity to the language--unless you are claiming that in practice caring about whether one&#39;s table is effectively an array or not is an incredibly advanced topic and/or comes up incredibly rarely?</p>

<p>Having said that, upon reflection I can see some hypothetical benefit to having a data structure that lets you simultaneously efficiently store an array of data <em>as well as</em> a hash table so that it can have fields and methods and the like, even if it makes the language more complicated.</p>
</div>",1589598635.0,,False,fqs4z19,False,t3_gigp9k,t1_fqrdfyx,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqs4z19/,1,False,1,False,gigp9k,lua,t5_2qjla
187,soundslogical,Those examples do have the caveat that the length (#) operator won't work as expected any more.,"<div class=""md""><p>Those examples do have the caveat that the length (#) operator won&#39;t work as expected any more.</p>
</div>",1589363973.0,,False,fqh0vth,False,t3_gigp9k,t1_fqf9atl,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqh0vth/,0,False,3,False,gigp9k,lua,t5_2qjla
188,ewmailing,One more thought exercise. Consider arrays with decimal indices.,"<div class=""md""><p>One more thought exercise. Consider arrays with decimal indices.</p>
</div>",1589321133.0,,False,fqf9tkc,False,t3_gigp9k,t1_fqf9atl,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqf9tkc/,0,False,1,False,gigp9k,lua,t5_2qjla
189,dddbbb,"I'm curious what specific issues you've run into? 

In my few years of daily experience with lua, the only kinds of issues I can think of is where you used `ipairs` but should have used `pairs`. (Where it helps to think of `ipairs` as an optimization instead of blindly using it by default.) Maybe your problem was with other code messing with your data?","<div class=""md""><p>I&#39;m curious what specific issues you&#39;ve run into? </p>

<p>In my few years of daily experience with lua, the only kinds of issues I can think of is where you used <code>ipairs</code> but should have used <code>pairs</code>. (Where it helps to think of <code>ipairs</code> as an optimization instead of blindly using it by default.) Maybe your problem was with other code messing with your data?</p>
</div>",1589520442.0,,False,fqoonhp,False,t3_gigp9k,t1_fqg0czz,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqoonhp/,1,False,1,False,gigp9k,lua,t5_2qjla
190,rpiirp,"That would undermine Lua's primary intent of being simple and **small**. Depending on the implementation it might even slow things down due to runtime checks. 

Lua's one and only composite data structure is a defining characteristic. If it wasn't for stuff like that, why should Lua even exist? It's not like there aren't any other embeddable scripting languages around. 
If you want Lua to behave just like any other language, maybe you should just use any other language,","<div class=""md""><p>That would undermine Lua&#39;s primary intent of being simple and <strong>small</strong>. Depending on the implementation it might even slow things down due to runtime checks. </p>

<p>Lua&#39;s one and only composite data structure is a defining characteristic. If it wasn&#39;t for stuff like that, why should Lua even exist? It&#39;s not like there aren&#39;t any other embeddable scripting languages around. 
If you want Lua to behave just like any other language, maybe you should just use any other language,</p>
</div>",1589368971.0,,False,fqh63d0,False,t3_gigp9k,t1_fqg0czz,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqh63d0/,2,False,1,False,gigp9k,lua,t5_2qjla
191,SP4C3_SH0T,Penlight in fact has this,"<div class=""md""><p>Penlight in fact has this</p>
</div>",1642316618.0,,False,hsvh3dx,False,t3_gigp9k,t1_fqg0czz,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/hsvh3dx/,0,False,1,False,gigp9k,lua,t5_2qjla
192,KerbalSpark,"Well, I'm a practitioner, not a theorist. In my cases, everything works just well. If something is not working as it should, I rewrite the algorithm.","<div class=""md""><p>Well, I&#39;m a practitioner, not a theorist. In my cases, everything works just well. If something is not working as it should, I rewrite the algorithm.</p>
</div>",1589394462.0,,False,fqida47,True,t3_gigp9k,t1_fqi7ye5,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqida47/,1,False,3,False,gigp9k,lua,t5_2qjla
193,bonfire_processor,"> you still have to understand array semantics and hash semantics as separate concepts  

You need to understand this anyway. Even if Lua would have separate types for it, nobody would stop you from using a table like an array, because a table key can be any value except nil. 

The positive side of Lua tables is that they are memory and performance efficient automatically in most cases. E.g. using a sparse array. Compare this with Javascript, where a\[10000000\]=0 will fill up your memory. To avoid this, you need to use an object as associative array, with the side effect that in reality you  do a\[""10000000""\]=0. So without some knowledge how a language is implemented you will get bitten sooner or later...

I program a lot in Lua but also in 5-10 different languages.  Most of them have more  pitfalls than Lua. For the array/table problem there are a two simple rules to avoid trouble:

1. If you want an array just use a table like an array, only integer indexes, starting with 1 and no gaps (When I have gaps I fill them with ""false"")
2. If a table does not follow rule 1 it is not an array, so don't use #, ipairs and sort

In practice this is not a limitation, because in a language with explicit arrays you would have the same constraints.","<div class=""md""><blockquote>
<p>you still have to understand array semantics and hash semantics as separate concepts  </p>
</blockquote>

<p>You need to understand this anyway. Even if Lua would have separate types for it, nobody would stop you from using a table like an array, because a table key can be any value except nil. </p>

<p>The positive side of Lua tables is that they are memory and performance efficient automatically in most cases. E.g. using a sparse array. Compare this with Javascript, where a[10000000]=0 will fill up your memory. To avoid this, you need to use an object as associative array, with the side effect that in reality you  do a[&quot;10000000&quot;]=0. So without some knowledge how a language is implemented you will get bitten sooner or later...</p>

<p>I program a lot in Lua but also in 5-10 different languages.  Most of them have more  pitfalls than Lua. For the array/table problem there are a two simple rules to avoid trouble:</p>

<ol>
<li>If you want an array just use a table like an array, only integer indexes, starting with 1 and no gaps (When I have gaps I fill them with &quot;false&quot;)</li>
<li>If a table does not follow rule 1 it is not an array, so don&#39;t use #, ipairs and sort</li>
</ol>

<p>In practice this is not a limitation, because in a language with explicit arrays you would have the same constraints.</p>
</div>",1589640613.0,,False,fqtk788,False,t3_gigp9k,t1_fqs4z19,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqtk788/,1,False,2,False,gigp9k,lua,t5_2qjla
194,ws-ilazki,"> I'm curious what specific issues you've run into? 

Losing part of an ""array"" because `nil` is a valid return value for expressions but is not a valid value for storage in a table.  Having the length operator (`#`) suddenly not be correct on an ""array"" because its size has changed unexpectedly.

> In my few years of daily experience with lua, the only kinds of issues I can think of is where you used ipairs but should have used pairs

Except `pairs` does not have guarantees on access order, and I believe `ipairs` does.  If you're dealing exclusively with indexed data, `ipairs` *is* what you should be using.  Then if an expression returns nil at any point things get weird and you lose part of your array.

Then you think ""that's okay, I can use `#t` since it still has the correct length when `ipairs` doesn't"" and it works fine for a while.  Until the last element of your array happens to be nil, and now your `#t` is one or more elements shorter than it should be, depending on if there are any other nils in it.

    a = {10,20,30,40,50}
    a[3] = nil
    return #a   -- 5.  Good so far.
    return a[3] -- nil.  Makes sense.
    a[5] = nil
    return #a   -- 2.  wat.

> Maybe your problem was with other code messing with your data?

No, the problem is sometimes you want indexed data where the order matters, and once you do, the ""nil means delete"" behaviour appears and becomes a problem.  I've run into this a few times when manipulating indexed arrays and it annoys me *every time* because it just doesn't make sense for `nil` to do double duty as ""this is nothing"" and ""this means delete something"".

Lua kind of hides this from you in general use, since accessing a nonexistent key returns `nil` instead of complaining the key is missing, so the behaviour is typically either convenient or ignorable up...until the point it's not, and then it bites you in the ass because sometimes things return `nil` and you have to fight with the language over it when they do.

Maybe the problem is me, but I expect consistency with this.  If the language has `nil` as a type (it does) and can have expressions return `nil` (they can), then I expect it to be able to be stored in a value just like any other valid type (it can't).  And I *especially* don't expect a valid type in the language to have magic ""delete stuff"" properties that can be triggered unexpectedly and, as a fun bonus, completely change the shape of a data structure.  So, I consider this behaviour counter-intuitive and borderline broken; a mistake waiting to happen.","<div class=""md""><blockquote>
<p>I&#39;m curious what specific issues you&#39;ve run into? </p>
</blockquote>

<p>Losing part of an &quot;array&quot; because <code>nil</code> is a valid return value for expressions but is not a valid value for storage in a table.  Having the length operator (<code>#</code>) suddenly not be correct on an &quot;array&quot; because its size has changed unexpectedly.</p>

<blockquote>
<p>In my few years of daily experience with lua, the only kinds of issues I can think of is where you used ipairs but should have used pairs</p>
</blockquote>

<p>Except <code>pairs</code> does not have guarantees on access order, and I believe <code>ipairs</code> does.  If you&#39;re dealing exclusively with indexed data, <code>ipairs</code> <em>is</em> what you should be using.  Then if an expression returns nil at any point things get weird and you lose part of your array.</p>

<p>Then you think &quot;that&#39;s okay, I can use <code>#t</code> since it still has the correct length when <code>ipairs</code> doesn&#39;t&quot; and it works fine for a while.  Until the last element of your array happens to be nil, and now your <code>#t</code> is one or more elements shorter than it should be, depending on if there are any other nils in it.</p>

<pre><code>a = {10,20,30,40,50}
a[3] = nil
return #a   -- 5.  Good so far.
return a[3] -- nil.  Makes sense.
a[5] = nil
return #a   -- 2.  wat.
</code></pre>

<blockquote>
<p>Maybe your problem was with other code messing with your data?</p>
</blockquote>

<p>No, the problem is sometimes you want indexed data where the order matters, and once you do, the &quot;nil means delete&quot; behaviour appears and becomes a problem.  I&#39;ve run into this a few times when manipulating indexed arrays and it annoys me <em>every time</em> because it just doesn&#39;t make sense for <code>nil</code> to do double duty as &quot;this is nothing&quot; and &quot;this means delete something&quot;.</p>

<p>Lua kind of hides this from you in general use, since accessing a nonexistent key returns <code>nil</code> instead of complaining the key is missing, so the behaviour is typically either convenient or ignorable up...until the point it&#39;s not, and then it bites you in the ass because sometimes things return <code>nil</code> and you have to fight with the language over it when they do.</p>

<p>Maybe the problem is me, but I expect consistency with this.  If the language has <code>nil</code> as a type (it does) and can have expressions return <code>nil</code> (they can), then I expect it to be able to be stored in a value just like any other valid type (it can&#39;t).  And I <em>especially</em> don&#39;t expect a valid type in the language to have magic &quot;delete stuff&quot; properties that can be triggered unexpectedly and, as a fun bonus, completely change the shape of a data structure.  So, I consider this behaviour counter-intuitive and borderline broken; a mistake waiting to happen.</p>
</div>",1589536780.0,,False,fqp6ij9,False,t3_gigp9k,t1_fqoonhp,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqp6ij9/,2,False,2,False,gigp9k,lua,t5_2qjla
195,ws-ilazki,"> Lua's one and only composite data structure is a defining characteristic. If it wasn't for stuff like that, why should Lua even exist?

It has a feel that's a lot like if someone dressed up Scheme with an ALGOL-inspired syntax (minus macros, unfortunately), thanks to a mix of its size and simplicity and its use of first-class functions.  It shares a lot of strengths of using JS, but without nearly as much ""wtf were they thinkig"" insanity.  It's *mostly* a nice language that's easy to learn but still very flexible.  

There's a lot to like about Lua, but the way it handles the dual nature of tables is not one of them.  It's an error-prone foot-gun waiting to be fired.  Every language has its warts, and that and global-by-default are Lua's big ones.  

It's not even necessarily the shared array/map usage that's the problem, it's the weird way it handles gaps in indexed arrays and nils in tables in general.  It might be possible to solve those problems without separating tables into two structures, though it would probably make it more difficult.  

> If you want Lua to behave just like any other language, maybe you should just use any other language

So nobody's allowed to have criticism and ""if you don't like it you should leave""?  That's shitty.  It's also a useless, irrelevant ""suggestion"" considering that Lua's primarily used as an embedded language.  The end-users of various software don't get to choose what language to work with, they just have to use Lua, like it or not, because someone else chose it.","<div class=""md""><blockquote>
<p>Lua&#39;s one and only composite data structure is a defining characteristic. If it wasn&#39;t for stuff like that, why should Lua even exist?</p>
</blockquote>

<p>It has a feel that&#39;s a lot like if someone dressed up Scheme with an ALGOL-inspired syntax (minus macros, unfortunately), thanks to a mix of its size and simplicity and its use of first-class functions.  It shares a lot of strengths of using JS, but without nearly as much &quot;wtf were they thinkig&quot; insanity.  It&#39;s <em>mostly</em> a nice language that&#39;s easy to learn but still very flexible.  </p>

<p>There&#39;s a lot to like about Lua, but the way it handles the dual nature of tables is not one of them.  It&#39;s an error-prone foot-gun waiting to be fired.  Every language has its warts, and that and global-by-default are Lua&#39;s big ones.  </p>

<p>It&#39;s not even necessarily the shared array/map usage that&#39;s the problem, it&#39;s the weird way it handles gaps in indexed arrays and nils in tables in general.  It might be possible to solve those problems without separating tables into two structures, though it would probably make it more difficult.  </p>

<blockquote>
<p>If you want Lua to behave just like any other language, maybe you should just use any other language</p>
</blockquote>

<p>So nobody&#39;s allowed to have criticism and &quot;if you don&#39;t like it you should leave&quot;?  That&#39;s shitty.  It&#39;s also a useless, irrelevant &quot;suggestion&quot; considering that Lua&#39;s primarily used as an embedded language.  The end-users of various software don&#39;t get to choose what language to work with, they just have to use Lua, like it or not, because someone else chose it.</p>
</div>",1589371283.0,,False,fqh8tm9,False,t3_gigp9k,t1_fqh63d0,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqh8tm9/,2,False,2,False,gigp9k,lua,t5_2qjla
196,gcross,So if it weren't for its tables and their current behavior Lua would not have anything that significantly set it apart from other languages?,"<div class=""md""><p>So if it weren&#39;t for its tables and their current behavior Lua would not have anything that significantly set it apart from other languages?</p>
</div>",1589394446.0,,False,fqid8lq,False,t3_gigp9k,t1_fqh63d0,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqid8lq/,1,False,1,False,gigp9k,lua,t5_2qjla
197,gcross,"That's fair.  It is often the case that a beautiful abstraction does exactly the right thing until it doesn't, in which case you need to start caring about the details to get it to do what you want.","<div class=""md""><p>That&#39;s fair.  It is often the case that a beautiful abstraction does exactly the right thing until it doesn&#39;t, in which case you need to start caring about the details to get it to do what you want.</p>
</div>",1589395030.0,,False,fqiervr,False,t3_gigp9k,t1_fqida47,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqiervr/,0,False,2,False,gigp9k,lua,t5_2qjla
198,KerbalSpark,"In one of my games, I use a trick with storing data in \[0\] and negative indexes. This trick makes it easier to write data processing in my cases in this game.","<div class=""md""><p>In one of my games, I use a trick with storing data in [0] and negative indexes. This trick makes it easier to write data processing in my cases in this game.</p>
</div>",1589724468.0,,False,fqx2smg,True,t3_gigp9k,t1_fqtk788,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqx2smg/,0,False,1,False,gigp9k,lua,t5_2qjla
199,dddbbb,"> ""that's okay, I can use #t since it still has the correct length when ipairs doesn't""

I think the truth of that has also varied between versions of lua. For some, # never accounted for values after the first nil. Perhaps I'm too accustomed to the fast fail behaviour so I've never expected #t to work with nil.

Regardless, have you tried to implement your own ipairs and length functions that make arrays work how you want? Or is your problem more the principle that Lua doubles the meaning of `nil`?

I think Lua's strength is the flexibility of how you can use it's tables, but that also comes with danger in that you could do weird things with those tables (implementing classes and instances with tables and then iterating over those tables and modifying them). So to me, it would make sense to write a module for ""true arrays"" that handles them how I want, and then ensuring I use that module to manipulate them.

I have problems with Lua (lack of +=, no disabling function with early return, no comprehensions, conversion of strings to numbers, ...) and consider them downsides of the language, but I understand that they come out of upsides of the language (simpler, smaller implementation) so they don't really bother me or I find workarounds to make them not bother me.

> Then if an expression returns nil at any point things get weird and you lose part of your array.

Maybe it's Stockholm syndrome, but this reads to me like if in C++ you had an array of pointers and ""Then if an expression returns null at any point you dereference an invalid pointer and your application crashes."" I can't help but react, ""don't do that then."" Sanitize your input before you put it in your array, right? (Like how in C++ you wouldn't allow null or check for null before dereferencing.) You could probably write a metatable to make nil insert a special marker indicating NONE and add a remove method.

It seems like there are lots of solutions to this problem. Maybe if you aren't in control of all of your code (or other people you work with don't agree with you), so you can't implement those solutions.

I'm also coming at it from nostalgia for Lua. I haven't used Lua in a year and I'm using C# now. There are problems in that language that are -- everything is designed for garbage collection so all the library stuff produces garbage at an alarming rate. To control your garbage you need to pool so heavily that you're avoiding much of the convenience of the language and reimplement so much functionality (no linq - for loops everywhere, no new -- pool everything, etc). I guess with Lua there's not much of a stdlib, so there's not much to reimplement :D It also feels like it would be easier to solve these problems in Lua because you define how complex types work and how iteration works and how everything works.

Anyway, you're not wrong that no nil in arrays is unfortunate. It's just a lesser sin in the grand scheme of things -- in my view at least.","<div class=""md""><blockquote>
<p>&quot;that&#39;s okay, I can use #t since it still has the correct length when ipairs doesn&#39;t&quot;</p>
</blockquote>

<p>I think the truth of that has also varied between versions of lua. For some, # never accounted for values after the first nil. Perhaps I&#39;m too accustomed to the fast fail behaviour so I&#39;ve never expected #t to work with nil.</p>

<p>Regardless, have you tried to implement your own ipairs and length functions that make arrays work how you want? Or is your problem more the principle that Lua doubles the meaning of <code>nil</code>?</p>

<p>I think Lua&#39;s strength is the flexibility of how you can use it&#39;s tables, but that also comes with danger in that you could do weird things with those tables (implementing classes and instances with tables and then iterating over those tables and modifying them). So to me, it would make sense to write a module for &quot;true arrays&quot; that handles them how I want, and then ensuring I use that module to manipulate them.</p>

<p>I have problems with Lua (lack of +=, no disabling function with early return, no comprehensions, conversion of strings to numbers, ...) and consider them downsides of the language, but I understand that they come out of upsides of the language (simpler, smaller implementation) so they don&#39;t really bother me or I find workarounds to make them not bother me.</p>

<blockquote>
<p>Then if an expression returns nil at any point things get weird and you lose part of your array.</p>
</blockquote>

<p>Maybe it&#39;s Stockholm syndrome, but this reads to me like if in C++ you had an array of pointers and &quot;Then if an expression returns null at any point you dereference an invalid pointer and your application crashes.&quot; I can&#39;t help but react, &quot;don&#39;t do that then.&quot; Sanitize your input before you put it in your array, right? (Like how in C++ you wouldn&#39;t allow null or check for null before dereferencing.) You could probably write a metatable to make nil insert a special marker indicating NONE and add a remove method.</p>

<p>It seems like there are lots of solutions to this problem. Maybe if you aren&#39;t in control of all of your code (or other people you work with don&#39;t agree with you), so you can&#39;t implement those solutions.</p>

<p>I&#39;m also coming at it from nostalgia for Lua. I haven&#39;t used Lua in a year and I&#39;m using C# now. There are problems in that language that are -- everything is designed for garbage collection so all the library stuff produces garbage at an alarming rate. To control your garbage you need to pool so heavily that you&#39;re avoiding much of the convenience of the language and reimplement so much functionality (no linq - for loops everywhere, no new -- pool everything, etc). I guess with Lua there&#39;s not much of a stdlib, so there&#39;s not much to reimplement :D It also feels like it would be easier to solve these problems in Lua because you define how complex types work and how iteration works and how everything works.</p>

<p>Anyway, you&#39;re not wrong that no nil in arrays is unfortunate. It&#39;s just a lesser sin in the grand scheme of things -- in my view at least.</p>
</div>",1589565474.0,,False,fqqh8gt,False,t3_gigp9k,t1_fqp6ij9,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqqh8gt/,1,False,2,False,gigp9k,lua,t5_2qjla
200,SP4C3_SH0T,"Some code 
If type(a)== null then 
a=""x""
end
Table.insert(table,a) then just Treat strings that ==""x"" as null in the iteration whith  for I,v in ipairs(  table ) do
If v!='x' then 
 Do whatever
End 
End","<div class=""md""><p>Some code 
If type(a)== null then 
a=&quot;x&quot;
end
Table.insert(table,a) then just Treat strings that ==&quot;x&quot; as null in the iteration whith  for I,v in ipairs(  table ) do
If v!=&#39;x&#39; then 
 Do whatever
End 
End</p>
</div>",1642321208.0,,False,hsvng5f,False,t3_gigp9k,t1_fqp6ij9,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/hsvng5f/,0,False,1,False,gigp9k,lua,t5_2qjla
201,tobiasvl,">It's not even necessarily the shared array/map usage that's the problem, it's the weird way it handles gaps in indexed arrays and nils in tables in general.

I mean, it's pretty simple: Tables can contain any types of values, except nil. There can be no gaps in indexed arrays, and there can be no nils in tables in general.","<div class=""md""><blockquote>
<p>It&#39;s not even necessarily the shared array/map usage that&#39;s the problem, it&#39;s the weird way it handles gaps in indexed arrays and nils in tables in general.</p>
</blockquote>

<p>I mean, it&#39;s pretty simple: Tables can contain any types of values, except nil. There can be no gaps in indexed arrays, and there can be no nils in tables in general.</p>
</div>",1589491292.0,,False,fqna776,False,t3_gigp9k,t1_fqh8tm9,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqna776/,1,False,1,False,gigp9k,lua,t5_2qjla
202,rpiirp,"> So nobody's allowed to have criticism and ""if you don't like it you should leave""?

I'm sorry byt that's what it essentially boils down to. I don't think Lua's creators will mess with these core matters just for you. I've never run into these problems because I don't try to use Lua in ways it was probably never intended to be used. Lua tables are something where you can put stuff in and look it up later. **Simple**.

If you want to get fancy with data structures and want certain performance characteristics and guaranteed behaviors and then more and more of those, there are some very elaborate C++ libraries I can recommend to you....","<div class=""md""><blockquote>
<p>So nobody&#39;s allowed to have criticism and &quot;if you don&#39;t like it you should leave&quot;?</p>
</blockquote>

<p>I&#39;m sorry byt that&#39;s what it essentially boils down to. I don&#39;t think Lua&#39;s creators will mess with these core matters just for you. I&#39;ve never run into these problems because I don&#39;t try to use Lua in ways it was probably never intended to be used. Lua tables are something where you can put stuff in and look it up later. <strong>Simple</strong>.</p>

<p>If you want to get fancy with data structures and want certain performance characteristics and guaranteed behaviors and then more and more of those, there are some very elaborate C++ libraries I can recommend to you....</p>
</div>",1589374327.0,,False,fqhd16b,False,t3_gigp9k,t1_fqh8tm9,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqhd16b/,1,False,0,False,gigp9k,lua,t5_2qjla
203,dddbbb,"Lua is also simple and small.

It's a single pass compiler that can run with a small amount of memory (compared to many alternatives).

I think OP's point is that if you modified lua, then it would likely lose those characteristics, so why bother using lua. I think they meant that in terms of the language design (what makes it nice to program in lua) rather than the implementation characteristics (what makes it suited for specific purposes), but those characteristics are what make it particularly suited for embedding.","<div class=""md""><p>Lua is also simple and small.</p>

<p>It&#39;s a single pass compiler that can run with a small amount of memory (compared to many alternatives).</p>

<p>I think OP&#39;s point is that if you modified lua, then it would likely lose those characteristics, so why bother using lua. I think they meant that in terms of the language design (what makes it nice to program in lua) rather than the implementation characteristics (what makes it suited for specific purposes), but those characteristics are what make it particularly suited for embedding.</p>
</div>",1589520170.0,,False,fqooay7,False,t3_gigp9k,t1_fqid8lq,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqooay7/,1,False,1,False,gigp9k,lua,t5_2qjla
204,ws-ilazki,"> Regardless, have you tried to implement your own ipairs and length functions that make arrays work how you want? Or is your problem more the principle that Lua doubles the meaning of nil?

No, I know how I could do it, but I try to work with a language's provided data structures when possible instead of rolling my own.  I generally agree with the Alan Perlis quote that it's ""better to have 100 functions operate on one data structure than 10 functions on 10 data structures"".

>  I can't help but react, ""don't do that then."" Sanitize your input before you put it in your array, right? (Like how in C++ you wouldn't allow null or check for null before dereferencing.) 

I tried to explain this already [in another comment](https://www.reddit.com/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqq0fym/), but my gripe is that sometimes it makes sense to store nothing, so when you *can't* do that you end up writing kludges.  Languages usually allow storing nulls in some form because it's useful to say ""I don't have a thing here"", and languages without nulls but with good static type systems do the same thing (but more safely) with option types where your values can be something like `None | Some of 'a`.  

Lua's in a weird place, because it doesn't go all the way (remove nil completely for safety), but it also doesn't let you use it as a regular value in some places (despite allowing it in others).  So ""just don't do that"" leads to writing weird workarounds, trying to catch when it might come up, and just sort of fighting the language sometimes.

I think this may be more of an issue for me than others because I try to write FP style code whenever and wherever possible, and most Lua users do not.  So I'm doing a lot more indexed table manipulations and doing everything through expressions (pure functions with values in, values out), and sometimes from that perspective returning nils makes sense.  


> You could probably write a metatable to make nil insert a special marker indicating NONE and add a remove method. It seems like there are lots of solutions to this problem. Maybe if you aren't in control of all of your code (or other people you work with don't agree with you), so you can't implement those solutions.

I'm not aware of any metamethods that intercept table accesses, so as the next best thing, I'd probably use `__newindex` to catch nils and insert some sort of placeholder value, and add a `__call` function to be used in place of normal table access, e.g. `return t(10)` instead of `return t[10]`, to convert it back.  It would keep things *somewhat* close to normal table use that way.

Still, I'm not a really fan of doing that sort of thing when it can be avoided.  It's exactly what I meant when I said that not being able to represent nothingness in a data structure leads to writing kludges to circumvent the restriction.  Once I start down the path of abusing metatables to make not-quite-tables and do weird things, I'm probably better off using a transpiles-to-Lua language like Amulet and removing any illusion that I'm writing normal Lua. :)

> I'm also coming at it from nostalgia for Lua. I haven't used Lua in a year and I'm using C# now.

I've never been a fan of Java and C#'s overly verbose, OOP-heavy styles, so I'd be wishing for Lua instead as well.  I'm a fan of OCaml, though, so if I were working in the .NET ecosystem I'd be trying to use F# instead of either. 

> Anyway, you're not wrong that no nil in arrays is unfortunate. It's just a lesser sin in the grand scheme of things -- in my view at least.

That's why I'm here.  There are a few languages I strongly prefer, but I still find Lua to be generally pleasant to use and I'd rather use it than most alternatives in the same space. Though lately I've been more interested in using Lua indirectly (via Amulet or Urn) so that I can have a nicer, more batteries-included base for functional programming that still works where Lua is used.  Lua works well for FP but, unlike OOP, provides *nothing* for it out of the box, so I kind of got tired of having to implement everything myself whenever I'd use it.","<div class=""md""><blockquote>
<p>Regardless, have you tried to implement your own ipairs and length functions that make arrays work how you want? Or is your problem more the principle that Lua doubles the meaning of nil?</p>
</blockquote>

<p>No, I know how I could do it, but I try to work with a language&#39;s provided data structures when possible instead of rolling my own.  I generally agree with the Alan Perlis quote that it&#39;s &quot;better to have 100 functions operate on one data structure than 10 functions on 10 data structures&quot;.</p>

<blockquote>
<p>I can&#39;t help but react, &quot;don&#39;t do that then.&quot; Sanitize your input before you put it in your array, right? (Like how in C++ you wouldn&#39;t allow null or check for null before dereferencing.) </p>
</blockquote>

<p>I tried to explain this already <a href=""https://www.reddit.com/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqq0fym/"">in another comment</a>, but my gripe is that sometimes it makes sense to store nothing, so when you <em>can&#39;t</em> do that you end up writing kludges.  Languages usually allow storing nulls in some form because it&#39;s useful to say &quot;I don&#39;t have a thing here&quot;, and languages without nulls but with good static type systems do the same thing (but more safely) with option types where your values can be something like <code>None | Some of &#39;a</code>.  </p>

<p>Lua&#39;s in a weird place, because it doesn&#39;t go all the way (remove nil completely for safety), but it also doesn&#39;t let you use it as a regular value in some places (despite allowing it in others).  So &quot;just don&#39;t do that&quot; leads to writing weird workarounds, trying to catch when it might come up, and just sort of fighting the language sometimes.</p>

<p>I think this may be more of an issue for me than others because I try to write FP style code whenever and wherever possible, and most Lua users do not.  So I&#39;m doing a lot more indexed table manipulations and doing everything through expressions (pure functions with values in, values out), and sometimes from that perspective returning nils makes sense.  </p>

<blockquote>
<p>You could probably write a metatable to make nil insert a special marker indicating NONE and add a remove method. It seems like there are lots of solutions to this problem. Maybe if you aren&#39;t in control of all of your code (or other people you work with don&#39;t agree with you), so you can&#39;t implement those solutions.</p>
</blockquote>

<p>I&#39;m not aware of any metamethods that intercept table accesses, so as the next best thing, I&#39;d probably use <code>__newindex</code> to catch nils and insert some sort of placeholder value, and add a <code>__call</code> function to be used in place of normal table access, e.g. <code>return t(10)</code> instead of <code>return t[10]</code>, to convert it back.  It would keep things <em>somewhat</em> close to normal table use that way.</p>

<p>Still, I&#39;m not a really fan of doing that sort of thing when it can be avoided.  It&#39;s exactly what I meant when I said that not being able to represent nothingness in a data structure leads to writing kludges to circumvent the restriction.  Once I start down the path of abusing metatables to make not-quite-tables and do weird things, I&#39;m probably better off using a transpiles-to-Lua language like Amulet and removing any illusion that I&#39;m writing normal Lua. :)</p>

<blockquote>
<p>I&#39;m also coming at it from nostalgia for Lua. I haven&#39;t used Lua in a year and I&#39;m using C# now.</p>
</blockquote>

<p>I&#39;ve never been a fan of Java and C#&#39;s overly verbose, OOP-heavy styles, so I&#39;d be wishing for Lua instead as well.  I&#39;m a fan of OCaml, though, so if I were working in the .NET ecosystem I&#39;d be trying to use F# instead of either. </p>

<blockquote>
<p>Anyway, you&#39;re not wrong that no nil in arrays is unfortunate. It&#39;s just a lesser sin in the grand scheme of things -- in my view at least.</p>
</blockquote>

<p>That&#39;s why I&#39;m here.  There are a few languages I strongly prefer, but I still find Lua to be generally pleasant to use and I&#39;d rather use it than most alternatives in the same space. Though lately I&#39;ve been more interested in using Lua indirectly (via Amulet or Urn) so that I can have a nicer, more batteries-included base for functional programming that still works where Lua is used.  Lua works well for FP but, unlike OOP, provides <em>nothing</em> for it out of the box, so I kind of got tired of having to implement everything myself whenever I&#39;d use it.</p>
</div>",1589580433.0,,False,fqra44d,False,t3_gigp9k,t1_fqqh8gt,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqra44d/,1,False,2,False,gigp9k,lua,t5_2qjla
205,ws-ilazki,"> and there can be no nils in tables in general.

This is where most of the problem lies.  `nil` is a valid type in the language and can be returned by expressions, but it can't be stored in variables because it has magic ""delete stuff"" properties.  That means you can end up with weird situations, especially when you're dealing with indexed data.

So, really, my problem is more with the magic properties of `nil` than tables being a composite data structure, but the issues go together, because it would be easier to deal with indexed data and gaps if the two types of structure weren't combined.","<div class=""md""><blockquote>
<p>and there can be no nils in tables in general.</p>
</blockquote>

<p>This is where most of the problem lies.  <code>nil</code> is a valid type in the language and can be returned by expressions, but it can&#39;t be stored in variables because it has magic &quot;delete stuff&quot; properties.  That means you can end up with weird situations, especially when you&#39;re dealing with indexed data.</p>

<p>So, really, my problem is more with the magic properties of <code>nil</code> than tables being a composite data structure, but the issues go together, because it would be easier to deal with indexed data and gaps if the two types of structure weren&#39;t combined.</p>
</div>",1589537322.0,,False,fqp71ln,False,t3_gigp9k,t1_fqna776,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqp71ln/,1,False,2,False,gigp9k,lua,t5_2qjla
206,ws-ilazki,">  I don't think Lua's creators will mess with these core matters just for you.

Maybe not, but if nobody speaks their mind it's *guaranteed* nothing will ever change.  Though I didn't actually ask or demand anything be changed, I just said tables behave very badly in certain situations and it would be nice if the language had a better alternative than trying to remember and deal with the edge cases all the time.

>  I've never run into these problems because I don't try to use Lua in ways it was probably never intended to be used. Lua tables are something where you can put stuff in and look it up later. Simple.

You mean like putting a nil in it and look it up later?  **Simple**.  

Except it's not, because Lua has the magic behaviour of using nil assignments to delete entries.  So now if you were using keys, that key no longer exists when it really should.  And if you were using indices, you now have a gap in it that affects the behaviour of things like like `#t` or `ipairs(t)` (and does so differently depending on Lua implementation.)

You might argue ""why would you be putting a nil in there?"" but it can come up unexpectedly, like if you're setting table values and a function returns a nil for some reason.  Now you suddenly have a missing key or the part of your ""array"" after the nil just goes missing.

> If you want to get fancy with data structures

You'd have a better argument if ""get fancy with data structures"" meant doing something more complicated than table assignment along the lines of `t[n] = f(x)` causing part of your array to disappear if the return value of `f(x)` happens to be nil as mentioned above.

Tables are cool but crap like that is a foot-gun waiting to be fired.","<div class=""md""><blockquote>
<p>I don&#39;t think Lua&#39;s creators will mess with these core matters just for you.</p>
</blockquote>

<p>Maybe not, but if nobody speaks their mind it&#39;s <em>guaranteed</em> nothing will ever change.  Though I didn&#39;t actually ask or demand anything be changed, I just said tables behave very badly in certain situations and it would be nice if the language had a better alternative than trying to remember and deal with the edge cases all the time.</p>

<blockquote>
<p>I&#39;ve never run into these problems because I don&#39;t try to use Lua in ways it was probably never intended to be used. Lua tables are something where you can put stuff in and look it up later. Simple.</p>
</blockquote>

<p>You mean like putting a nil in it and look it up later?  <strong>Simple</strong>.  </p>

<p>Except it&#39;s not, because Lua has the magic behaviour of using nil assignments to delete entries.  So now if you were using keys, that key no longer exists when it really should.  And if you were using indices, you now have a gap in it that affects the behaviour of things like like <code>#t</code> or <code>ipairs(t)</code> (and does so differently depending on Lua implementation.)</p>

<p>You might argue &quot;why would you be putting a nil in there?&quot; but it can come up unexpectedly, like if you&#39;re setting table values and a function returns a nil for some reason.  Now you suddenly have a missing key or the part of your &quot;array&quot; after the nil just goes missing.</p>

<blockquote>
<p>If you want to get fancy with data structures</p>
</blockquote>

<p>You&#39;d have a better argument if &quot;get fancy with data structures&quot; meant doing something more complicated than table assignment along the lines of <code>t[n] = f(x)</code> causing part of your array to disappear if the return value of <code>f(x)</code> happens to be nil as mentioned above.</p>

<p>Tables are cool but crap like that is a foot-gun waiting to be fired.</p>
</div>",1589376610.0,,False,fqhgofk,False,t3_gigp9k,t1_fqhd16b,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqhgofk/,1,False,1,False,gigp9k,lua,t5_2qjla
207,gcross,"I get that, it is just my takeaway from what OP wrote was that much of what made Lua simple was how its tables work, but I would hope that its tables are not primarily what sets it apart and that there would be plenty of other distinguishable features left even if tables were split into explicit arrays and hash tables--assuming that such a change would even introduce a nontrivial amount of complexity to the language.","<div class=""md""><p>I get that, it is just my takeaway from what OP wrote was that much of what made Lua simple was how its tables work, but I would hope that its tables are not primarily what sets it apart and that there would be plenty of other distinguishable features left even if tables were split into explicit arrays and hash tables--assuming that such a change would even introduce a nontrivial amount of complexity to the language.</p>
</div>",1589537889.0,,False,fqp7ln4,False,t3_gigp9k,t1_fqooay7,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqp7ln4/,0,False,2,False,gigp9k,lua,t5_2qjla
208,dddbbb,"This conversation makes me wonder how my lua use would change if I had an `npairs` that iterated from 1 to the highest numeric key. It's hard for me to even think about it -- my first imagining of it was that it would just iterate over all numeric keys, but that's not what you're talking about.

Something interesting to think about. Thanks!","<div class=""md""><p>This conversation makes me wonder how my lua use would change if I had an <code>npairs</code> that iterated from 1 to the highest numeric key. It&#39;s hard for me to even think about it -- my first imagining of it was that it would just iterate over all numeric keys, but that&#39;s not what you&#39;re talking about.</p>

<p>Something interesting to think about. Thanks!</p>
</div>",1589617413.0,,False,fqssmb9,False,t3_gigp9k,t1_fqra44d,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqssmb9/,1,False,1,False,gigp9k,lua,t5_2qjla
209,tobiasvl,"But surely nils are magical in most or all languages? In C, a string is an array of chars that ends when encountering a NULL (which is not a separate type, but still), even if the array contains more chars. In Lua, a sequence is a table of elements that ends when encountering a `nil`, even if the table contains more elements. In both cases, inserting the wrong element will cause unexpected results (and in the case of C, _not_ inserting a NULL at the end of a string will also cause unexpected results).

I guess Lua could have two ""nil"" types like JavaScript, `null` and `undefined`. Perhaps that would make some stuff easier, but I'm not sure it'd really add that much to the language.

But Lua is flexible. If you want, you can easily make a new array type that works the way you want, can't you? Make a `__newindex` metamethod that checks for `nil` and refuses to store it.

    function newArray()
        local internal_table = {}
        return setmetatable({}, {
            __index = internal_table,
            __newindex = function(_, index, value)
                if value == nil then
                    -- print error message, crash with an assert, etc
                else
                    internal_table[index] = value
                end
            end
        }
    end

Or you can make a `__len` metamethod that calculates `#` for you the way you want, skipping over `nil`s or whatever.","<div class=""md""><p>But surely nils are magical in most or all languages? In C, a string is an array of chars that ends when encountering a NULL (which is not a separate type, but still), even if the array contains more chars. In Lua, a sequence is a table of elements that ends when encountering a <code>nil</code>, even if the table contains more elements. In both cases, inserting the wrong element will cause unexpected results (and in the case of C, <em>not</em> inserting a NULL at the end of a string will also cause unexpected results).</p>

<p>I guess Lua could have two &quot;nil&quot; types like JavaScript, <code>null</code> and <code>undefined</code>. Perhaps that would make some stuff easier, but I&#39;m not sure it&#39;d really add that much to the language.</p>

<p>But Lua is flexible. If you want, you can easily make a new array type that works the way you want, can&#39;t you? Make a <code>__newindex</code> metamethod that checks for <code>nil</code> and refuses to store it.</p>

<pre><code>function newArray()
    local internal_table = {}
    return setmetatable({}, {
        __index = internal_table,
        __newindex = function(_, index, value)
            if value == nil then
                -- print error message, crash with an assert, etc
            else
                internal_table[index] = value
            end
        end
    }
end
</code></pre>

<p>Or you can make a <code>__len</code> metamethod that calculates <code>#</code> for you the way you want, skipping over <code>nil</code>s or whatever.</p>
</div>",1589538979.0,,False,fqp8oi2,False,t3_gigp9k,t1_fqp71ln,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqp8oi2/,1,False,1,False,gigp9k,lua,t5_2qjla
210,,"> You mean like putting a nil in it and look it up later? Simple.

Absolutely not simple.

Nil represents nothing. In most languages, you can have a situation where you say ""I put nothing in this list, and now the list is longer than it was before"". It's utter nonsense. Lua's handling of nil is a breath of fresh air by comparison.","<div class=""md""><blockquote>
<p>You mean like putting a nil in it and look it up later? Simple.</p>
</blockquote>

<p>Absolutely not simple.</p>

<p>Nil represents nothing. In most languages, you can have a situation where you say &quot;I put nothing in this list, and now the list is longer than it was before&quot;. It&#39;s utter nonsense. Lua&#39;s handling of nil is a breath of fresh air by comparison.</p>
</div>",1589389802.0,,False,fqi488b,False,t3_gigp9k,t1_fqhgofk,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqi488b/,1,False,1,False,gigp9k,lua,t5_2qjla
211,ws-ilazki,"Being able to use nils really does change how you can do things.  One example that really bit me hard was partial application of function arguments.  If a language has automatic currying that's a better solution, but in other languages that don't, partial application is a great substitute that gets you most of the way there with only a little bit of extra effort.

Anyway, you can make a rudimentary single-argument form of partial application very easily with just `partial = function (f, a1) return function (...) return f(a1, ...) end end`, but then if you want to use set two arguments you need to nest it and it gets ugly.  In theory, you can get multi-argument partial application easily enough by replacing `a1` with `...` in the first function call, stuffing it into a table, and combining it with another table in the nested function.  

Same idea works fine in other languages with similar features, so I implemented it quickly and thought I was good for a while, until someone pointed out that nils break everything.  It never even occurred to me that nils would remove keys like that.  I'd even tested and everything seemed to indicate it was working fine when there were nils, but it turns out that was just a fluke in the versions I'd tested against, like the example above where a gap in the indices *looks* fine until it doesn't.  A nil at the end, or a nil in the middle and at the end, broke things horribly.  So I ended up having to do some janky workarounds to try making it work and it's still kind of weird and might break again later for all I know. 

So, I find myself not trusting it and just using the single-argument partial instead because passing nils as function arguments is a valid thing that can (and does) occur, and it makes things work horribly.  A useful, valid solution is basically unusable because nils are magic.

I might revisit it sometime by using the idea I mentioned, overriding how nils are inserted and accessed, maybe even replace ipairs to automagically turn some kind of placeholder into nils.  It's a fun thought at least, I can see how it could be done *mostly* transparently, though it'd only be safe to use in code where I know nobody else is going to deal with it and expect normal table behaviours.","<div class=""md""><p>Being able to use nils really does change how you can do things.  One example that really bit me hard was partial application of function arguments.  If a language has automatic currying that&#39;s a better solution, but in other languages that don&#39;t, partial application is a great substitute that gets you most of the way there with only a little bit of extra effort.</p>

<p>Anyway, you can make a rudimentary single-argument form of partial application very easily with just <code>partial = function (f, a1) return function (...) return f(a1, ...) end end</code>, but then if you want to use set two arguments you need to nest it and it gets ugly.  In theory, you can get multi-argument partial application easily enough by replacing <code>a1</code> with <code>...</code> in the first function call, stuffing it into a table, and combining it with another table in the nested function.  </p>

<p>Same idea works fine in other languages with similar features, so I implemented it quickly and thought I was good for a while, until someone pointed out that nils break everything.  It never even occurred to me that nils would remove keys like that.  I&#39;d even tested and everything seemed to indicate it was working fine when there were nils, but it turns out that was just a fluke in the versions I&#39;d tested against, like the example above where a gap in the indices <em>looks</em> fine until it doesn&#39;t.  A nil at the end, or a nil in the middle and at the end, broke things horribly.  So I ended up having to do some janky workarounds to try making it work and it&#39;s still kind of weird and might break again later for all I know. </p>

<p>So, I find myself not trusting it and just using the single-argument partial instead because passing nils as function arguments is a valid thing that can (and does) occur, and it makes things work horribly.  A useful, valid solution is basically unusable because nils are magic.</p>

<p>I might revisit it sometime by using the idea I mentioned, overriding how nils are inserted and accessed, maybe even replace ipairs to automagically turn some kind of placeholder into nils.  It&#39;s a fun thought at least, I can see how it could be done <em>mostly</em> transparently, though it&#39;d only be safe to use in code where I know nobody else is going to deal with it and expect normal table behaviours.</p>
</div>",1589775731.0,,False,fqzujeo,False,t3_gigp9k,t1_fqssmb9,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqzujeo/,0,False,2,False,gigp9k,lua,t5_2qjla
212,ws-ilazki,"> But surely nils are magical in most or all languages? In C...

C's a lower level language with some questionable design decisions that were dictated by what made sense for limited hardware of the time.  Lua is not, and it makes more sense to compare it with other high-level languages that also have nil or some other nil-like concept.  There's no problem storing `nil` in lists in Scheme and `(length '(10 20 nil 40 nil))` does what you'd expect.  The same is true for Perl (`scalar @{[10, 20, undef, 40, undef]}`, Python (`len([10, 20, None, 40, None])`, Ruby (`[10, 20, nil, 40, nil].length`), and more.  Even the notoriously strange JavaScript does it fine (`[10, 20, null, 40, null].length`).

It doesn't make Lua unusable, and most of the time it's not an issue, but it's still a weird wart on the language.  It doesn't do what one expects and requires extra care or workarounds.  Every language has some sort of ""wtf were they thinking?"" designs and that's Lua's, along with (arguably) variables being global by default.","<div class=""md""><blockquote>
<p>But surely nils are magical in most or all languages? In C...</p>
</blockquote>

<p>C&#39;s a lower level language with some questionable design decisions that were dictated by what made sense for limited hardware of the time.  Lua is not, and it makes more sense to compare it with other high-level languages that also have nil or some other nil-like concept.  There&#39;s no problem storing <code>nil</code> in lists in Scheme and <code>(length &#39;(10 20 nil 40 nil))</code> does what you&#39;d expect.  The same is true for Perl (<code>scalar @{[10, 20, undef, 40, undef]}</code>, Python (<code>len([10, 20, None, 40, None])</code>, Ruby (<code>[10, 20, nil, 40, nil].length</code>), and more.  Even the notoriously strange JavaScript does it fine (<code>[10, 20, null, 40, null].length</code>).</p>

<p>It doesn&#39;t make Lua unusable, and most of the time it&#39;s not an issue, but it&#39;s still a weird wart on the language.  It doesn&#39;t do what one expects and requires extra care or workarounds.  Every language has some sort of &quot;wtf were they thinking?&quot; designs and that&#39;s Lua&#39;s, along with (arguably) variables being global by default.</p>
</div>",1589540871.0,,False,fqpanlb,False,t3_gigp9k,t1_fqp8oi2,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqpanlb/,0,False,2,False,gigp9k,lua,t5_2qjla
213,ws-ilazki,"> Nil represents nothing.

Nil represents nothing, but is still a valid type in the language.  One that is unassignable, unlike every other type, which makes no sense.  Sometimes you want to represent nothingness, for example as a placeholder or ""I don't have anything here.""  If you don't have a way to store the absence of value, you end up writing weird kludges, like using magic values, to represent the same thing.

Even in languages that don't have nil, you still have things like option types as a way to do the same thing (e.g. `type 'a option = None | Some of 'a`) because it's useful to be able to represent the lack of a thing.

> In most languages, you can have a situation where you say ""I put nothing in this list, and now the list is longer than it was before"". It's utter nonsense.

It makes perfect sense to have an empty value in something.  If you have a book with 300 pages and rip out page 200, it's reasonable to still consider the length of your book to be 300 pages, but with one page missing (nil).  Following Lua's logic, the book would now stop at page 199.  **That's** utter nonsense.

If you have ten parking spaces total and one car leaves, that parking space is empty but doesn't disappear, but in Lua it would.  

Or what about names?  If someone doesn't have a middle name it makes sense to represent that as nothingness.  In a statically typed language you could do something like `type name = {first : string; middle: string option; last: string option}` to allow for the possibility of middle and last name simply no existing; in a dynamic language you have to do runtime checking, but the idea is the same.  

In every case, if you can't have a nil you just end up repurposing an arbitrary value to do the same job, hoping that it won't do anything unexpected later.","<div class=""md""><blockquote>
<p>Nil represents nothing.</p>
</blockquote>

<p>Nil represents nothing, but is still a valid type in the language.  One that is unassignable, unlike every other type, which makes no sense.  Sometimes you want to represent nothingness, for example as a placeholder or &quot;I don&#39;t have anything here.&quot;  If you don&#39;t have a way to store the absence of value, you end up writing weird kludges, like using magic values, to represent the same thing.</p>

<p>Even in languages that don&#39;t have nil, you still have things like option types as a way to do the same thing (e.g. <code>type &#39;a option = None | Some of &#39;a</code>) because it&#39;s useful to be able to represent the lack of a thing.</p>

<blockquote>
<p>In most languages, you can have a situation where you say &quot;I put nothing in this list, and now the list is longer than it was before&quot;. It&#39;s utter nonsense.</p>
</blockquote>

<p>It makes perfect sense to have an empty value in something.  If you have a book with 300 pages and rip out page 200, it&#39;s reasonable to still consider the length of your book to be 300 pages, but with one page missing (nil).  Following Lua&#39;s logic, the book would now stop at page 199.  <strong>That&#39;s</strong> utter nonsense.</p>

<p>If you have ten parking spaces total and one car leaves, that parking space is empty but doesn&#39;t disappear, but in Lua it would.  </p>

<p>Or what about names?  If someone doesn&#39;t have a middle name it makes sense to represent that as nothingness.  In a statically typed language you could do something like <code>type name = {first : string; middle: string option; last: string option}</code> to allow for the possibility of middle and last name simply no existing; in a dynamic language you have to do runtime checking, but the idea is the same.  </p>

<p>In every case, if you can&#39;t have a nil you just end up repurposing an arbitrary value to do the same job, hoping that it won&#39;t do anything unexpected later.</p>
</div>",1589557264.0,,False,fqq0fym,False,t3_gigp9k,t1_fqi488b,/r/lua/comments/gigp9k/the_anatomy_of_luajit_tables_and_whats_special/fqq0fym/,0,False,1,False,gigp9k,lua,t5_2qjla
214,koalyx,"It's pretty cool.
But not available for the moment on linux; probably soon.","<div class=""md""><p>It&#39;s pretty cool.
But not available for the moment on linux; probably soon.</p>
</div>",1360845585.0,,False,c8f28aq,False,t3_18ie90,t3_18ie90,/r/lua/comments/18ie90/decoda_lua_development_environment_now_open_source/c8f28aq/,1,False,3,False,18ie90,lua,t5_2qjla
215,EmpiresBane,"Unsuprisingly, [someone is already working on it](https://github.com/losinggeneration/decoda/commit/1cece8ce71927b0a6c615f18bbc0308c26ae1ecf). Unknown Worlds also mentioned they are willing to work on Linux and OS X [if there's enough demand](http://unknownworlds.com/decoda/faq/#faq-1135). Since almost everybody that's seen the news has asked about Linux support, I would say there's probably enough demand to get their attention.","<div class=""md""><p>Unsuprisingly, <a href=""https://github.com/losinggeneration/decoda/commit/1cece8ce71927b0a6c615f18bbc0308c26ae1ecf"">someone is already working on it</a>. Unknown Worlds also mentioned they are willing to work on Linux and OS X <a href=""http://unknownworlds.com/decoda/faq/#faq-1135"">if there&#39;s enough demand</a>. Since almost everybody that&#39;s seen the news has asked about Linux support, I would say there&#39;s probably enough demand to get their attention.</p>
</div>",1360862554.0,,False,c8f69zw,False,t3_18ie90,t1_c8f28aq,/r/lua/comments/18ie90/decoda_lua_development_environment_now_open_source/c8f69zw/,0,False,2,False,18ie90,lua,t5_2qjla
216,luascriptdev,Great work! Make sure you share this in other subs as it's great! Could've done with this parser myself a year ago!,"<div class=""md""><p>Great work! Make sure you share this in other subs as it&#39;s great! Could&#39;ve done with this parser myself a year ago!</p>
</div>",1599029860.0,,False,g3ow98f,False,t3_il0vw7,t3_il0vw7,/r/lua/comments/il0vw7/i_finished_my_project_in_lua_for_the_google/g3ow98f/,0,False,2,False,il0vw7,lua,t5_2qjla
217,microchipsndip,"This is some well-written code, and I'm very picky about what constitutes nice code. Excellent work.","<div class=""md""><p>This is some well-written code, and I&#39;m very picky about what constitutes nice code. Excellent work.</p>
</div>",1599125366.0,,False,g3tpowh,False,t3_il0vw7,t3_il0vw7,/r/lua/comments/il0vw7/i_finished_my_project_in_lua_for_the_google/g3tpowh/,1,False,2,False,il0vw7,lua,t5_2qjla
218,hisham_hm,"Congratulations on the project!

I will definitely give it a try next time I need to write a parser!!","<div class=""md""><p>Congratulations on the project!</p>

<p>I will definitely give it a try next time I need to write a parser!!</p>
</div>",1599933919.0,,False,g4yesbt,False,t3_il0vw7,t3_il0vw7,/r/lua/comments/il0vw7/i_finished_my_project_in_lua_for_the_google/g4yesbt/,0,False,1,False,il0vw7,lua,t5_2qjla
219,dadbot_2,"Hi very picky about what constitutes nice code, I'm Dad👨","<div class=""md""><p>Hi very picky about what constitutes nice code, I&#39;m Dad👨</p>
</div>",1599125392.0,,False,g3tpprg,False,t3_il0vw7,t1_g3tpowh,/r/lua/comments/il0vw7/i_finished_my_project_in_lua_for_the_google/g3tpprg/,1,False,2,False,il0vw7,lua,t5_2qjla
220,microchipsndip,Dad? You came back?,"<div class=""md""><p>Dad? You came back?</p>
</div>",1599125413.0,,False,g3tpqgp,False,t3_il0vw7,t1_g3tpprg,/r/lua/comments/il0vw7/i_finished_my_project_in_lua_for_the_google/g3tpqgp/,1,False,3,False,il0vw7,lua,t5_2qjla
221,AtheRipper,I'm happy that dad is back,"<div class=""md""><p>I&#39;m happy that dad is back</p>
</div>",1599205736.0,,False,g3yjkpw,False,t3_il0vw7,t1_g3tpqgp,/r/lua/comments/il0vw7/i_finished_my_project_in_lua_for_the_google/g3yjkpw/,1,False,1,False,il0vw7,lua,t5_2qjla
222,dadbot_2,"Hi happy that dad is back, I'm Dad👨","<div class=""md""><p>Hi happy that dad is back, I&#39;m Dad👨</p>
</div>",1599205751.0,,False,g3yjl8o,False,t3_il0vw7,t1_g3yjkpw,/r/lua/comments/il0vw7/i_finished_my_project_in_lua_for_the_google/g3yjl8o/,0,False,3,False,il0vw7,lua,t5_2qjla
223,d4rch0n,"Awesome!

This is exactly what I would want to see if I was learning a new programming language.

Does a tutorial like this exist for others, like javascript and ruby?","<div class=""md""><p>Awesome!</p>

<p>This is exactly what I would want to see if I was learning a new programming language.</p>

<p>Does a tutorial like this exist for others, like javascript and ruby?</p>
</div>",1372220127.0,,False,caqdbok,False,t3_1h1a1n,t3_1h1a1n,/r/lua/comments/1h1a1n/learn_lua_in_15_minutes/caqdbok/,1,False,5,False,1h1a1n,lua,t5_2qjla
224,,"Ah excellent, just picked up Lua there and I always like to have a little 'cheat sheet' like this!","<div class=""md""><p>Ah excellent, just picked up Lua there and I always like to have a little &#39;cheat sheet&#39; like this!</p>
</div>",1372365881.0,,False,carit3j,False,t3_1h1a1n,t3_1h1a1n,/r/lua/comments/1h1a1n/learn_lua_in_15_minutes/carit3j/,0,False,4,False,1h1a1n,lua,t5_2qjla
225,moop__,Probably should say xpost www.reddit.com/r/programming/comments/1h0wuv/learn_lua_in_15_minutes/,"<div class=""md""><p>Probably should say xpost <a href=""http://www.reddit.com/r/programming/comments/1h0wuv/learn_lua_in_15_minutes/"">www.reddit.com/r/programming/comments/1h0wuv/learn_lua_in_15_minutes/</a></p>
</div>",1372248684.0,,False,caqiymk,False,t3_1h1a1n,t3_1h1a1n,/r/lua/comments/1h1a1n/learn_lua_in_15_minutes/caqiymk/,1,False,3,False,1h1a1n,lua,t5_2qjla
226,,This is awesome! Thank you!,"<div class=""md""><p>This is awesome! Thank you!</p>
</div>",1372799124.0,,False,cauqnnf,False,t3_1h1a1n,t3_1h1a1n,/r/lua/comments/1h1a1n/learn_lua_in_15_minutes/cauqnnf/,0,False,2,False,1h1a1n,lua,t5_2qjla
227,Veedrac,"This is great (but it reminds me why I hate lua...).

Nevertheless, thank you muchly. So much is clearer.","<div class=""md""><p>This is great (but it reminds me why I hate lua...).</p>

<p>Nevertheless, thank you muchly. So much is clearer.</p>
</div>",1373291223.0,,False,cay72ng,False,t3_1h1a1n,t3_1h1a1n,/r/lua/comments/1h1a1n/learn_lua_in_15_minutes/cay72ng/,0,False,1,False,1h1a1n,lua,t5_2qjla
228,bradido,There are a few more here: http://learnxinyminutes.com,"<div class=""md""><p>There are a few more here: <a href=""http://learnxinyminutes.com"">http://learnxinyminutes.com</a></p>
</div>",1372423659.0,,False,carxm2l,False,t3_1h1a1n,t1_caqdbok,/r/lua/comments/1h1a1n/learn_lua_in_15_minutes/carxm2l/,2,False,4,False,1h1a1n,lua,t5_2qjla
229,kinow,You're right indeed. Sorry. Found the link from HNews and missed the post in r/programming.,"<div class=""md""><p>You&#39;re right indeed. Sorry. Found the link from HNews and missed the post in <a href=""/r/programming"">r/programming</a>.</p>
</div>",1372296053.0,,False,caqzfl0,True,t3_1h1a1n,t1_caqiymk,/r/lua/comments/1h1a1n/learn_lua_in_15_minutes/caqzfl0/,0,False,3,False,1h1a1n,lua,t5_2qjla
230,melabaa,Happy cake day and thanks for this hehe,"<div class=""md""><p>Happy cake day and thanks for this hehe</p>
</div>",1655949826.0,,False,iddq0qn,False,t3_1h1a1n,t1_carxm2l,/r/lua/comments/1h1a1n/learn_lua_in_15_minutes/iddq0qn/,0,False,1,False,1h1a1n,lua,t5_2qjla
231,melabaa,Happy cake day and thanks for this hehe,"<div class=""md""><p>Happy cake day and thanks for this hehe</p>
</div>",1655949832.0,,False,iddq17d,False,t3_1h1a1n,t1_carxm2l,/r/lua/comments/1h1a1n/learn_lua_in_15_minutes/iddq17d/,0,False,1,False,1h1a1n,lua,t5_2qjla
232,hougaard,"Question: So after 10 years, how many have ever meet Mike in person ? I know of one person that have had a Skype conversation with him ?","<div class=""md""><p>Question: So after 10 years, how many have ever meet Mike in person ? I know of one person that have had a Skype conversation with him ?</p>
</div>",1438360860.0,,False,ctmy8l3,False,t3_3fau21,t3_3fau21,/r/lua/comments/3fau21/ann_looking_for_new_luajit_maintainers_luajit/ctmy8l3/,2,False,9,False,3fau21,lua,t5_2qjla
233,tomlu709,"Me (a little bit) and a coworker (who did like 90% of the real work) helped implement PS3 and X360 support. We had a lot of contract with him, but I never met him in person.

He's absolutely brilliant IMO.","<div class=""md""><p>Me (a little bit) and a coworker (who did like 90% of the real work) helped implement PS3 and X360 support. We had a lot of contract with him, but I never met him in person.</p>

<p>He&#39;s absolutely brilliant IMO.</p>
</div>",1438381668.0,,False,ctnc5nt,False,t3_3fau21,t1_ctmy8l3,/r/lua/comments/3fau21/ann_looking_for_new_luajit_maintainers_luajit/ctnc5nt/,0,False,5,False,3fau21,lua,t5_2qjla
234,f2u,"I have met him once or twice, but it was completely unrelated to his Lua work.","<div class=""md""><p>I have met him once or twice, but it was completely unrelated to his Lua work.</p>
</div>",1438513281.0,,1438513803.0,ctorox4,False,t3_3fau21,t1_ctmy8l3,/r/lua/comments/3fau21/ann_looking_for_new_luajit_maintainers_luajit/ctorox4/,0,False,2,False,3fau21,lua,t5_2qjla
235,__Ambition,Really cool project!,"<div class=""md""><p>Really cool project!</p>
</div>",1621230840.0,,False,gyexgt1,False,t3_ndpa40,t3_ndpa40,/r/lua/comments/ndpa40/lua_scriptable_game_engine/gyexgt1/,1,False,1,False,ndpa40,lua,t5_2qjla
236,Mysterious-Ad6879,"Solarus engine is a action RPG like zelda engine
[Solarus engine](https://www.solarus-games.org/)","<div class=""md""><p>Solarus engine is a action RPG like zelda engine
<a href=""https://www.solarus-games.org/"">Solarus engine</a></p>
</div>",1622594643.0,,False,h09b63v,False,t3_ndpa40,t3_ndpa40,/r/lua/comments/ndpa40/lua_scriptable_game_engine/h09b63v/,0,False,1,False,ndpa40,lua,t5_2qjla
237,Jimmy-M-420,Thank you 🙂,"<div class=""md""><p>Thank you 🙂</p>
</div>",1621250262.0,,False,gyfkwwc,True,t3_ndpa40,t1_gyexgt1,/r/lua/comments/ndpa40/lua_scriptable_game_engine/gyfkwwc/,0,False,1,False,ndpa40,lua,t5_2qjla
238,arkt8,"Well I think that there is a misconception...

To be a ""Lua developer"" means more than to be a ""Python developer"".

When you think about a Python developer you think in someone with skills in usage of Python language and its application, usually write Python scripts for something.

When you think about a Lua developer you usually are not looking someone that only will write Lua scripts, but people that also know how to integrate Lua with other languages, specially C, or extend the language library with high performance C modules.

Ex: think about Logitech or Adobe or a Game Business looking for Lua developers... usually they ar not looking for someone that script things with Lua, but who understand Lua internals and Lua C Api (see that even Lua manual treats Lua syntax and library and C Api with equal importance).

Usually you will not see jobs for Python interested in people that knows how to write Python modules in C.

Also, things like Tiobe index have Lua (by now 2022 february) ranked as 24th. Also in Stack Overflow you see Lua not ranking on top... as Lua is simple, usually people go directly to books or the own Lua.org manual... but with C people look constantly. There is a hidden story behind every rank you see on web.","<div class=""md""><p>Well I think that there is a misconception...</p>

<p>To be a &quot;Lua developer&quot; means more than to be a &quot;Python developer&quot;.</p>

<p>When you think about a Python developer you think in someone with skills in usage of Python language and its application, usually write Python scripts for something.</p>

<p>When you think about a Lua developer you usually are not looking someone that only will write Lua scripts, but people that also know how to integrate Lua with other languages, specially C, or extend the language library with high performance C modules.</p>

<p>Ex: think about Logitech or Adobe or a Game Business looking for Lua developers... usually they ar not looking for someone that script things with Lua, but who understand Lua internals and Lua C Api (see that even Lua manual treats Lua syntax and library and C Api with equal importance).</p>

<p>Usually you will not see jobs for Python interested in people that knows how to write Python modules in C.</p>

<p>Also, things like Tiobe index have Lua (by now 2022 february) ranked as 24th. Also in Stack Overflow you see Lua not ranking on top... as Lua is simple, usually people go directly to books or the own Lua.org manual... but with C people look constantly. There is a hidden story behind every rank you see on web.</p>
</div>",1676682450.0,,False,j8zcjcp,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zcjcp/,1,False,40,False,1150m78,lua,t5_2qjla
239,EenGamendJoch,Where does this info come from?,"<div class=""md""><p>Where does this info come from?</p>
</div>",1676676459.0,,False,j8yzip2,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8yzip2/,1,False,6,False,1150m78,lua,t5_2qjla
240,Paioniu,"As a lua developer I can say that there is more involved than just scripts. Some of my works needed also C, Java, Freepascal, Assimetric Crypto, sockets and custom protocol, tcp filtering image recognition and so on. Every new work comes with a new api, environment limitations to handle and integration with other languages.

Last time, the work started as a ""simple"" script and at the end become an entire web app I developed to be an python online compiler. The backend was in Lua. The front end is Bootstrap and other JS libs. The app have an admin panel. I also needed to setup the services on a linux vps as well as geting and installing ssl certificates :-)

But I am far from get paid enough. I am bad at selling.","<div class=""md""><p>As a lua developer I can say that there is more involved than just scripts. Some of my works needed also C, Java, Freepascal, Assimetric Crypto, sockets and custom protocol, tcp filtering image recognition and so on. Every new work comes with a new api, environment limitations to handle and integration with other languages.</p>

<p>Last time, the work started as a &quot;simple&quot; script and at the end become an entire web app I developed to be an python online compiler. The backend was in Lua. The front end is Bootstrap and other JS libs. The app have an admin panel. I also needed to setup the services on a linux vps as well as geting and installing ssl certificates :-)</p>

<p>But I am far from get paid enough. I am bad at selling.</p>
</div>",1676697799.0,,False,j905gds,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j905gds/,0,False,4,False,1150m78,lua,t5_2qjla
241,anadayloft,"Seriously? That seems wildly wrong ...

Lua is flat out my favourite language to write in, and it's *extremely* easy to pick up. If you can already use any other language on that list, you should be able to pick up Lua in a week or less.

That said ... please someone pay me that much to write Lua! And everyone else, well, please continue not learning Lua for some weird reason ...","<div class=""md""><p>Seriously? That seems wildly wrong ...</p>

<p>Lua is flat out my favourite language to write in, and it&#39;s <em>extremely</em> easy to pick up. If you can already use any other language on that list, you should be able to pick up Lua in a week or less.</p>

<p>That said ... please someone pay me that much to write Lua! And everyone else, well, please continue not learning Lua for some weird reason ...</p>
</div>",1676683818.0,,False,j8zfcqu,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zfcqu/,2,False,6,False,1150m78,lua,t5_2qjla
242,garbitos_x86,"The answer is ""AI stuff""","<div class=""md""><p>The answer is &quot;AI stuff&quot;</p>
</div>",1676682428.0,,False,j8zchje,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zchje/,1,False,3,False,1150m78,lua,t5_2qjla
243,tesla1889,"IIRC, another facet of this is that Lua has been heavily used in the petroleum industry, so that could bump the average pay up a bit","<div class=""md""><p>IIRC, another facet of this is that Lua has been heavily used in the petroleum industry, so that could bump the average pay up a bit</p>
</div>",1676738826.0,,False,j91xpmx,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j91xpmx/,1,False,3,False,1150m78,lua,t5_2qjla
244,pythonistah,"Context: The language is smaller and a little bit more lower level than Python, interpreter is small and embeds easily with C and C++, therefore Lua's niche is in embedded systems and as en extension language (as some other users mentioned the gaming industry).  


Industries: So, although being a general-purpose language (web frameworks and database connectivity libraries are there) it has very defined uses and industry domains where is mostly used. This makes it very specific to the task, so industry knowledge is always expected from Lua developers.  


Scarcity: There are simply less Lua developers than Python and this is pure economics, what's harder to get, be it product, service, or talent, will tend to be more expensive, just because of the scarceness of it.

Availability: There are considerably less learning resources on Lua if you compare with Python. The community is smaller and this adds to the factor that are less people wanting to jump out the university and start coding Lua (unless in robotics, gaming, embedded systems). Most developers go API, Web, AI (all these are domains in which Python excels).

I've been using both of these beautiful languages for +15 years. My 2c.","<div class=""md""><p>Context: The language is smaller and a little bit more lower level than Python, interpreter is small and embeds easily with C and C++, therefore Lua&#39;s niche is in embedded systems and as en extension language (as some other users mentioned the gaming industry).  </p>

<p>Industries: So, although being a general-purpose language (web frameworks and database connectivity libraries are there) it has very defined uses and industry domains where is mostly used. This makes it very specific to the task, so industry knowledge is always expected from Lua developers.  </p>

<p>Scarcity: There are simply less Lua developers than Python and this is pure economics, what&#39;s harder to get, be it product, service, or talent, will tend to be more expensive, just because of the scarceness of it.</p>

<p>Availability: There are considerably less learning resources on Lua if you compare with Python. The community is smaller and this adds to the factor that are less people wanting to jump out the university and start coding Lua (unless in robotics, gaming, embedded systems). Most developers go API, Web, AI (all these are domains in which Python excels).</p>

<p>I&#39;ve been using both of these beautiful languages for +15 years. My 2c.</p>
</div>",1676839234.0,,False,j97dhx9,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j97dhx9/,1,False,3,False,1150m78,lua,t5_2qjla
245,NakeleKantoo,"If I had to guess it would be demand is high and there aren't that many lua devs in the wild, but obviously I'm wrong and someone will have a definitive answer","<div class=""md""><p>If I had to guess it would be demand is high and there aren&#39;t that many lua devs in the wild, but obviously I&#39;m wrong and someone will have a definitive answer</p>
</div>",1676676808.0,,False,j8z0akp,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8z0akp/,0,False,2,False,1150m78,lua,t5_2qjla
246,DryScarcity8454,How are APL devs getting paid? What do they even develop?,"<div class=""md""><p>How are APL devs getting paid? What do they even develop?</p>
</div>",1676680300.0,,False,j8z7yan,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8z7yan/,0,False,2,False,1150m78,lua,t5_2qjla
247,Efficient-Biscotti66,"Hi there! well, by the looks of it, I am late again. hahaha. well, lua is simple. and used in 'Shiva3D' and godot and love2d and lots of other compilers and software. best is that ,there is not much to learn. and new. best of luck. with your JV's...","<div class=""md""><p>Hi there! well, by the looks of it, I am late again. hahaha. well, lua is simple. and used in &#39;Shiva3D&#39; and godot and love2d and lots of other compilers and software. best is that ,there is not much to learn. and new. best of luck. with your JV&#39;s...</p>
</div>",1678078385.0,,False,jb3pvl0,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/jb3pvl0/,1,False,2,False,1150m78,lua,t5_2qjla
248,idbrii,"Lua is used a lot in games (World of Warcraft, Garry's Mod, Don't Starve, Hades, Factorio, ...). Game programmers aren't paid as well as finance or Big Tech, but in my experience game studios pay better than a lot of other software jobs.","<div class=""md""><p>Lua is used a lot in games (World of Warcraft, Garry&#39;s Mod, Don&#39;t Starve, Hades, Factorio, ...). Game programmers aren&#39;t paid as well as finance or Big Tech, but in my experience game studios pay better than a lot of other software jobs.</p>
</div>",1676682806.0,,False,j8zda2q,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zda2q/,1,False,1,False,1150m78,lua,t5_2qjla
249,melance,Does any developer only develop in one language?  I don't see how you can get accurate data for how much you make on a single language because that's not how a development job works.,"<div class=""md""><p>Does any developer only develop in one language?  I don&#39;t see how you can get accurate data for how much you make on a single language because that&#39;s not how a development job works.</p>
</div>",1676746236.0,,False,j92fvzr,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j92fvzr/,0,False,1,False,1150m78,lua,t5_2qjla
250,AlarmDozer,"Python devs are a dime a dozen so too with C# (because it’s just “Microsoft Java” in my mind), but Lua - that takes independent study so?","<div class=""md""><p>Python devs are a dime a dozen so too with C# (because it’s just “Microsoft Java” in my mind), but Lua - that takes independent study so?</p>
</div>",1676748624.0,,False,j92lnc6,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j92lnc6/,0,False,1,False,1150m78,lua,t5_2qjla
251,jax_gamer12145,"Probably because there are some softwares and games that use Lua and some people just like to ruin those softwares or games. For example is Roblox, some people can make cheats out of the game by making or BUYING scripts. They usually just sell it for a fair price and thousands maybe even millions of people buy these scripts and use it to cheat on games as possible. Even FiveM or GameGuardian aint safe...","<div class=""md""><p>Probably because there are some softwares and games that use Lua and some people just like to ruin those softwares or games. For example is Roblox, some people can make cheats out of the game by making or BUYING scripts. They usually just sell it for a fair price and thousands maybe even millions of people buy these scripts and use it to cheat on games as possible. Even FiveM or GameGuardian aint safe...</p>
</div>",1677237544.0,,False,j9t5th3,False,t3_1150m78,t3_1150m78,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j9t5th3/,0,False,1,False,1150m78,lua,t5_2qjla
252,anadayloft,"Ah, focusing on the C API would make this chart a little more sensible for sure.

Personally, I would categorize that as developing in C! After all, there's basically no point in using the C API unless your C code is going to be more performant than Lua (JIT!) would be.","<div class=""md""><p>Ah, focusing on the C API would make this chart a little more sensible for sure.</p>

<p>Personally, I would categorize that as developing in C! After all, there&#39;s basically no point in using the C API unless your C code is going to be more performant than Lua (JIT!) would be.</p>
</div>",1676685048.0,,1676685353.0,j8zhuho,False,t3_1150m78,t1_j8zcjcp,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zhuho/,1,False,7,False,1150m78,lua,t5_2qjla
253,ServeThePatricians,"stack overflow developer survey 2022:

[https://survey.stackoverflow.co/2022/#section-top-paying-technologies-top-paying-technologies](https://survey.stackoverflow.co/2022/#section-top-paying-technologies-top-paying-technologies)

I'm learning Lua to use with GTAConnected and GMOD.

Was just surprising to see Lua Devs earning more than Assembly, Python, C#, C++, Javascript Devs and I'm curious as to why.

Also Lua was rated one of the most dreaded languages to work with. I wonder why because from what I keep reading is that it's a simple language to work with","<div class=""md""><p>stack overflow developer survey 2022:</p>

<p><a href=""https://survey.stackoverflow.co/2022/#section-top-paying-technologies-top-paying-technologies"">https://survey.stackoverflow.co/2022/#section-top-paying-technologies-top-paying-technologies</a></p>

<p>I&#39;m learning Lua to use with GTAConnected and GMOD.</p>

<p>Was just surprising to see Lua Devs earning more than Assembly, Python, C#, C++, Javascript Devs and I&#39;m curious as to why.</p>

<p>Also Lua was rated one of the most dreaded languages to work with. I wonder why because from what I keep reading is that it&#39;s a simple language to work with</p>
</div>",1676677133.0,,1676677614.0,j8z10g8,True,t3_1150m78,t1_j8yzip2,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8z10g8/,3,False,2,False,1150m78,lua,t5_2qjla
254,inolikey0u,"Honestly same though, I've been doing this for years just as a hobby because I simply love modifying games. I want an 80k salary to write what I'd normally write for fun.","<div class=""md""><p>Honestly same though, I&#39;ve been doing this for years just as a hobby because I simply love modifying games. I want an 80k salary to write what I&#39;d normally write for fun.</p>
</div>",1676684959.0,,False,j8zho2f,False,t3_1150m78,t1_j8zfcqu,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zho2f/,2,False,1,False,1150m78,lua,t5_2qjla
255,arkt8,"Yes, it is a pleasure to write Lua scripts, but it is only the tip of Iceberg that can be accomplished with Lua... and if you see for what they are paying perhaps it is more complex than a hobby project. They usually are integrating Lua in cars, science projects and other devices so engineers will not need to learn C, Haskell etc. just pick up Lua in one hour.","<div class=""md""><p>Yes, it is a pleasure to write Lua scripts, but it is only the tip of Iceberg that can be accomplished with Lua... and if you see for what they are paying perhaps it is more complex than a hobby project. They usually are integrating Lua in cars, science projects and other devices so engineers will not need to learn C, Haskell etc. just pick up Lua in one hour.</p>
</div>",1676732942.0,,False,j91jw4u,False,t3_1150m78,t1_j8zfcqu,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j91jw4u/,0,False,1,False,1150m78,lua,t5_2qjla
256,ServeThePatricians,"interesting.

i thought python was used for that?","<div class=""md""><p>interesting.</p>

<p>i thought python was used for that?</p>
</div>",1676685821.0,,False,j8zjf1e,True,t3_1150m78,t1_j8zchje,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zjf1e/,1,False,2,False,1150m78,lua,t5_2qjla
257,ServeThePatricians,"> Lua has been heavily used in the petroleum industry

for what?","<div class=""md""><blockquote>
<p>Lua has been heavily used in the petroleum industry</p>
</blockquote>

<p>for what?</p>
</div>",1676739376.0,,False,j91z28d,True,t3_1150m78,t1_j91xpmx,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j91z28d/,0,False,2,False,1150m78,lua,t5_2qjla
258,ServeThePatricians,thanks for the 2 cents,"<div class=""md""><p>thanks for the 2 cents</p>
</div>",1676847064.0,,False,j97vz90,True,t3_1150m78,t1_j97dhx9,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j97vz90/,0,False,1,False,1150m78,lua,t5_2qjla
259,ServeThePatricians,JV's?,"<div class=""md""><p>JV&#39;s?</p>
</div>",1678079890.0,,False,jb3sbzk,True,t3_1150m78,t1_jb3pvl0,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/jb3sbzk/,1,False,1,False,1150m78,lua,t5_2qjla
260,ServeThePatricians,"if that was the case, C++ salaries would be higher","<div class=""md""><p>if that was the case, C++ salaries would be higher</p>
</div>",1676685519.0,,False,j8ziszq,True,t3_1150m78,t1_j8zda2q,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8ziszq/,1,False,2,False,1150m78,lua,t5_2qjla
261,arkt8,"No... your assumptions  are too much simplistic.

Think that not every code is targeting Lua 5.1 or some features of 5.2 (where someone can use Luajit). Also some may prefer to embed the pure Lua instead of Luajit.

Even the FFI of Luajit doesn't give the same power of a pure C binding. Also to write a Lua C module as a simple binding is a design mistake because you take no advantage of the generators/iterators and other Lua goodies that can be designed via C Api to be expressive on Lua side (as to write a Lua script should be simple even for non programmers, as you can see with the amount of game modders)

Also write using C or Lua is not only about CPU performance. There are people today using Lua for 8 and 16 bits processors for the most diverse kind of embedded systems, from cameras, digital tv systems, scientific research devices and even special systems for radioactive environments with special processors not only desktop, servers and mobile.

Lua is the perfect scripting companion to C due to its minimalism and low requirements. Also programming with C Api cannot be simply categorized as C programming as it needs the knowledge of internals of a completely different language and way of think (the Lua C stack, userdata, garbage collection via __gc, __close metamethods etc)","<div class=""md""><p>No... your assumptions  are too much simplistic.</p>

<p>Think that not every code is targeting Lua 5.1 or some features of 5.2 (where someone can use Luajit). Also some may prefer to embed the pure Lua instead of Luajit.</p>

<p>Even the FFI of Luajit doesn&#39;t give the same power of a pure C binding. Also to write a Lua C module as a simple binding is a design mistake because you take no advantage of the generators/iterators and other Lua goodies that can be designed via C Api to be expressive on Lua side (as to write a Lua script should be simple even for non programmers, as you can see with the amount of game modders)</p>

<p>Also write using C or Lua is not only about CPU performance. There are people today using Lua for 8 and 16 bits processors for the most diverse kind of embedded systems, from cameras, digital tv systems, scientific research devices and even special systems for radioactive environments with special processors not only desktop, servers and mobile.</p>

<p>Lua is the perfect scripting companion to C due to its minimalism and low requirements. Also programming with C Api cannot be simply categorized as C programming as it needs the knowledge of internals of a completely different language and way of think (the Lua C stack, userdata, garbage collection via __gc, __close metamethods etc)</p>
</div>",1676731994.0,,1676732196.0,j91hskn,False,t3_1150m78,t1_j8zhuho,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j91hskn/,1,False,5,False,1150m78,lua,t5_2qjla
262,arkt8,"By dread understand:

1. people expect a huge standard library with near duplicate functions for everything. In Lua the standard library is very small, and you left to choose 3rd part modules (that are plenty) or write your own.

----
2. People acostumed with object oriented programming for everything... yes they can't sleep without a private property or a class extending their pillow. Lua can acomplish OO programming and prototypical programming via tables and metamethods.

----
3. People cry, setting off their hairs as with the world would end with an array that  doesn't starts at index 0, just because they are acostumed with the majority of languages derivated from C. The idea of arrays starting with 1 has properties very interesting, as you can invert the signal and understand the array as its inverse, also length is exactly the same number of last index.

----
4. Due to its long versioning, outsiders think of it as a staled language, prefering the buzz of languages that launch a new sugar almost every month...

Don't be fooled by the appearances.","<div class=""md""><p>By dread understand:</p>

<ol>
<li>people expect a huge standard library with near duplicate functions for everything. In Lua the standard library is very small, and you left to choose 3rd part modules (that are plenty) or write your own.</li>
</ol>

<hr/>

<ol>
<li>People acostumed with object oriented programming for everything... yes they can&#39;t sleep without a private property or a class extending their pillow. Lua can acomplish OO programming and prototypical programming via tables and metamethods.</li>
</ol>

<hr/>

<ol>
<li>People cry, setting off their hairs as with the world would end with an array that  doesn&#39;t starts at index 0, just because they are acostumed with the majority of languages derivated from C. The idea of arrays starting with 1 has properties very interesting, as you can invert the signal and understand the array as its inverse, also length is exactly the same number of last index.</li>
</ol>

<hr/>

<ol>
<li>Due to its long versioning, outsiders think of it as a staled language, prefering the buzz of languages that launch a new sugar almost every month...</li>
</ol>

<p>Don&#39;t be fooled by the appearances.</p>
</div>",1676683128.0,,1676732492.0,j8zdy13,False,t3_1150m78,t1_j8z10g8,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zdy13/,2,False,10,False,1150m78,lua,t5_2qjla
263,Spellsweaver,"I have a few ideas.

1. Smaller selection causing higher deviation.
2. Differences in distribution not accounted for: for example, salary differs a lot between countries.
3. Online polls being as trustworthy as usual.","<div class=""md""><p>I have a few ideas.</p>

<ol>
<li>Smaller selection causing higher deviation.</li>
<li>Differences in distribution not accounted for: for example, salary differs a lot between countries.</li>
<li>Online polls being as trustworthy as usual.</li>
</ol>
</div>",1676681355.0,,False,j8za8b2,False,t3_1150m78,t1_j8z10g8,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8za8b2/,0,False,2,False,1150m78,lua,t5_2qjla
264,mtbdork,Q-Sys developers. It’s a lot more than just coding though.,"<div class=""md""><p>Q-Sys developers. It’s a lot more than just coding though.</p>
</div>",1676731680.0,,False,j91h477,False,t3_1150m78,t1_j8z10g8,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j91h477/,0,False,1,False,1150m78,lua,t5_2qjla
265,anadayloft,"Right?! Lua is the language I use whenever I'm programming for *pleasure*. Sure, it's effective or whatever, but I use it primarily because it's a joy to work with 😄","<div class=""md""><p>Right?! Lua is the language I use whenever I&#39;m programming for <em>pleasure</em>. Sure, it&#39;s effective or whatever, but I use it primarily because it&#39;s a joy to work with 😄</p>
</div>",1676685747.0,,False,j8zj9o2,False,t3_1150m78,t1_j8zho2f,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zj9o2/,1,False,2,False,1150m78,lua,t5_2qjla
266,ServeThePatricians,what games do you modify with lua?,"<div class=""md""><p>what games do you modify with lua?</p>
</div>",1676685576.0,,False,j8zix51,True,t3_1150m78,t1_j8zho2f,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zix51/,1,False,1,False,1150m78,lua,t5_2qjla
267,ramjithunder24,luatorch?,"<div class=""md""><p>luatorch?</p>
</div>",1676738540.0,,False,j91x0c2,False,t3_1150m78,t1_j8zjf1e,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j91x0c2/,1,False,1,False,1150m78,lua,t5_2qjla
268,Efficient-Biscotti66,JV = joint venture...,"<div class=""md""><p>JV = joint venture...</p>
</div>",1678673322.0,,False,jc08n48,False,t3_1150m78,t1_jb3sbzk,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/jc08n48/,0,False,1,False,1150m78,lua,t5_2qjla
269,idbrii,"There's a huge market for C++. It's often used when another language may be more appropriate. And a big market means more competition for jobs. Likely there are very high and very low paying jobs for C++.

Lua is typically used for embedding in other systems (like games), so the market is smaller. If only high paying jobs use Lua, then the mean/median will be higher. However, I wouldn't expect a game programmer to be hired for their Lua skills (their C++ is likely more important and can learn Lua on the job).","<div class=""md""><p>There&#39;s a huge market for C++. It&#39;s often used when another language may be more appropriate. And a big market means more competition for jobs. Likely there are very high and very low paying jobs for C++.</p>

<p>Lua is typically used for embedding in other systems (like games), so the market is smaller. If only high paying jobs use Lua, then the mean/median will be higher. However, I wouldn&#39;t expect a game programmer to be hired for their Lua skills (their C++ is likely more important and can learn Lua on the job).</p>
</div>",1676688919.0,,False,j8zpmui,False,t3_1150m78,t1_j8ziszq,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zpmui/,0,False,1,False,1150m78,lua,t5_2qjla
270,anadayloft,"Yeah, I mean, I get that. I've done some of that too (though nothing radioactive lol). But the Lua side of it seems so much simpler to me that it's barely worth mentioning. To me, it feels like the heavy lifting and difficult work resides primarily in the *other* language. Sure, you need to know what's going on in Lua too, but what's going on in Lua is relatively simple!

As for the differences between Lua versions, I barely notice them as I switch between. Occasionally, I'll just open the docs to check something—and it's all very well documented 🤷‍♀️","<div class=""md""><p>Yeah, I mean, I get that. I&#39;ve done some of that too (though nothing radioactive lol). But the Lua side of it seems so much simpler to me that it&#39;s barely worth mentioning. To me, it feels like the heavy lifting and difficult work resides primarily in the <em>other</em> language. Sure, you need to know what&#39;s going on in Lua too, but what&#39;s going on in Lua is relatively simple!</p>

<p>As for the differences between Lua versions, I barely notice them as I switch between. Occasionally, I&#39;ll just open the docs to check something—and it&#39;s all very well documented 🤷‍♀️</p>
</div>",1676735478.0,,False,j91ppxs,False,t3_1150m78,t1_j91hskn,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j91ppxs/,0,False,1,False,1150m78,lua,t5_2qjla
271,,"It could also be dreaded because Lua is easy to write in, which means there is a lot of Lua code out there written by people who don't know how to write good code, which means there is a lot of bad Lua code out there.

This doesn't tell you anything about what it's like to use Lua on a new codebase, or what it's like to work on a codebase written by people who are good at Lua.","<div class=""md""><p>It could also be dreaded because Lua is easy to write in, which means there is a lot of Lua code out there written by people who don&#39;t know how to write good code, which means there is a lot of bad Lua code out there.</p>

<p>This doesn&#39;t tell you anything about what it&#39;s like to use Lua on a new codebase, or what it&#39;s like to work on a codebase written by people who are good at Lua.</p>
</div>",1676761911.0,,False,j93fov6,False,t3_1150m78,t1_j8zdy13,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j93fov6/,0,False,2,False,1150m78,lua,t5_2qjla
272,grimmwerks,Curious - as a lot of this sounds like Director’s Lingo language from 20 years ago - is there any examples you know of for Lua class inheritance?,"<div class=""md""><p>Curious - as a lot of this sounds like Director’s Lingo language from 20 years ago - is there any examples you know of for Lua class inheritance?</p>
</div>",1676732125.0,,False,j91i2yl,False,t3_1150m78,t1_j8zdy13,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j91i2yl/,1,False,1,False,1150m78,lua,t5_2qjla
273,inolikey0u,"Same I personally love the challenges of Lua I use writing in Lua like someone would a sodoku puzzle, keeps the mind sharp","<div class=""md""><p>Same I personally love the challenges of Lua I use writing in Lua like someone would a sodoku puzzle, keeps the mind sharp</p>
</div>",1676685885.0,,False,j8zjjli,False,t3_1150m78,t1_j8zj9o2,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zjjli/,0,False,1,False,1150m78,lua,t5_2qjla
274,inolikey0u,"A lot of games, mostly gta and red dead online","<div class=""md""><p>A lot of games, mostly gta and red dead online</p>
</div>",1676685941.0,,False,j8zjnlj,False,t3_1150m78,t1_j8zix51,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zjnlj/,1,False,1,False,1150m78,lua,t5_2qjla
275,,"pytorch replaced luatorch many years ago.

Which is really too bad; it's much worse.","<div class=""md""><p>pytorch replaced luatorch many years ago.</p>

<p>Which is really too bad; it&#39;s much worse.</p>
</div>",1676761811.0,,False,j93fgwv,False,t3_1150m78,t1_j91x0c2,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j93fgwv/,1,False,1,False,1150m78,lua,t5_2qjla
276,arkt8,"Imagine a class implemented as a Lua table:

    local parent = {
      sign = '...',
      show = function(self, msg)
        print(self.sign
           .. msg
           .. self.sign
        )
      end
    }
    
    
    local a = { sign = '|||' }
    local b = { sign = '///' }
    local c = {}
    local mt = {__index = parent }
    setmetatable(a, mt)
    setmetatable(b, mt)
    setmetatable(c, mt)

    a:show('hi')
    b:show('hello')
    c:show('ops')

will result:

    |||hi|||
    ///hello///
    ...ops...

It is the tip of iceberg. Take a look at:

[Inheritance Tutorial](http://lua-users.org/wiki/InheritanceTutorial)
and 

[Multiple Inheritance](http://lua-users.org/wiki/MultipleInheritanceClasses)

In the book Programming In Lua (PIL) and [Lua users](http://lua-users.org) there is a lot of discussions and different implementation details that can be acomplished.","<div class=""md""><p>Imagine a class implemented as a Lua table:</p>

<pre><code>local parent = {
  sign = &#39;...&#39;,
  show = function(self, msg)
    print(self.sign
       .. msg
       .. self.sign
    )
  end
}


local a = { sign = &#39;|||&#39; }
local b = { sign = &#39;///&#39; }
local c = {}
local mt = {__index = parent }
setmetatable(a, mt)
setmetatable(b, mt)
setmetatable(c, mt)

a:show(&#39;hi&#39;)
b:show(&#39;hello&#39;)
c:show(&#39;ops&#39;)
</code></pre>

<p>will result:</p>

<pre><code>|||hi|||
///hello///
...ops...
</code></pre>

<p>It is the tip of iceberg. Take a look at:</p>

<p><a href=""http://lua-users.org/wiki/InheritanceTutorial"">Inheritance Tutorial</a>
and </p>

<p><a href=""http://lua-users.org/wiki/MultipleInheritanceClasses"">Multiple Inheritance</a></p>

<p>In the book Programming In Lua (PIL) and <a href=""http://lua-users.org"">Lua users</a> there is a lot of discussions and different implementation details that can be acomplished.</p>
</div>",1676743197.0,,1676744070.0,j928i5j,False,t3_1150m78,t1_j91i2yl,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j928i5j/,1,False,2,False,1150m78,lua,t5_2qjla
277,ServeThePatricians,redm and fivem?,"<div class=""md""><p>redm and fivem?</p>
</div>",1676687339.0,,False,j8zmgrx,True,t3_1150m78,t1_j8zjnlj,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zmgrx/,1,False,1,False,1150m78,lua,t5_2qjla
278,isCosmos,"
I'm guessing both call the same C library?","<div class=""md""><p>I&#39;m guessing both call the same C library?</p>
</div>",1677090880.0,,False,j9ktp20,False,t3_1150m78,t1_j93fgwv,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j9ktp20/,0,False,1,False,1150m78,lua,t5_2qjla
279,grimmwerks,Thanks very much; appreciate it.  Will pick up the book,"<div class=""md""><p>Thanks very much; appreciate it.  Will pick up the book</p>
</div>",1676744047.0,,False,j92ak2a,False,t3_1150m78,t1_j928i5j,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j92ak2a/,1,False,1,False,1150m78,lua,t5_2qjla
280,inolikey0u,Yes,"<div class=""md""><p>Yes</p>
</div>",1676687428.0,,False,j8zmn7t,False,t3_1150m78,t1_j8zmgrx,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j8zmn7t/,0,False,1,False,1150m78,lua,t5_2qjla
281,arkt8,"Take a look at these...

- [Inheritance Tutorial](http://lua-users.org/wiki/InheritanceTutorial)
- [Multiple Inheritance](http://lua-users.org/wiki/MultipleInheritanceClasses)","<div class=""md""><p>Take a look at these...</p>

<ul>
<li><a href=""http://lua-users.org/wiki/InheritanceTutorial"">Inheritance Tutorial</a></li>
<li><a href=""http://lua-users.org/wiki/MultipleInheritanceClasses"">Multiple Inheritance</a></li>
</ul>
</div>",1676744171.0,,False,j92autg,False,t3_1150m78,t1_j92ak2a,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j92autg/,1,False,2,False,1150m78,lua,t5_2qjla
282,grimmwerks,Again; thanks. Been trying to do some Roblox scripting with my kids but for some reason Lua is just weird to me.  It’s reminiscent of stuff I did in the 90s but not from the more ECMA stuff I did later.,"<div class=""md""><p>Again; thanks. Been trying to do some Roblox scripting with my kids but for some reason Lua is just weird to me.  It’s reminiscent of stuff I did in the 90s but not from the more ECMA stuff I did later.</p>
</div>",1676745390.0,,False,j92dte3,False,t3_1150m78,t1_j92autg,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j92dte3/,1,False,1,False,1150m78,lua,t5_2qjla
283,ShreksHellraiser,You can also take advantage of Lua's scoping rules involving locals to do another style of OOP. https://paulwatt526.github.io/wattageTileEngineDocs/luaOopPrimer.html,"<div class=""md""><p>You can also take advantage of Lua&#39;s scoping rules involving locals to do another style of OOP. <a href=""https://paulwatt526.github.io/wattageTileEngineDocs/luaOopPrimer.html"">https://paulwatt526.github.io/wattageTileEngineDocs/luaOopPrimer.html</a></p>
</div>",1676753448.0,,False,j92wumn,False,t3_1150m78,t1_j92dte3,/r/lua/comments/1150m78/lua_devs_get_paid_more_than_c_and_python_why/j92wumn/,0,False,1,False,1150m78,lua,t5_2qjla
284,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1461924496.0,,1507501789.0,d2lw7m4,False,t3_4gy3ij,t3_4gy3ij,/r/lua/comments/4gy3ij/haxe_gains_lua_target/d2lw7m4/,1,False,3,False,4gy3ij,lua,t5_2qjla
285,,Isn't Lua way easier to learn and use than Haxe?,"<div class=""md""><p>Isn&#39;t Lua way easier to learn and use than Haxe?</p>
</div>",1461944644.0,,1461945401.0,d2m6gjo,False,t3_4gy3ij,t1_d2lw7m4,/r/lua/comments/4gy3ij/haxe_gains_lua_target/d2m6gjo/,1,False,4,False,4gy3ij,lua,t5_2qjla
286,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1461945899.0,,1507501786.0,d2m7e56,False,t3_4gy3ij,t1_d2m6gjo,/r/lua/comments/4gy3ij/haxe_gains_lua_target/d2m7e56/,1,False,4,False,4gy3ij,lua,t5_2qjla
287,,"If you're going to compile from a static language to Lua, you could do a lot better than Go; it's a type system doesn't even catch the most common type error (nils).","<div class=""md""><p>If you&#39;re going to compile from a static language to Lua, you could do a lot better than Go; it&#39;s a type system doesn&#39;t even catch the most common type error (nils).</p>
</div>",1461975857.0,,False,d2ms4ry,False,t3_4gy3ij,t1_d2m7e56,/r/lua/comments/4gy3ij/haxe_gains_lua_target/d2ms4ry/,0,False,3,False,4gy3ij,lua,t5_2qjla
288,dacodemasta,Soooo soon we can run Minecraft in computercraft/opencomputers in Minecraft in computercraft/opencomputers in Minecraft in computercraft/opencomputers in Minecraft in....,"<div class=""md""><p>Soooo soon we can run Minecraft in computercraft/opencomputers in Minecraft in computercraft/opencomputers in Minecraft in computercraft/opencomputers in Minecraft in....</p>
</div>",1584378277.0,,False,fko1j89,False,t3_fjhvrw,t3_fjhvrw,/r/lua/comments/fjhvrw/i_made_a_jvm_java_virtual_machine_on_lua_in_2/fko1j89/,0,False,8,False,fjhvrw,lua,t5_2qjla
289,godsolio2,It's a talent idea and deal. Good project! Are there Roadmaps for it?,"<div class=""md""><p>It&#39;s a talent idea and deal. Good project! Are there Roadmaps for it?</p>
</div>",1584409340.0,,False,fkpg41x,False,t3_fjhvrw,t3_fjhvrw,/r/lua/comments/fjhvrw/i_made_a_jvm_java_virtual_machine_on_lua_in_2/fkpg41x/,1,False,1,False,fjhvrw,lua,t5_2qjla
290,FLZ_HackerTNT112,"yall are on crack around here

why would the thought of running minecraft in opencomputers even cross any normal person's mind","<div class=""md""><p>yall are on crack around here</p>

<p>why would the thought of running minecraft in opencomputers even cross any normal person&#39;s mind</p>
</div>",1672099048.0,,False,j1s6v2v,False,t3_fjhvrw,t3_fjhvrw,/r/lua/comments/fjhvrw/i_made_a_jvm_java_virtual_machine_on_lua_in_2/j1s6v2v/,0,False,1,False,fjhvrw,lua,t5_2qjla
291,zenith391,"Yes there's a roadmap I'll publish soon.

For now my highest priority is to use a decent standard library (I'm looking towards GNU Classpath)

From that point i'll continue to implement math opcodes, implement throwables and finish the Java -> Lua JIT.","<div class=""md""><p>Yes there&#39;s a roadmap I&#39;ll publish soon.</p>

<p>For now my highest priority is to use a decent standard library (I&#39;m looking towards GNU Classpath)</p>

<p>From that point i&#39;ll continue to implement math opcodes, implement throwables and finish the Java -&gt; Lua JIT.</p>
</div>",1584432921.0,,False,fkq6rqn,True,t3_fjhvrw,t1_fkpg41x,/r/lua/comments/fjhvrw/i_made_a_jvm_java_virtual_machine_on_lua_in_2/fkq6rqn/,1,False,1,False,fjhvrw,lua,t5_2qjla
292,godsolio2,Any tech blog for the project or any explaination for the implemntation? I'm curious about that! :),"<div class=""md""><p>Any tech blog for the project or any explaination for the implemntation? I&#39;m curious about that! :)</p>
</div>",1584435249.0,,False,fkq8ltd,False,t3_fjhvrw,t1_fkq6rqn,/r/lua/comments/fjhvrw/i_made_a_jvm_java_virtual_machine_on_lua_in_2/fkq8ltd/,1,False,1,False,fjhvrw,lua,t5_2qjla
293,zenith391,"Didn’t spoke about it on a blog, however i think i’ll put explanation somewhere (maybe on github wiki)","<div class=""md""><p>Didn’t spoke about it on a blog, however i think i’ll put explanation somewhere (maybe on github wiki)</p>
</div>",1584437143.0,,False,fkqa1l7,True,t3_fjhvrw,t1_fkq8ltd,/r/lua/comments/fjhvrw/i_made_a_jvm_java_virtual_machine_on_lua_in_2/fkqa1l7/,0,False,1,False,fjhvrw,lua,t5_2qjla
294,,How is this different from lua-static?,"<div class=""md""><p>How is this different from lua-static?</p>
</div>",1673891607.0,,False,j4m1bp0,False,t3_10d0ij6,t3_10d0ij6,/r/lua/comments/10d0ij6/combustion_compile_any_lua_project_into_an/j4m1bp0/,1,False,3,False,10d0ij6,lua,t5_2qjla
295,Frityet5,"Lua static only works with 
1.	only Lua interpreters which have the same API as PUC lua
2.	lua static can only include statically linked c modules, not .so like what LuaRocks installs

The difficulty of using C modules from luarocks in lua static is what made me make this project","<div class=""md""><p>Lua static only works with 
1.  only Lua interpreters which have the same API as PUC lua
2.  lua static can only include statically linked c modules, not .so like what LuaRocks installs</p>

<p>The difficulty of using C modules from luarocks in lua static is what made me make this project</p>
</div>",1673891876.0,,False,j4m22ir,True,t3_10d0ij6,t1_j4m1bp0,/r/lua/comments/10d0ij6/combustion_compile_any_lua_project_into_an/j4m22ir/,1,False,7,False,10d0ij6,lua,t5_2qjla
296,,Cool; you should mention this in the readme.,"<div class=""md""><p>Cool; you should mention this in the readme.</p>
</div>",1673899552.0,,False,j4mmp3o,False,t3_10d0ij6,t1_j4m22ir,/r/lua/comments/10d0ij6/combustion_compile_any_lua_project_into_an/j4mmp3o/,1,False,3,False,10d0ij6,lua,t5_2qjla
297,Frityet5,"Willl do, thanks!","<div class=""md""><p>Willl do, thanks!</p>
</div>",1673904061.0,,False,j4myqcf,True,t3_10d0ij6,t1_j4mmp3o,/r/lua/comments/10d0ij6/combustion_compile_any_lua_project_into_an/j4myqcf/,0,False,2,False,10d0ij6,lua,t5_2qjla
298,st3f-ping,Is this a library for lua or a library for löve2d?,"<div class=""md""><p>Is this a library for lua or a library for löve2d?</p>
</div>",1596193738.0,,False,fzun2lo,False,t3_i11n4g,t3_i11n4g,/r/lua/comments/i11n4g/open_source_drawing_library_written_in_lua/fzun2lo/,1,False,4,False,i11n4g,lua,t5_2qjla
299,__arthure,Source code : [https://github.com/arthurealike/turtle.lua](https://github.com/arthurealike/turtle.lua),"<div class=""md""><p>Source code : <a href=""https://github.com/arthurealike/turtle.lua"">https://github.com/arthurealike/turtle.lua</a></p>
</div>",1596171858.0,,False,fztzti2,True,t3_i11n4g,t3_i11n4g,/r/lua/comments/i11n4g/open_source_drawing_library_written_in_lua/fztzti2/,0,False,1,False,i11n4g,lua,t5_2qjla
300,__arthure,It is library that written in lua and it needs love2d to run because it uses love's built-in functions to draw.,"<div class=""md""><p>It is library that written in lua and it needs love2d to run because it uses love&#39;s built-in functions to draw.</p>
</div>",1596198109.0,,False,fzusbbf,True,t3_i11n4g,t1_fzun2lo,/r/lua/comments/i11n4g/open_source_drawing_library_written_in_lua/fzusbbf/,1,False,5,False,i11n4g,lua,t5_2qjla
301,,Mentioning this in the title would be helpful; thanks.,"<div class=""md""><p>Mentioning this in the title would be helpful; thanks.</p>
</div>",1596223579.0,,False,fzwikl2,False,t3_i11n4g,t1_fzusbbf,/r/lua/comments/i11n4g/open_source_drawing_library_written_in_lua/fzwikl2/,1,False,3,False,i11n4g,lua,t5_2qjla
302,__arthure,Thanks for advice!,"<div class=""md""><p>Thanks for advice!</p>
</div>",1596243752.0,,False,fzxu24p,True,t3_i11n4g,t1_fzwikl2,/r/lua/comments/i11n4g/open_source_drawing_library_written_in_lua/fzxu24p/,0,False,1,False,i11n4g,lua,t5_2qjla
303,13141314Dankeee,Does this come with data structures,"<div class=""md""><p>Does this come with data structures</p>
</div>",1630851274.0,,False,hbosz5y,False,t3_pidcez,t3_pidcez,/r/lua/comments/pidcez/if_youre_interested_in_learning_lua_or_maybe_want/hbosz5y/,1,False,1,False,pidcez,lua,t5_2qjla
304,NetsuDagneel,"Only the basics are here, but we do cover tables (arrays) :)","<div class=""md""><p>Only the basics are here, but we do cover tables (arrays) :)</p>
</div>",1630852296.0,,False,hbov6ib,True,t3_pidcez,t1_hbosz5y,/r/lua/comments/pidcez/if_youre_interested_in_learning_lua_or_maybe_want/hbov6ib/,1,False,2,False,pidcez,lua,t5_2qjla
305,lambda_abstraction,"I may be completely out to lunch here, but unless you're doing weird data abstraction via closures, aren't tables your only native aggregate data type?
If so, then learning about data structures is a matter of learning how to represent them with Lua tables.  For instance, [here's](https://i.imgur.com/dvObNyN.png) a representation for shared library dependencies done via Lua tables.","<div class=""md""><p>I may be completely out to lunch here, but unless you&#39;re doing weird data abstraction via closures, aren&#39;t tables your only native aggregate data type?
If so, then learning about data structures is a matter of learning how to represent them with Lua tables.  For instance, <a href=""https://i.imgur.com/dvObNyN.png"">here&#39;s</a> a representation for shared library dependencies done via Lua tables.</p>
</div>",1630943065.0,,False,hbtio92,False,t3_pidcez,t1_hbov6ib,/r/lua/comments/pidcez/if_youre_interested_in_learning_lua_or_maybe_want/hbtio92/,0,False,1,False,pidcez,lua,t5_2qjla
306,Thorinori,"It is called a Closure, Lua knows when you are making these and retains the state variable (in this case i) inside of the closure since the function that it returned still relies on it.","<div class=""md""><p>It is called a Closure, Lua knows when you are making these and retains the state variable (in this case i) inside of the closure since the function that it returned still relies on it.</p>
</div>",1669249822.0,,False,ixjzicn,False,t3_z355m9,t3_z355m9,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixjzicn/,1,False,38,False,z355m9,lua,t5_2qjla
307,heyheyhey27,"These are called ""closures"", and you can think of them as a shorthand for an object. Like you could imagine rewriting this as an object with a field `i`, plus a regular old function which takes the object and increments its `i` field.","<div class=""md""><p>These are called &quot;closures&quot;, and you can think of them as a shorthand for an object. Like you could imagine rewriting this as an object with a field <code>i</code>, plus a regular old function which takes the object and increments its <code>i</code> field.</p>
</div>",1669251416.0,,False,ixk2tyy,False,t3_z355m9,t3_z355m9,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixk2tyy/,0,False,9,False,z355m9,lua,t5_2qjla
308,soundslogical,"Each time `newCounter()` is called, you create a new anonymous function, each with its own variable `i`, which is initialized to zero. When `c1` or `c2` is called, you're calling an instance of that returned anonymous function, you're not somehow re-calling `newCounter()`.","<div class=""md""><p>Each time <code>newCounter()</code> is called, you create a new anonymous function, each with its own variable <code>i</code>, which is initialized to zero. When <code>c1</code> or <code>c2</code> is called, you&#39;re calling an instance of that returned anonymous function, you&#39;re not somehow re-calling <code>newCounter()</code>.</p>
</div>",1669281618.0,,False,ixlgffs,False,t3_z355m9,t3_z355m9,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixlgffs/,0,False,8,False,z355m9,lua,t5_2qjla
309,heyheyhey27,"The code only runs `newCounter()` once, so it could only set up one instance of `i = 0`. If you call the function again it will set up a new instance of `i` initialized to 0, and returns a second copy of the inner function, which works with that second copy of `i`.","<div class=""md""><p>The code only runs <code>newCounter()</code> once, so it could only set up one instance of <code>i = 0</code>. If you call the function again it will set up a new instance of <code>i</code> initialized to 0, and returns a second copy of the inner function, which works with that second copy of <code>i</code>.</p>
</div>",1669251308.0,,False,ixk2m6x,False,t3_z355m9,t3_z355m9,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixk2m6x/,0,False,5,False,z355m9,lua,t5_2qjla
310,Tritonio,"newCounter is called only once, and the i=0 line is the first line of that function so it will only execute once in this example.","<div class=""md""><p>newCounter is called only once, and the i=0 line is the first line of that function so it will only execute once in this example.</p>
</div>",1669292956.0,,False,ixltxbc,False,t3_z355m9,t3_z355m9,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixltxbc/,0,False,2,False,z355m9,lua,t5_2qjla
311,TwilCynder,"Lua's function are just using the Functional paradigm. A function is :
- a sequence of instructions with parameters (what you usually think of when we talk about functions)
- a closure, which is a set of variables, that existed when the function was defined, and are referenced by the function. The function keep them with it, but they do not belong to the function, so they aren't affected by the function just being called. But the function can still changed their value. 

Here inside the code of newCounter, there is a local variable called i, then a function definition; this function references i, so i becomes part of the function's closure : even after we got out of newCounter(), the second function still exists (since it was returned), so i keeps living in the closure of the returned function (in this specific case, i is in the closure of only one function, so that function is the only thing that can access i after we leave it's home local range (the code of newCounter())). As long as the second function exists, it will be able to change i's value and read it, but i is still an outside variable even if referenced by the closure of the function, so it is not reset when called the function.","<div class=""md""><p>Lua&#39;s function are just using the Functional paradigm. A function is :
- a sequence of instructions with parameters (what you usually think of when we talk about functions)
- a closure, which is a set of variables, that existed when the function was defined, and are referenced by the function. The function keep them with it, but they do not belong to the function, so they aren&#39;t affected by the function just being called. But the function can still changed their value. </p>

<p>Here inside the code of newCounter, there is a local variable called i, then a function definition; this function references i, so i becomes part of the function&#39;s closure : even after we got out of newCounter(), the second function still exists (since it was returned), so i keeps living in the closure of the returned function (in this specific case, i is in the closure of only one function, so that function is the only thing that can access i after we leave it&#39;s home local range (the code of newCounter())). As long as the second function exists, it will be able to change i&#39;s value and read it, but i is still an outside variable even if referenced by the closure of the function, so it is not reset when called the function.</p>
</div>",1669306893.0,,False,ixml6e1,False,t3_z355m9,t3_z355m9,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixml6e1/,0,False,2,False,z355m9,lua,t5_2qjla
312,ikarius3,Google closure / lexical scope,"<div class=""md""><p>Google closure / lexical scope</p>
</div>",1669317835.0,,False,ixnarga,False,t3_z355m9,t3_z355m9,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixnarga/,0,False,1,False,z355m9,lua,t5_2qjla
313,N0tH1tl3r_V2,Lua allows you to use 200iq techniques,"<div class=""md""><p>Lua allows you to use 200iq techniques</p>
</div>",1669318854.0,,False,ixnd08l,False,t3_z355m9,t3_z355m9,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixnd08l/,0,False,1,False,z355m9,lua,t5_2qjla
314,xoner2,"Answered already, but see also: ""closure class poor man""","<div class=""md""><p>Answered already, but see also: &quot;closure class poor man&quot;</p>
</div>",1669368203.0,,False,ixpq86w,False,t3_z355m9,t3_z355m9,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixpq86w/,0,False,1,False,z355m9,lua,t5_2qjla
315,MeLikeFishTTV,I see. Thanks a lot for the explanation! :),"<div class=""md""><p>I see. Thanks a lot for the explanation! :)</p>
</div>",1669250103.0,,False,ixk03lb,True,t3_z355m9,t1_ixjzicn,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixk03lb/,2,False,11,False,z355m9,lua,t5_2qjla
316,,"The other important point is that every time newCounter is called it gets a new local ""i"". Normally when you leave the function, everything forgets about that ""i"".  However, the function created within newCounter has a reference to it: it needs to remember that piece of memory known as i.

The function returned remembers that for itself only, and everyone else forgets. That's why each counter has its own unique value it can increment without being affected by any other counter.","<div class=""md""><p>The other important point is that every time newCounter is called it gets a new local &quot;i&quot;. Normally when you leave the function, everything forgets about that &quot;i&quot;.  However, the function created within newCounter has a reference to it: it needs to remember that piece of memory known as i.</p>

<p>The function returned remembers that for itself only, and everyone else forgets. That&#39;s why each counter has its own unique value it can increment without being affected by any other counter.</p>
</div>",1669256238.0,,False,ixkcsp9,False,t3_z355m9,t1_ixk03lb,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixkcsp9/,0,False,4,False,z355m9,lua,t5_2qjla
317,Thorinori,"I should mention I believe I should have said relevant variable rather than state variable now that I think about it again. Same idea, just wrong word :P and no problem! Closures are cool but a bit weird to get used to.","<div class=""md""><p>I should mention I believe I should have said relevant variable rather than state variable now that I think about it again. Same idea, just wrong word :P and no problem! Closures are cool but a bit weird to get used to.</p>
</div>",1669250271.0,,False,ixk0gfr,False,t3_z355m9,t1_ixk03lb,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixk0gfr/,1,False,2,False,z355m9,lua,t5_2qjla
318,seaQueue,"You can simplify and just say ""closures capture state"" which in this case includes any local variables.","<div class=""md""><p>You can simplify and just say &quot;closures capture state&quot; which in this case includes any local variables.</p>
</div>",1669264266.0,,False,ixkrytg,False,t3_z355m9,t1_ixk0gfr,/r/lua/comments/z355m9/how_does_this_even_work_how_is_i_not_reset_to_0/ixkrytg/,0,False,6,False,z355m9,lua,t5_2qjla
319,,"Looks very nice, this should be in itch.io, also, I don't have steam. :S","<div class=""md""><p>Looks very nice, this should be in itch.io, also, I don&#39;t have steam. :S</p>
</div>",1621263604.0,,False,gyga41z,False,t3_nec9v7,t3_nec9v7,/r/lua/comments/nec9v7/i_open_sourced_a_game_i_just_released_that_was/gyga41z/,0,False,6,False,nec9v7,lua,t5_2qjla
320,Gunslinging_Gamer,That's great! A C++ open source engine for LUA games. Wish I had the time to explore both.,"<div class=""md""><p>That&#39;s great! A C++ open source engine for LUA games. Wish I had the time to explore both.</p>
</div>",1621264338.0,,False,gygbu4e,False,t3_nec9v7,t3_nec9v7,/r/lua/comments/nec9v7/i_open_sourced_a_game_i_just_released_that_was/gygbu4e/,0,False,2,False,nec9v7,lua,t5_2qjla
321,,"I saw your game earlier while looking up Lua projects, looks super cool!","<div class=""md""><p>I saw your game earlier while looking up Lua projects, looks super cool!</p>
</div>",1622086735.0,,False,gzliroj,False,t3_nec9v7,t3_nec9v7,/r/lua/comments/nec9v7/i_open_sourced_a_game_i_just_released_that_was/gzliroj/,0,False,1,False,nec9v7,lua,t5_2qjla
322,AutoModerator,"Hi! It looks like you've written ""LUA"". Lua is not an acronym (or an initialism) - it is the Portuguese word for 'moon'. Fun fact: Lua was created in 1993 by Roberto Ierusalimschy, Luiz Henrique de Figueiredo and Waldemar Celes, members of the Computer Graphics Technology Group (Tecgraf) at the Pontifical Catholic University of Rio de Janeiro, in Brazil.

*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/lua) if you have any questions or concerns.*","<div class=""md""><p>Hi! It looks like you&#39;ve written &quot;LUA&quot;. Lua is not an acronym (or an initialism) - it is the Portuguese word for &#39;moon&#39;. Fun fact: Lua was created in 1993 by Roberto Ierusalimschy, Luiz Henrique de Figueiredo and Waldemar Celes, members of the Computer Graphics Technology Group (Tecgraf) at the Pontifical Catholic University of Rio de Janeiro, in Brazil.</p>

<p><em>I am a bot, and this action was performed automatically. Please <a href=""/message/compose/?to=/r/lua"">contact the moderators of this subreddit</a> if you have any questions or concerns.</em></p>
</div>",1589439816.0,moderator,False,fqky4wp,False,t3_gjha4f,t3_gjha4f,/r/lua/comments/gjha4f/my_first_project_on_lua_using_love_to_create_a/fqky4wp/,0,False,13,False,gjha4f,lua,t5_2qjla
323,FelipeMarcelino,"It is my first project using lua. 

The code is here: [https://github.com/FelipeMarcelino/lua-2048](https://github.com/FelipeMarcelino/lua-2048)

I would like to receive some feedback about the code developed. Any feedback is going to be excellent for my improvement in that language.","<div class=""md""><p>It is my first project using lua. </p>

<p>The code is here: <a href=""https://github.com/FelipeMarcelino/lua-2048"">https://github.com/FelipeMarcelino/lua-2048</a></p>

<p>I would like to receive some feedback about the code developed. Any feedback is going to be excellent for my improvement in that language.</p>
</div>",1589440067.0,,False,fqkyery,True,t3_gjha4f,t3_gjha4f,/r/lua/comments/gjha4f/my_first_project_on_lua_using_love_to_create_a/fqkyery/,1,False,5,False,gjha4f,lua,t5_2qjla
324,DarkWiiPlayer,HJKL-Movement = 💙,"<div class=""md""><p>HJKL-Movement = 💙</p>
</div>",1589444085.0,,False,fql2lxh,False,t3_gjha4f,t3_gjha4f,/r/lua/comments/gjha4f/my_first_project_on_lua_using_love_to_create_a/fql2lxh/,0,False,3,False,gjha4f,lua,t5_2qjla
325,Jazqa,Simple interpolation for the movement would improve it a lot.,"<div class=""md""><p>Simple interpolation for the movement would improve it a lot.</p>
</div>",1589451442.0,,False,fql9xv5,False,t3_gjha4f,t3_gjha4f,/r/lua/comments/gjha4f/my_first_project_on_lua_using_love_to_create_a/fql9xv5/,1,False,1,False,gjha4f,lua,t5_2qjla
326,KerbalSpark,"Nice work! I also played with this concept of gameplay. I use the Lua on the Instead Engine: [http://instead-games.ru/game.php?ID=263](http://instead-games.ru/game.php?ID=263)

[http://instead-games.ru/games/screenshots/s\_20170706235258402.png](http://instead-games.ru/games/screenshots/s_20170706235258402.png)","<div class=""md""><p>Nice work! I also played with this concept of gameplay. I use the Lua on the Instead Engine: <a href=""http://instead-games.ru/game.php?ID=263"">http://instead-games.ru/game.php?ID=263</a></p>

<p><a href=""http://instead-games.ru/games/screenshots/s_20170706235258402.png"">http://instead-games.ru/games/screenshots/s_20170706235258402.png</a></p>
</div>",1589451805.0,,False,fqlab0d,False,t3_gjha4f,t3_gjha4f,/r/lua/comments/gjha4f/my_first_project_on_lua_using_love_to_create_a/fqlab0d/,0,False,1,False,gjha4f,lua,t5_2qjla
327,premek_v,"It looks good. Maybe next thing to explore how to add animations?
And if you want feedback about some specific parts it would be easier for people if you post short snippets of code here maybe","<div class=""md""><p>It looks good. Maybe next thing to explore how to add animations?
And if you want feedback about some specific parts it would be easier for people if you post short snippets of code here maybe</p>
</div>",1589441302.0,,False,fqkzpx4,False,t3_gjha4f,t1_fqkyery,/r/lua/comments/gjha4f/my_first_project_on_lua_using_love_to_create_a/fqkzpx4/,0,False,2,False,gjha4f,lua,t5_2qjla
328,FelipeMarcelino,Can you elaborate more for me?,"<div class=""md""><p>Can you elaborate more for me?</p>
</div>",1589466197.0,,False,fqluaeh,True,t3_gjha4f,t1_fql9xv5,/r/lua/comments/gjha4f/my_first_project_on_lua_using_love_to_create_a/fqluaeh/,1,False,1,False,gjha4f,lua,t5_2qjla
329,Jazqa,"Instead of setting the position of a tile from point A to point B, you could interpolate the movement so the tiles ”slide” to their new position.","<div class=""md""><p>Instead of setting the position of a tile from point A to point B, you could interpolate the movement so the tiles ”slide” to their new position.</p>
</div>",1589467927.0,,False,fqlxmil,False,t3_gjha4f,t1_fqluaeh,/r/lua/comments/gjha4f/my_first_project_on_lua_using_love_to_create_a/fqlxmil/,0,False,2,False,gjha4f,lua,t5_2qjla
330,,"At first I was like ""yikes; this has 18kloc of C"" and then I was like ""wait lol no that includes all the source to PUC Lua itself; the actual amount of C is 1kloc.""

Also notable that this is by the same author as Lume, one of my favorite Lua libraries: https://github.com/rxi/lume","<div class=""md""><p>At first I was like &quot;yikes; this has 18kloc of C&quot; and then I was like &quot;wait lol no that includes all the source to PUC Lua itself; the actual amount of C is 1kloc.&quot;</p>

<p>Also notable that this is by the same author as Lume, one of my favorite Lua libraries: <a href=""https://github.com/rxi/lume"">https://github.com/rxi/lume</a></p>
</div>",1589049026.0,,False,fq1tdi8,False,t3_ggiigl,t3_ggiigl,/r/lua/comments/ggiigl/lite_a_lightweight_text_editor_written_in_lua/fq1tdi8/,1,False,10,False,ggiigl,lua,t5_2qjla
331,HowManySmall,This is actually incredible. I finally have an editor that fully supports my custom language while not being ugly as sin.,"<div class=""md""><p>This is actually incredible. I finally have an editor that fully supports my custom language while not being ugly as sin.</p>
</div>",1589048755.0,,False,fq1sq5n,False,t3_ggiigl,t3_ggiigl,/r/lua/comments/ggiigl/lite_a_lightweight_text_editor_written_in_lua/fq1sq5n/,1,False,7,False,ggiigl,lua,t5_2qjla
332,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1589600372.0,,False,fqs7no3,False,t3_ggiigl,t3_ggiigl,/r/lua/comments/ggiigl/lite_a_lightweight_text_editor_written_in_lua/fqs7no3/,1,False,2,False,ggiigl,lua,t5_2qjla
333,lazyfocker,"Also check out textadept.


https://foicica.com/textadept/","<div class=""md""><p>Also check out textadept.</p>

<p><a href=""https://foicica.com/textadept/"">https://foicica.com/textadept/</a></p>
</div>",1594077396.0,,False,fx5fbu3,False,t3_ggiigl,t3_ggiigl,/r/lua/comments/ggiigl/lite_a_lightweight_text_editor_written_in_lua/fx5fbu3/,0,False,1,False,ggiigl,lua,t5_2qjla
334,zcam,"The code is also very clean/readable, the approach for rendering quite refreshing (https://news.ycombinator.com/item?id=23127158), plus lua (writing plugins in fennel! ), I am interested. 
I never thought I'd even consider an alternative to emacs as daily driver, but  with time lite could become that. I love emacs but I really dislike elisp. 

With equivalents of paredit, expand region, a nrepl client, lsp client, plus emacs like keybindings I'd be happy and most of these are relatively easy to write in lua, or already available as libraries. 
Then I'd probably still rely on magit. 

Exciting times.","<div class=""md""><p>The code is also very clean/readable, the approach for rendering quite refreshing (<a href=""https://news.ycombinator.com/item?id=23127158"">https://news.ycombinator.com/item?id=23127158</a>), plus lua (writing plugins in fennel! ), I am interested. 
I never thought I&#39;d even consider an alternative to emacs as daily driver, but  with time lite could become that. I love emacs but I really dislike elisp. </p>

<p>With equivalents of paredit, expand region, a nrepl client, lsp client, plus emacs like keybindings I&#39;d be happy and most of these are relatively easy to write in lua, or already available as libraries. 
Then I&#39;d probably still rely on magit. </p>

<p>Exciting times.</p>
</div>",1589115550.0,,1589117801.0,fq5rmfv,False,t3_ggiigl,t1_fq1tdi8,/r/lua/comments/ggiigl/lite_a_lightweight_text_editor_written_in_lua/fq5rmfv/,0,False,3,False,ggiigl,lua,t5_2qjla
335,QXJtaW5pdXM,"How do other editors not fully support Lua?
Curious question cause, I quickly glanced into it and I felt like, it’s just another editor, or there wasn’t anything particularly convincing to use it.

That said, I’m super pumped to try it out in a few hours when I’m at my desk. Simply because I haven’t seen many text editors popping up on this :)","<div class=""md""><p>How do other editors not fully support Lua?
Curious question cause, I quickly glanced into it and I felt like, it’s just another editor, or there wasn’t anything particularly convincing to use it.</p>

<p>That said, I’m super pumped to try it out in a few hours when I’m at my desk. Simply because I haven’t seen many text editors popping up on this :)</p>
</div>",1589049082.0,,False,fq1thud,False,t3_ggiigl,t1_fq1sq5n,/r/lua/comments/ggiigl/lite_a_lightweight_text_editor_written_in_lua/fq1thud/,1,False,2,False,ggiigl,lua,t5_2qjla
336,rxi,Yep! Every change I made since I released lite and every addition I made to the lite-plugins repo were written in lite. The idea was to use it as soon as possible so I could get an idea of what features it needed based on what I was annoyed with not having.,"<div class=""md""><p>Yep! Every change I made since I released lite and every addition I made to the lite-plugins repo were written in lite. The idea was to use it as soon as possible so I could get an idea of what features it needed based on what I was annoyed with not having.</p>
</div>",1589616639.0,,False,fqsrucv,True,t3_ggiigl,t1_fqs7no3,/r/lua/comments/ggiigl/lite_a_lightweight_text_editor_written_in_lua/fqsrucv/,0,False,5,False,ggiigl,lua,t5_2qjla
337,HowManySmall,"It's actually a custom language that compiles to Lua/Luau (Roblox Lua) and it follows similar syntax to C with Lua aspects. This editor also allows making plugins in Lua, which I feel much more comfortable with than VSCode's TypeScript or Sublime Text 3's Python.

I meant fully support as in full language syntax highlighting, which VSCode can only do partially.","<div class=""md""><p>It&#39;s actually a custom language that compiles to Lua/Luau (Roblox Lua) and it follows similar syntax to C with Lua aspects. This editor also allows making plugins in Lua, which I feel much more comfortable with than VSCode&#39;s TypeScript or Sublime Text 3&#39;s Python.</p>

<p>I meant fully support as in full language syntax highlighting, which VSCode can only do partially.</p>
</div>",1589050661.0,,False,fq1x4v9,False,t3_ggiigl,t1_fq1thud,/r/lua/comments/ggiigl/lite_a_lightweight_text_editor_written_in_lua/fq1x4v9/,0,False,3,False,ggiigl,lua,t5_2qjla
338,Ferib,Didn't know Lua was used in coffee machines lol. Anyone knows a machine using Lua? can't wait to reverse engineer it and brew my coffee using lua script,"<div class=""md""><p>Didn&#39;t know Lua was used in coffee machines lol. Anyone knows a machine using Lua? can&#39;t wait to reverse engineer it and brew my coffee using lua script</p>
</div>",1658875240.0,,False,ihrzuo8,False,t3_w8wgqb,t3_w8wgqb,/r/lua/comments/w8wgqb/complete_interview_with_roberto_ierusalimschy/ihrzuo8/,0,False,9,False,w8wgqb,lua,t5_2qjla
339,xoner2,Maybe post this to r/programming,"<div class=""md""><p>Maybe post this to <a href=""/r/programming"">r/programming</a></p>
</div>",1658935462.0,,False,ihv21yq,False,t3_w8wgqb,t3_w8wgqb,/r/lua/comments/w8wgqb/complete_interview_with_roberto_ierusalimschy/ihv21yq/,0,False,5,False,w8wgqb,lua,t5_2qjla
340,badhombrez,The article is a bit cringey :/,"<div class=""md""><p>The article is a bit cringey :/</p>
</div>",1613146154.0,,False,gn2k1wa,False,t3_li7a26,t3_li7a26,/r/lua/comments/li7a26/interesting_little_medium_article_on_lite_the_new/gn2k1wa/,2,False,8,False,li7a26,lua,t5_2qjla
341,WrongAndBeligerent,"A lua text editor and an article shitting on bloatware? Sounds good to me, finally some real programming stuff. 

Also, how i maek roblux string????","<div class=""md""><p>A lua text editor and an article shitting on bloatware? Sounds good to me, finally some real programming stuff. </p>

<p>Also, how i maek roblux string????</p>
</div>",1613138564.0,,False,gn24dwe,False,t3_li7a26,t3_li7a26,/r/lua/comments/li7a26/interesting_little_medium_article_on_lite_the_new/gn24dwe/,0,False,9,False,li7a26,lua,t5_2qjla
342,sigzero,"Lite gives me an SLD2.dll error on Windows 10. <shrug>

Edit: I opened an issue.","<div class=""md""><p>Lite gives me an SLD2.dll error on Windows 10. &lt;shrug&gt;</p>

<p>Edit: I opened an issue.</p>
</div>",1613170847.0,,1613171112.0,gn42ilx,False,t3_li7a26,t3_li7a26,/r/lua/comments/li7a26/interesting_little_medium_article_on_lite_the_new/gn42ilx/,0,False,1,False,li7a26,lua,t5_2qjla
343,EricTboneJackson,"Big time. 

> **Like most of the die-hard programmers**, about 13 years ago, I initially used Microsoft Notepad as a code editor. [..] In 2017, **like any other modern programmer**, I installed Visual Studio Code.

\*facepalm\*","<div class=""md""><p>Big time. </p>

<blockquote>
<p><strong>Like most of the die-hard programmers</strong>, about 13 years ago, I initially used Microsoft Notepad as a code editor. [..] In 2017, <strong>like any other modern programmer</strong>, I installed Visual Studio Code.</p>
</blockquote>

<p>*facepalm*</p>
</div>",1613152745.0,,False,gn2z7rx,False,t3_li7a26,t1_gn2k1wa,/r/lua/comments/li7a26/interesting_little_medium_article_on_lite_the_new/gn2z7rx/,0,False,14,False,li7a26,lua,t5_2qjla
344,,It's a medium article.,"<div class=""md""><p>It&#39;s a medium article.</p>
</div>",1613153817.0,,False,gn31ok0,False,t3_li7a26,t1_gn2k1wa,/r/lua/comments/li7a26/interesting_little_medium_article_on_lite_the_new/gn31ok0/,0,False,4,False,li7a26,lua,t5_2qjla
345,mordnis,"I guess this is a relevant reply from maintainer: 
https://github.com/LuaJIT/LuaJIT/issues/665#issuecomment-784452583","<div class=""md""><p>I guess this is a relevant reply from maintainer: 
<a href=""https://github.com/LuaJIT/LuaJIT/issues/665#issuecomment-784452583"">https://github.com/LuaJIT/LuaJIT/issues/665#issuecomment-784452583</a></p>
</div>",1643536649.0,,False,huu3fkr,False,t3_sg3ddt,t3_sg3ddt,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/huu3fkr/,1,False,18,False,sg3ddt,lua,t5_2qjla
346,s4b3r6,"Officially, LuaJIT hasn't had a new release in 4 years, and will only backport some select features. You can basically only rely on Lua 5.1 features.

openresty's [LuaJIT2](https://github.com/openresty/LuaJIT2/) has, and makes, regular releases (the last one was less than a month ago), and closely tracks development, including the extensions beyond Lua 5.1.","<div class=""md""><p>Officially, LuaJIT hasn&#39;t had a new release in 4 years, and will only backport some select features. You can basically only rely on Lua 5.1 features.</p>

<p>openresty&#39;s <a href=""https://github.com/openresty/LuaJIT2/"">LuaJIT2</a> has, and makes, regular releases (the last one was less than a month ago), and closely tracks development, including the extensions beyond Lua 5.1.</p>
</div>",1643529727.0,,False,hutueyj,False,t3_sg3ddt,t3_sg3ddt,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/hutueyj/,0,False,8,False,sg3ddt,lua,t5_2qjla
347,PhilipRoman,LuaJIT itself is unlikely to ever support anything from 5.3 because having 64 bit integers breaks some optimizations that it uses internally.,"<div class=""md""><p>LuaJIT itself is unlikely to ever support anything from 5.3 because having 64 bit integers breaks some optimizations that it uses internally.</p>
</div>",1643528614.0,,False,hutsxz3,False,t3_sg3ddt,t3_sg3ddt,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/hutsxz3/,3,False,4,False,sg3ddt,lua,t5_2qjla
348,ewmailing,"A slight digression, but since you said you haven't done anything with Lua in a few years and wanted 5.3 features, you might be in the position of writing new code. 

If so, you might take a look at [Pallene: A statically typed companion language for Lua](http://www.inf.puc-rio.br/~roberto/docs/pallene-sblp.pdf). Pallene is basically a Lua sister language that adds a simple type system with the purpose of being able to do AOT compilation for performance. Pallene is designed to interoperate with Lua so you can still use regular Lua for those things you don't want to write in Pallene. Its goals hope to achieve many of the same benefits LuaJIT provides, but using more conventional AOT compiler techniques, and being able to work with latest PUC-Rio Lua (with all its new features).

Pallene is still just an experimental research project, but there is enough done that it is possible to write full programs. The [Github repo is here](https://github.com/pallene-lang/pallene).
If you really want Lua 5.3 and 5.4 features while getting improved performance, I think Pallene may get you there before LuaJIT gets there.","<div class=""md""><p>A slight digression, but since you said you haven&#39;t done anything with Lua in a few years and wanted 5.3 features, you might be in the position of writing new code. </p>

<p>If so, you might take a look at <a href=""http://www.inf.puc-rio.br/%7Eroberto/docs/pallene-sblp.pdf"">Pallene: A statically typed companion language for Lua</a>. Pallene is basically a Lua sister language that adds a simple type system with the purpose of being able to do AOT compilation for performance. Pallene is designed to interoperate with Lua so you can still use regular Lua for those things you don&#39;t want to write in Pallene. Its goals hope to achieve many of the same benefits LuaJIT provides, but using more conventional AOT compiler techniques, and being able to work with latest PUC-Rio Lua (with all its new features).</p>

<p>Pallene is still just an experimental research project, but there is enough done that it is possible to write full programs. The <a href=""https://github.com/pallene-lang/pallene"">Github repo is here</a>.
If you really want Lua 5.3 and 5.4 features while getting improved performance, I think Pallene may get you there before LuaJIT gets there.</p>
</div>",1643569284.0,,False,huvxw5g,False,t3_sg3ddt,t3_sg3ddt,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/huvxw5g/,0,False,3,False,sg3ddt,lua,t5_2qjla
349,moonshineTheleocat,"LuaJit hasn't seen updates in years. Theres LuaJIT2, but I don't know its feature support 

Theres also Luau, which is Roblox's modifications which introduces optional static typing and optimizations bringing Performance extremely close to LuaJit without being JIT. Its features includes some items from 5.3. Its primarily optimized for games, so vector math is improved but its also sandbox for security. Its available on github with MIT license","<div class=""md""><p>LuaJit hasn&#39;t seen updates in years. Theres LuaJIT2, but I don&#39;t know its feature support </p>

<p>Theres also Luau, which is Roblox&#39;s modifications which introduces optional static typing and optimizations bringing Performance extremely close to LuaJit without being JIT. Its features includes some items from 5.3. Its primarily optimized for games, so vector math is improved but its also sandbox for security. Its available on github with MIT license</p>
</div>",1643575636.0,,1643575902.0,huweni1,False,t3_sg3ddt,t3_sg3ddt,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/huweni1/,1,False,2,False,sg3ddt,lua,t5_2qjla
350,lambda_abstraction,Mike's indifference to matters of community confidence is more than a bit frustrating.,"<div class=""md""><p>Mike&#39;s indifference to matters of community confidence is more than a bit frustrating.</p>
</div>",1643577119.0,,False,huwipff,False,t3_sg3ddt,t1_huu3fkr,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/huwipff/,0,False,6,False,sg3ddt,lua,t5_2qjla
351,lambda_abstraction,"If I remember correctly, what passes for a numeric tower in more recent Lua is one of the things that angered Mike Pall.

Also didn't he get a touch annoyed with the change in handling of environments?","<div class=""md""><p>If I remember correctly, what passes for a numeric tower in more recent Lua is one of the things that angered Mike Pall.</p>

<p>Also didn&#39;t he get a touch annoyed with the change in handling of environments?</p>
</div>",1643576796.0,,1643577453.0,huwhtss,False,t3_sg3ddt,t1_hutsxz3,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/huwhtss/,0,False,2,False,sg3ddt,lua,t5_2qjla
352,TomatoCo,"However, with FFI it's possible to use 64 bit integers! Here's an example I wrote forever ago implementing fnv1a hashing. I never got around to testing if it gave the right numbers, but it worked well enough for generating unique numbers!

    local ffi = require('ffi')
    
    -- this is for a little-endian system. swap the lo and hi if big endian. x86 and arm are little endian, so don't swap them. like, ever.
    ffi.cdef[[
    typedef union
    {
        uint64_t val;
        struct
        {
            uint32_t lo;
            uint32_t hi;
        } parts;
    } splitNum;
    ]]

    local t = ffi.new(""splitNum"") -- just a temp variable.
    
    local FNV_PRIME = ffi.new(""splitNum"")
    FNV_PRIME.parts.lo = 0x000001b3
    FNV_PRIME.parts.hi = 0x00000100
    
    local FNV_OFFSET = ffi.new(""splitNum"")
    FNV_OFFSET.parts.lo = 0x84222325 
    FNV_OFFSET.parts.hi = 0xcbf29ce4
    
    local function hash(inp)
        local s = tostring(inp)
        t.val = FNV_OFFSET.val
        for i=1,#s do
            t.parts.lo = bit.bxor(t.parts.lo, string.byte(s,i))
            t.val = t.val * FNV_PRIME
        end
        return t.val
    end

Basically the only downside is that it's a little more verbose to set up and bitwise operations are more verbose and can only work on one half of the number at a time.","<div class=""md""><p>However, with FFI it&#39;s possible to use 64 bit integers! Here&#39;s an example I wrote forever ago implementing fnv1a hashing. I never got around to testing if it gave the right numbers, but it worked well enough for generating unique numbers!</p>

<pre><code>local ffi = require(&#39;ffi&#39;)

-- this is for a little-endian system. swap the lo and hi if big endian. x86 and arm are little endian, so don&#39;t swap them. like, ever.
ffi.cdef[[
typedef union
{
    uint64_t val;
    struct
    {
        uint32_t lo;
        uint32_t hi;
    } parts;
} splitNum;
]]

local t = ffi.new(&quot;splitNum&quot;) -- just a temp variable.

local FNV_PRIME = ffi.new(&quot;splitNum&quot;)
FNV_PRIME.parts.lo = 0x000001b3
FNV_PRIME.parts.hi = 0x00000100

local FNV_OFFSET = ffi.new(&quot;splitNum&quot;)
FNV_OFFSET.parts.lo = 0x84222325 
FNV_OFFSET.parts.hi = 0xcbf29ce4

local function hash(inp)
    local s = tostring(inp)
    t.val = FNV_OFFSET.val
    for i=1,#s do
        t.parts.lo = bit.bxor(t.parts.lo, string.byte(s,i))
        t.val = t.val * FNV_PRIME
    end
    return t.val
end
</code></pre>

<p>Basically the only downside is that it&#39;s a little more verbose to set up and bitwise operations are more verbose and can only work on one half of the number at a time.</p>
</div>",1643557776.0,,False,huv3wti,False,t3_sg3ddt,t1_hutsxz3,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/huv3wti/,1,False,1,False,sg3ddt,lua,t5_2qjla
353,,"it seems to have table.move which was introduced in 5.3, the integer thing is irrelevant. it could be using 8bit integers and should still support the same functionality. though it does lack utf8 support (and a lot of other things).","<div class=""md""><p>it seems to have table.move which was introduced in 5.3, the integer thing is irrelevant. it could be using 8bit integers and should still support the same functionality. though it does lack utf8 support (and a lot of other things).</p>
</div>",1643558077.0,,1643558709.0,huv4obj,False,t3_sg3ddt,t1_hutsxz3,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/huv4obj/,1,False,1,False,sg3ddt,lua,t5_2qjla
354,guywithknife,">LuaJit hasn't seen updates in years.

The last LuaJIT update was 24 days ago (so 3 days before you wrote your comment): [https://github.com/LuaJIT/LuaJIT/commit/1d7b5029c5ba36870d25c67524034d452b761d27](https://github.com/LuaJIT/LuaJIT/commit/1d7b5029c5ba36870d25c67524034d452b761d27)

There hasn't, however, been a *release* in years. You basically have to just use head of the 2.1 branch.

LuaJIT2's latest commit was a month ago, so, it too is reasonably active, although I also don't know what its feature support is like.

>Performance extremely close to LuaJit without being JIT

Slight correction: close to the LuaJIT *interpreter* (which is one of the faster interpreters out there, so that's pretty fast), not the LuaJIT JIT compiler. Or at least, its not clear that they mean the JIT compiler, since they say interpreter. From the Luau website:

>Luau currently does not implement Just-In-Time compilation, but **its interpreter can be competitive with** ***LuaJIT interpreter*** depending on the program. We continue to optimize the runtime and rewrite portions of it to be even more efficient.

Reading their page on documentation, they do seem to do a lot of cool things to make it fast. For one, their compiler optimizes heavily before passing anything to the interpreter, so a lot of inefficiencies can be removed in advance. They also have a fast custom memory allocator and a fast custom garbage collector. Sounds like a pretty cool piece of tech!","<div class=""md""><blockquote>
<p>LuaJit hasn&#39;t seen updates in years.</p>
</blockquote>

<p>The last LuaJIT update was 24 days ago (so 3 days before you wrote your comment): <a href=""https://github.com/LuaJIT/LuaJIT/commit/1d7b5029c5ba36870d25c67524034d452b761d27"">https://github.com/LuaJIT/LuaJIT/commit/1d7b5029c5ba36870d25c67524034d452b761d27</a></p>

<p>There hasn&#39;t, however, been a <em>release</em> in years. You basically have to just use head of the 2.1 branch.</p>

<p>LuaJIT2&#39;s latest commit was a month ago, so, it too is reasonably active, although I also don&#39;t know what its feature support is like.</p>

<blockquote>
<p>Performance extremely close to LuaJit without being JIT</p>
</blockquote>

<p>Slight correction: close to the LuaJIT <em>interpreter</em> (which is one of the faster interpreters out there, so that&#39;s pretty fast), not the LuaJIT JIT compiler. Or at least, its not clear that they mean the JIT compiler, since they say interpreter. From the Luau website:</p>

<blockquote>
<p>Luau currently does not implement Just-In-Time compilation, but <strong>its interpreter can be competitive with</strong> <strong><em>LuaJIT interpreter</em></strong> depending on the program. We continue to optimize the runtime and rewrite portions of it to be even more efficient.</p>
</blockquote>

<p>Reading their page on documentation, they do seem to do a lot of cool things to make it fast. For one, their compiler optimizes heavily before passing anything to the interpreter, so a lot of inefficiencies can be removed in advance. They also have a fast custom memory allocator and a fast custom garbage collector. Sounds like a pretty cool piece of tech!</p>
</div>",1645402143.0,,1645402409.0,hxrpj9n,False,t3_sg3ddt,t1_huweni1,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/hxrpj9n/,0,False,1,False,sg3ddt,lua,t5_2qjla
355,lambda_abstraction,"Actually, LL and ULL are types (well CDATAs) in LuaJIT.  They just don't have much arithmetic defined for them.","<div class=""md""><p>Actually, LL and ULL are types (well CDATAs) in LuaJIT.  They just don&#39;t have much arithmetic defined for them.</p>
</div>",1643577317.0,,False,huwj93j,False,t3_sg3ddt,t1_huv3wti,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/huwj93j/,0,False,1,False,sg3ddt,lua,t5_2qjla
356,,"IIRC the utf8 stuff is easy to add in without it being included in the runtime itself, tho of course it'd be preferable if you could assume its presence.","<div class=""md""><p>IIRC the utf8 stuff is easy to add in without it being included in the runtime itself, tho of course it&#39;d be preferable if you could assume its presence.</p>
</div>",1643571737.0,,False,huw4c2o,False,t3_sg3ddt,t1_huv4obj,/r/lua/comments/sg3ddt/whats_the_state_of_luajit_these_days/huw4c2o/,0,False,1,False,sg3ddt,lua,t5_2qjla
357,ws-ilazki,"[Previous discussion of Nelua on this sub](https://www.reddit.com/r/lua/comments/jq5c33/the_nelua_programming_language_what_do_you_guys/).

I think it's an interesting idea in the abstract, in the same way Crystal's a Ruby-like native language, but Nelua's missing *so much* that would make it actually feel like a ""Lua-like"" language, like not having tables, and no concept of a module system.  Some of this is ""not yet implemented"" while others are omitted by design.

Not having tables or first-class functions means only the simplest programs will actually be Lua-like in behaviour, because those two things are the foundation for just about everything else Lua does.  No tables-as-namespaces, no functions in tables as ""methods"" so no tables-as-OOP, no functional programming, etc.

Nelua is ""lua-like"" in the same sense that Javascript is ""C-like"":  the syntax looks similar but that's about it.  Syntax is the least interesting part of a programming language, though, so that's not good enough. I know that sounds negative, but it's because I *like* the idea of it; I just think the goal is wrong and going to cripple it.  The author doesn't seem to want a native-code Lua-like language, he wants a way to write C programs with an embedded Lua and be able to use Lua-like syntax for both parts of it.","<div class=""md""><p><a href=""https://www.reddit.com/r/lua/comments/jq5c33/the_nelua_programming_language_what_do_you_guys/"">Previous discussion of Nelua on this sub</a>.</p>

<p>I think it&#39;s an interesting idea in the abstract, in the same way Crystal&#39;s a Ruby-like native language, but Nelua&#39;s missing <em>so much</em> that would make it actually feel like a &quot;Lua-like&quot; language, like not having tables, and no concept of a module system.  Some of this is &quot;not yet implemented&quot; while others are omitted by design.</p>

<p>Not having tables or first-class functions means only the simplest programs will actually be Lua-like in behaviour, because those two things are the foundation for just about everything else Lua does.  No tables-as-namespaces, no functions in tables as &quot;methods&quot; so no tables-as-OOP, no functional programming, etc.</p>

<p>Nelua is &quot;lua-like&quot; in the same sense that Javascript is &quot;C-like&quot;:  the syntax looks similar but that&#39;s about it.  Syntax is the least interesting part of a programming language, though, so that&#39;s not good enough. I know that sounds negative, but it&#39;s because I <em>like</em> the idea of it; I just think the goal is wrong and going to cripple it.  The author doesn&#39;t seem to want a native-code Lua-like language, he wants a way to write C programs with an embedded Lua and be able to use Lua-like syntax for both parts of it.</p>
</div>",1607686045.0,,False,gfdsat3,False,t3_kb0bgr,t3_kb0bgr,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfdsat3/,1,False,16,False,kb0bgr,lua,t5_2qjla
358,suhcoR,"Looks nice. Do you have a PDF version of the manual?

> Nelua cannot load code generated at runtime

You could integrate TCC (https://github.com/TinyCC/tinycc) to achieve that if need be.","<div class=""md""><p>Looks nice. Do you have a PDF version of the manual?</p>

<blockquote>
<p>Nelua cannot load code generated at runtime</p>
</blockquote>

<p>You could integrate TCC (<a href=""https://github.com/TinyCC/tinycc"">https://github.com/TinyCC/tinycc</a>) to achieve that if need be.</p>
</div>",1607682870.0,,False,gfdp6op,False,t3_kb0bgr,t3_kb0bgr,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfdp6op/,1,False,2,False,kb0bgr,lua,t5_2qjla
359,WrongAndBeligerent,I think any chance to change lua's syntax should start by shortening the function keyword.,"<div class=""md""><p>I think any chance to change lua&#39;s syntax should start by shortening the function keyword.</p>
</div>",1607698112.0,,False,gfe93s9,False,t3_kb0bgr,t3_kb0bgr,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfe93s9/,0,False,-2,False,kb0bgr,lua,t5_2qjla
360,dlannan68,Is there any discussion on compatibility? It would be good to know how much lua script we could bring across if it was a viable replacement.,"<div class=""md""><p>Is there any discussion on compatibility? It would be good to know how much lua script we could bring across if it was a viable replacement.</p>
</div>",1607724457.0,,False,gfg6yac,False,t3_kb0bgr,t3_kb0bgr,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfg6yac/,1,False,1,False,kb0bgr,lua,t5_2qjla
361,suhcoR,"True. Looks like there are now a couple of such languages (e.g. Pallene is yet another one) which only cover a subset of Lua. Crystal is rather impressive, but the compiler is too slow.","<div class=""md""><p>True. Looks like there are now a couple of such languages (e.g. Pallene is yet another one) which only cover a subset of Lua. Crystal is rather impressive, but the compiler is too slow.</p>
</div>",1607686451.0,,False,gfdspsy,False,t3_kb0bgr,t1_gfdsat3,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfdspsy/,1,False,2,False,kb0bgr,lua,t5_2qjla
362,GPhykos,"I am not the developer behind Nelua, but I am pretty sure there is a PDF of the manual somewhere in the website.

> You could integrate TCC (https://github.com/TinyCC/tinycc) to achieve that if need be.

Well I could, but I think TCC executables are kinda slow compared to the ones GCC produces.

Someone could write their own C compiler designed to be embeddable, but at the same time being faster than TCC (again, at producing executables).","<div class=""md""><p>I am not the developer behind Nelua, but I am pretty sure there is a PDF of the manual somewhere in the website.</p>

<blockquote>
<p>You could integrate TCC (<a href=""https://github.com/TinyCC/tinycc"">https://github.com/TinyCC/tinycc</a>) to achieve that if need be.</p>
</blockquote>

<p>Well I could, but I think TCC executables are kinda slow compared to the ones GCC produces.</p>

<p>Someone could write their own C compiler designed to be embeddable, but at the same time being faster than TCC (again, at producing executables).</p>
</div>",1607683214.0,,False,gfdpia8,True,t3_kb0bgr,t1_gfdp6op,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfdpia8/,1,False,1,False,kb0bgr,lua,t5_2qjla
363,ws-ilazki,"> It would be good to know how much lua script we could bring across if it was a viable replacement.

Not much.  There's a ""differences"" page that lists unimplemented, never-will-be-implemented, and implemented things and it looks like the goal is to duplicate Lua syntax and some of its small standard library.  Considering how little of a stdlib Lua *has*, and the fact that it isn't providing first-class functions (ever?) or tables (not yet?) this isn't particularly compelling as a way to write native Lua, since those two things define most of Lua's behaviour, even if it's not obvious at a glance (like Lua OOP).","<div class=""md""><blockquote>
<p>It would be good to know how much lua script we could bring across if it was a viable replacement.</p>
</blockquote>

<p>Not much.  There&#39;s a &quot;differences&quot; page that lists unimplemented, never-will-be-implemented, and implemented things and it looks like the goal is to duplicate Lua syntax and some of its small standard library.  Considering how little of a stdlib Lua <em>has</em>, and the fact that it isn&#39;t providing first-class functions (ever?) or tables (not yet?) this isn&#39;t particularly compelling as a way to write native Lua, since those two things define most of Lua&#39;s behaviour, even if it&#39;s not obvious at a glance (like Lua OOP).</p>
</div>",1607730650.0,,False,gfgm4oj,False,t3_kb0bgr,t1_gfg6yac,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfgm4oj/,0,False,1,False,kb0bgr,lua,t5_2qjla
364,ws-ilazki,"> Crystal is rather impressive, but the compiler is too slow.

Off-topic but I haven't checked in on Crystal in a while so I wasn't aware that was still an issue.  Though how slow is it, really?  People seem to be really forgiving of compile times  if they like the language enough. Look at all the hype around Rust, for example.

I'm too impatient for that, personally; I like OCaml specifically because its compile times are ridiculously fast *and* code can be run in an interpreter-style mode as well.  Between that and the type inference letting me omit signatures completely, I can write it like it's a dynamically-typed scripting language early on and then add signatures and start compiling it later.  

It's like my ideal personal-use language, though for quickie stuff I'm still more likely to cobble some half-assed code together in a dynamic language so I can skip the types, skip the error checking and user-friendliness, run it once or twice, and then discard it once it's done what it needs to do.  I'm lazy and proud of it. :)","<div class=""md""><blockquote>
<p>Crystal is rather impressive, but the compiler is too slow.</p>
</blockquote>

<p>Off-topic but I haven&#39;t checked in on Crystal in a while so I wasn&#39;t aware that was still an issue.  Though how slow is it, really?  People seem to be really forgiving of compile times  if they like the language enough. Look at all the hype around Rust, for example.</p>

<p>I&#39;m too impatient for that, personally; I like OCaml specifically because its compile times are ridiculously fast <em>and</em> code can be run in an interpreter-style mode as well.  Between that and the type inference letting me omit signatures completely, I can write it like it&#39;s a dynamically-typed scripting language early on and then add signatures and start compiling it later.  </p>

<p>It&#39;s like my ideal personal-use language, though for quickie stuff I&#39;m still more likely to cobble some half-assed code together in a dynamic language so I can skip the types, skip the error checking and user-friendliness, run it once or twice, and then discard it once it&#39;s done what it needs to do.  I&#39;m lazy and proud of it. :)</p>
</div>",1607687277.0,,False,gfdtku3,False,t3_kb0bgr,t1_gfdspsy,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfdtku3/,1,False,1,False,kb0bgr,lua,t5_2qjla
365,suhcoR,"> I am pretty sure there is a PDF of the manual somewhere in the website.

Didn't see one yet. Also an offline HTML would work.

> but I think TCC executables are kinda slow compared to the ones GCC produces.

Not really slow; depending on the use case it's a factor 1 to 2 slower in runtime, but much faster in compile time and able to compile code at runtime. Looking at the benchmark on the website Nelua would still be faster in geomean than LuaJIT. Note that TCC is a C compiler.","<div class=""md""><blockquote>
<p>I am pretty sure there is a PDF of the manual somewhere in the website.</p>
</blockquote>

<p>Didn&#39;t see one yet. Also an offline HTML would work.</p>

<blockquote>
<p>but I think TCC executables are kinda slow compared to the ones GCC produces.</p>
</blockquote>

<p>Not really slow; depending on the use case it&#39;s a factor 1 to 2 slower in runtime, but much faster in compile time and able to compile code at runtime. Looking at the benchmark on the website Nelua would still be faster in geomean than LuaJIT. Note that TCC is a C compiler.</p>
</div>",1607684438.0,,False,gfdqozz,False,t3_kb0bgr,t1_gfdpia8,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfdqozz/,0,False,1,False,kb0bgr,lua,t5_2qjla
366,suhcoR,"> Though how slow is it, really? People seem to be really forgiving of compile times if they like the language enough.

I just published some benchmark results (https://old.reddit.com/r/crystal_programming/comments/kad97q/arewefastyet_benchmark_suite_applied_to_crystal/) and found that the compiler run eight times longer than the whole benchmark suite. If you change a file an re-run the compiler it is much faster though.","<div class=""md""><blockquote>
<p>Though how slow is it, really? People seem to be really forgiving of compile times if they like the language enough.</p>
</blockquote>

<p>I just published some benchmark results (<a href=""https://old.reddit.com/r/crystal_programming/comments/kad97q/arewefastyet_benchmark_suite_applied_to_crystal/"">https://old.reddit.com/r/crystal_programming/comments/kad97q/arewefastyet_benchmark_suite_applied_to_crystal/</a>) and found that the compiler run eight times longer than the whole benchmark suite. If you change a file an re-run the compiler it is much faster though.</p>
</div>",1607688638.0,,False,gfdv1ed,False,t3_kb0bgr,t1_gfdtku3,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfdv1ed/,1,False,1,False,kb0bgr,lua,t5_2qjla
367,ws-ilazki,"> the compiler run eight times longer than the whole benchmark suite

I'm not completely certain but it's looking like it's because of how the Crystal benchmark is structured. 

I tried to test it some by compiling the harness.cr file that pulls in all the benchmarks and compiles them, using different --threads numbers and clearing `~/.cache/crystal` between each, but it always takes about 16s and it looks like most of my cores go unused regardless of what argument I pass, so I guess it's mostly sequential, at least in the specific case of compiling that benchmark suite, and what's making compilation slow for you is your CPU's single-core speed (based on your pdf saying 2c/2t @ 1.86ghz).

Building the Java one has every core briefly spike and the whole process is done in a bit over a second but Java actually has a build.xml and `ant` doing the work of compiling them in parallel.  My system is 8c/16t and there's a similar number of benchmarks so that makes sense speed-wise.

I think what's going on isn't necessarily that the Crystal compiler's slow, it's that the Crystal benchmark code is set up a way that is forcing it to compile every benchmark sequentially into a single binary.  It only generates the one binary (`harness`) with all of the benchmarks built into it, so I'm thinking compilation would be a lot faster if it were structured as an actual project and compiled as such so that it could use multiple cores to build each benchmark as either separate binaries or as libraries used as dependencies of `harness`.

It might still be slow compared to compiling other languages, but I don't think that specific compilation time is a good representation due to structure.","<div class=""md""><blockquote>
<p>the compiler run eight times longer than the whole benchmark suite</p>
</blockquote>

<p>I&#39;m not completely certain but it&#39;s looking like it&#39;s because of how the Crystal benchmark is structured. </p>

<p>I tried to test it some by compiling the harness.cr file that pulls in all the benchmarks and compiles them, using different --threads numbers and clearing <code>~/.cache/crystal</code> between each, but it always takes about 16s and it looks like most of my cores go unused regardless of what argument I pass, so I guess it&#39;s mostly sequential, at least in the specific case of compiling that benchmark suite, and what&#39;s making compilation slow for you is your CPU&#39;s single-core speed (based on your pdf saying 2c/2t @ 1.86ghz).</p>

<p>Building the Java one has every core briefly spike and the whole process is done in a bit over a second but Java actually has a build.xml and <code>ant</code> doing the work of compiling them in parallel.  My system is 8c/16t and there&#39;s a similar number of benchmarks so that makes sense speed-wise.</p>

<p>I think what&#39;s going on isn&#39;t necessarily that the Crystal compiler&#39;s slow, it&#39;s that the Crystal benchmark code is set up a way that is forcing it to compile every benchmark sequentially into a single binary.  It only generates the one binary (<code>harness</code>) with all of the benchmarks built into it, so I&#39;m thinking compilation would be a lot faster if it were structured as an actual project and compiled as such so that it could use multiple cores to build each benchmark as either separate binaries or as libraries used as dependencies of <code>harness</code>.</p>

<p>It might still be slow compared to compiling other languages, but I don&#39;t think that specific compilation time is a good representation due to structure.</p>
</div>",1607693138.0,,False,gfe0ui6,False,t3_kb0bgr,t1_gfdv1ed,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfe0ui6/,1,False,1,False,kb0bgr,lua,t5_2qjla
368,suhcoR,"> I'm not completely certain but it's looking like it's because of how the Crystal benchmark is structured. 

Compiling and running the benchmark are different steps. I'm using a single core for both steps. The build.sh script essentially does ""crystal build --release --no-debug harness.cr"" and I run it using ""time"". During the compile one of the CPUs is constantly at 100%. If I run it a second time without cleaning the cache it takes 3 seconds (instead of 45).

EDIT: here is the script I'm using to run the benchmark: http://software.rochus-keller.ch/are-we-fast-yet-run-crystal.sh","<div class=""md""><blockquote>
<p>I&#39;m not completely certain but it&#39;s looking like it&#39;s because of how the Crystal benchmark is structured. </p>
</blockquote>

<p>Compiling and running the benchmark are different steps. I&#39;m using a single core for both steps. The build.sh script essentially does &quot;crystal build --release --no-debug harness.cr&quot; and I run it using &quot;time&quot;. During the compile one of the CPUs is constantly at 100%. If I run it a second time without cleaning the cache it takes 3 seconds (instead of 45).</p>

<p>EDIT: here is the script I&#39;m using to run the benchmark: <a href=""http://software.rochus-keller.ch/are-we-fast-yet-run-crystal.sh"">http://software.rochus-keller.ch/are-we-fast-yet-run-crystal.sh</a></p>
</div>",1607695589.0,,1607696213.0,gfe4oo1,False,t3_kb0bgr,t1_gfe0ui6,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfe4oo1/,1,False,1,False,kb0bgr,lua,t5_2qjla
369,ws-ilazki,"> Compiling and running the benchmark are different steps.

Right. I'm not talking about running the benchmark, I'm talking about the code structure of the Crystal one vs. the other compiled one, Java, and how it might affect build times.  Java's using an actual build tool (ant) to compile all of its source files; meanwhile, as we've both noted, Crystal's just building a single file that pulls in every benchmark file via `require` and compiling that. In my case specifically it leads to a 16x difference in speed because ant basically does the equivalent of `make -j 16` while Crystal's stuck on one core.

So I'm saying that the project's set up to build the Crystal version naively, which compares unfairly to its use of an actual build tool for the Java one.  I'd be interested in seeing the Crystal compile time for the benchmark suite if it were restructured to use a shard.yml file and treat the benchmark sources a bit differently, like as libraries, so that they could actually compile simultaneously, especially considering multiple benchmarks all pull in `som.cr`.  It might be beneficial to have them built separately as libraries, assuming `shard` is capable of parallelisation like other build tools; it could be a lot faster if so.  I'd take a shot at it myself but I haven't touched Crystal in ages and don't really feel a strong desire to learn their build tool just to satisfy some mild curiosity.

I'm also wondering wtf the --threads argument is good for on `crystal build`, because it did nothing that I could see.","<div class=""md""><blockquote>
<p>Compiling and running the benchmark are different steps.</p>
</blockquote>

<p>Right. I&#39;m not talking about running the benchmark, I&#39;m talking about the code structure of the Crystal one vs. the other compiled one, Java, and how it might affect build times.  Java&#39;s using an actual build tool (ant) to compile all of its source files; meanwhile, as we&#39;ve both noted, Crystal&#39;s just building a single file that pulls in every benchmark file via <code>require</code> and compiling that. In my case specifically it leads to a 16x difference in speed because ant basically does the equivalent of <code>make -j 16</code> while Crystal&#39;s stuck on one core.</p>

<p>So I&#39;m saying that the project&#39;s set up to build the Crystal version naively, which compares unfairly to its use of an actual build tool for the Java one.  I&#39;d be interested in seeing the Crystal compile time for the benchmark suite if it were restructured to use a shard.yml file and treat the benchmark sources a bit differently, like as libraries, so that they could actually compile simultaneously, especially considering multiple benchmarks all pull in <code>som.cr</code>.  It might be beneficial to have them built separately as libraries, assuming <code>shard</code> is capable of parallelisation like other build tools; it could be a lot faster if so.  I&#39;d take a shot at it myself but I haven&#39;t touched Crystal in ages and don&#39;t really feel a strong desire to learn their build tool just to satisfy some mild curiosity.</p>

<p>I&#39;m also wondering wtf the --threads argument is good for on <code>crystal build</code>, because it did nothing that I could see.</p>
</div>",1607697344.0,,False,gfe7qly,False,t3_kb0bgr,t1_gfe4oo1,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfe7qly/,1,False,1,False,kb0bgr,lua,t5_2qjla
370,suhcoR,"Why are you mentioning Java? I didn't run the Java benchmark (see my report). And I just run the Crystal compiler with default options, as I do if I just want to quickly compile and link some C files with GCC. I don't know much about the Crystal compiler. If I was a Crystal developer I would mostly care whether it can do quick incremental builds, i.e. how long it takes from a single change to running the program. It's ok if it takes a bit longer when I intentionally do a full rebuild.","<div class=""md""><p>Why are you mentioning Java? I didn&#39;t run the Java benchmark (see my report). And I just run the Crystal compiler with default options, as I do if I just want to quickly compile and link some C files with GCC. I don&#39;t know much about the Crystal compiler. If I was a Crystal developer I would mostly care whether it can do quick incremental builds, i.e. how long it takes from a single change to running the program. It&#39;s ok if it takes a bit longer when I intentionally do a full rebuild.</p>
</div>",1607699175.0,,False,gfeb1l9,False,t3_kb0bgr,t1_gfe7qly,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfeb1l9/,1,False,1,False,kb0bgr,lua,t5_2qjla
371,ws-ilazki,"> Why are you mentioning Java? I didn't run the Java benchmark

Because I compared compilation of it and Crystal on my system out of curiosity, using ant on the provided build.xml for Java and the provided build.sh for Crystal. I explained this already a few comments up. They set Java up to build using a build tool but didn't do same for Crystal and the build time difference between them correlates closely to the # of cores I have, so that got me wondering. 

I don't have anything slow enough to really compare or test compilation speeds against yours so I was just trying to compare my Crystal compile time to something else in the suite to see the difference. But there aren't many options and the one I could test is kind of apples to oranges so I started speculating about making the Crystal one build better.","<div class=""md""><blockquote>
<p>Why are you mentioning Java? I didn&#39;t run the Java benchmark</p>
</blockquote>

<p>Because I compared compilation of it and Crystal on my system out of curiosity, using ant on the provided build.xml for Java and the provided build.sh for Crystal. I explained this already a few comments up. They set Java up to build using a build tool but didn&#39;t do same for Crystal and the build time difference between them correlates closely to the # of cores I have, so that got me wondering. </p>

<p>I don&#39;t have anything slow enough to really compare or test compilation speeds against yours so I was just trying to compare my Crystal compile time to something else in the suite to see the difference. But there aren&#39;t many options and the one I could test is kind of apples to oranges so I started speculating about making the Crystal one build better.</p>
</div>",1607700640.0,,False,gfedt1v,False,t3_kb0bgr,t1_gfeb1l9,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfedt1v/,1,False,1,False,kb0bgr,lua,t5_2qjla
372,suhcoR,"> They set Java up to build using a build tool but didn't do same for Crystal

As far as I understand the Crystal compiler - in contrast to GCC or javac - includes a full build system (see https://crystal-lang.org/reference/using_the_compiler/index.html#crystal-build). And since it uses LLVM I assume it should be able to automatically handle multiple cores if present. Some of the compiler phases might be able to run in parallel, some not; but I would expect the integrated build system to automatically take care of that.

EDIT: I did some experiments with --progress and with/without the --release option; as it seems most of the time is spent in code generation; when compiling without --release the whole process only takes about 10 seconds (compared to 45 with --release).","<div class=""md""><blockquote>
<p>They set Java up to build using a build tool but didn&#39;t do same for Crystal</p>
</blockquote>

<p>As far as I understand the Crystal compiler - in contrast to GCC or javac - includes a full build system (see <a href=""https://crystal-lang.org/reference/using_the_compiler/index.html#crystal-build"">https://crystal-lang.org/reference/using_the_compiler/index.html#crystal-build</a>). And since it uses LLVM I assume it should be able to automatically handle multiple cores if present. Some of the compiler phases might be able to run in parallel, some not; but I would expect the integrated build system to automatically take care of that.</p>

<p>EDIT: I did some experiments with --progress and with/without the --release option; as it seems most of the time is spent in code generation; when compiling without --release the whole process only takes about 10 seconds (compared to 45 with --release).</p>
</div>",1607701100.0,,1607702492.0,gfeep1f,False,t3_kb0bgr,t1_gfedt1v,/r/lua/comments/kb0bgr/nelua_a_lualike_native_compiled_to_c_and_then_to/gfeep1f/,0,False,1,False,kb0bgr,lua,t5_2qjla
373,Zireael07,"On other subs, the consensus seems to be that it's source available and not open source because the license seems to contradict itself in spots.","<div class=""md""><p>On other subs, the consensus seems to be that it&#39;s source available and not open source because the license seems to contradict itself in spots.</p>
</div>",1589901290.0,,False,fr52evc,False,t3_gmq62w,t3_gmq62w,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr52evc/,1,False,7,False,gmq62w,lua,t5_2qjla
374,mustooch,Would you recommend it to someone who's been using love2d for a while? I guess i'll try it someday but i'd like feedback from someone who uses it.,"<div class=""md""><p>Would you recommend it to someone who&#39;s been using love2d for a while? I guess i&#39;ll try it someday but i&#39;d like feedback from someone who uses it.</p>
</div>",1589906371.0,,False,fr5co92,False,t3_gmq62w,t3_gmq62w,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr5co92/,1,False,1,False,gmq62w,lua,t5_2qjla
375,,"Defold is beautiful on the outside for me. It's something I wish I got to learn more about but for whatever reason it feels more difficult to get into than Unity itself...

It is a shame it's a small community with small amount of members. I wish there were more examples and videos about the engine.","<div class=""md""><p>Defold is beautiful on the outside for me. It&#39;s something I wish I got to learn more about but for whatever reason it feels more difficult to get into than Unity itself...</p>

<p>It is a shame it&#39;s a small community with small amount of members. I wish there were more examples and videos about the engine.</p>
</div>",1590042835.0,,False,frbhiak,False,t3_gmq62w,t3_gmq62w,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/frbhiak/,2,False,1,False,gmq62w,lua,t5_2qjla
376,ResponsibleMirror,It is not completely open-source. The developer still holds some code closed.,"<div class=""md""><p>It is not completely open-source. The developer still holds some code closed.</p>
</div>",1589909264.0,,False,fr5iu2g,False,t3_gmq62w,t3_gmq62w,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr5iu2g/,1,False,1,False,gmq62w,lua,t5_2qjla
377,,"I'm just another Defold user so I can only speak from that and not as someone officially associated with it.

There are people who are very protective about the exact definition of ""open source"" which is fair. Some people are very hostile about it and don't care to see the positive in this they only want to argue about the definition. I saw people saying they should not say open source but to only use open and available, and then when they did that more people came and said they should not say open at all. ☹

IMO the term already has a broader meaning and broadly defending it is too late. Like the GNU/Linux thing.

**The license itself does not allow people to take the editor/engine and sell it commercially as a new game engine (but you can do this non-commercially).** That's the part OSS people are upset about. That part might be changed, who knows.","<div class=""md""><p>I&#39;m just another Defold user so I can only speak from that and not as someone officially associated with it.</p>

<p>There are people who are very protective about the exact definition of &quot;open source&quot; which is fair. Some people are very hostile about it and don&#39;t care to see the positive in this they only want to argue about the definition. I saw people saying they should not say open source but to only use open and available, and then when they did that more people came and said they should not say open at all. ☹</p>

<p>IMO the term already has a broader meaning and broadly defending it is too late. Like the GNU/Linux thing.</p>

<p><strong>The license itself does not allow people to take the editor/engine and sell it commercially as a new game engine (but you can do this non-commercially).</strong> That&#39;s the part OSS people are upset about. That part might be changed, who knows.</p>
</div>",1589903106.0,,1589903339.0,fr55zxv,False,t3_gmq62w,t1_fr52evc,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr55zxv/,1,False,3,False,gmq62w,lua,t5_2qjla
378,,"Yes, I would recommend it. Most of what you know carries over. And you can use most of the same Lua tools you use with possibly only small modifications necessary.

The magic is in the engine and the editor. The editor makes collaboration easy and fast, it makes refactoring easy and fast, and all of the various editor features makes making your game easy and fast. The engine is lean, small, stable, and efficient. 

We have published games on Steam, iOS, and Android which were made with Defold.","<div class=""md""><p>Yes, I would recommend it. Most of what you know carries over. And you can use most of the same Lua tools you use with possibly only small modifications necessary.</p>

<p>The magic is in the engine and the editor. The editor makes collaboration easy and fast, it makes refactoring easy and fast, and all of the various editor features makes making your game easy and fast. The engine is lean, small, stable, and efficient. </p>

<p>We have published games on Steam, iOS, and Android which were made with Defold.</p>
</div>",1589907157.0,,False,fr5ebn2,False,t3_gmq62w,t1_fr5co92,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr5ebn2/,1,False,2,False,gmq62w,lua,t5_2qjla
379,,"Unity is the most popular game engine in the world. It's hard to convince people to not use it when they want the ""best"" and go for what's most popular just because it's popular. Defold is great for many types of games in ways Unity cannot hope to compete with. There are some video resources out there and hopefully more will come once people realize how good Defold it. :)

As for examples tere are tons of examples on Github https://github.com/search?q=defold","<div class=""md""><p>Unity is the most popular game engine in the world. It&#39;s hard to convince people to not use it when they want the &quot;best&quot; and go for what&#39;s most popular just because it&#39;s popular. Defold is great for many types of games in ways Unity cannot hope to compete with. There are some video resources out there and hopefully more will come once people realize how good Defold it. :)</p>

<p>As for examples tere are tons of examples on Github <a href=""https://github.com/search?q=defold"">https://github.com/search?q=defold</a></p>
</div>",1590045023.0,,False,frbjuvu,False,t3_gmq62w,t1_frbhiak,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/frbjuvu/,1,False,3,False,gmq62w,lua,t5_2qjla
380,mustooch,Why exactly do feel that it's harder to get into than unity?,"<div class=""md""><p>Why exactly do feel that it&#39;s harder to get into than unity?</p>
</div>",1590043242.0,,False,frbhyal,False,t3_gmq62w,t1_frbhiak,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/frbhyal/,1,False,2,False,gmq62w,lua,t5_2qjla
381,,"Which code is not available? The code for the engine and editor is open and available to read, contribute to, and change for your needs. Currently the license only blocks people from reselling Defold itself as a new game engine, but it can be forked non-commercially. This might be changed in the future to allow commercialization.","<div class=""md""><p>Which code is not available? The code for the engine and editor is open and available to read, contribute to, and change for your needs. Currently the license only blocks people from reselling Defold itself as a new game engine, but it can be forked non-commercially. This might be changed in the future to allow commercialization.</p>
</div>",1589909402.0,,False,fr5j4t7,False,t3_gmq62w,t1_fr5iu2g,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr5j4t7/,0,False,3,False,gmq62w,lua,t5_2qjla
382,ws-ilazki,"> There are people who are very protective about the exact definition of ""open source"" which is fair. [...] IMO the term already has a broader meaning and broadly defending it is too late. Like the GNU/Linux thing.

Except that GNU/Linux is pedantry, while software licensing is potentially a legal issue, so precise wording and avoiding ambiguity is a good thing.  Any new license carries a certain risk with it, because even small changes to wording can have far-reaching effects, even if the author did not intend it.  Defold's license is derived from a proper open source license, but adds its own restrictions, so now those changes need to be checked by knowledgeable people to determine the possible consequences of the changes.  You can't just take the writer's word that their license is open source and use it as such, because you risk legal problems in the future if it turns out that their modified terms disallow something you did but it wasn't clear at the time.

Also, ""open source"" carries an expectation that you can do whatever you want with the software, so technically a license based on a proper open source one but with additional restrictions no longer carries the same freedom.  That's kept a lot of software with custom licenses out of Debian, and Defold will be no different.","<div class=""md""><blockquote>
<p>There are people who are very protective about the exact definition of &quot;open source&quot; which is fair. [...] IMO the term already has a broader meaning and broadly defending it is too late. Like the GNU/Linux thing.</p>
</blockquote>

<p>Except that GNU/Linux is pedantry, while software licensing is potentially a legal issue, so precise wording and avoiding ambiguity is a good thing.  Any new license carries a certain risk with it, because even small changes to wording can have far-reaching effects, even if the author did not intend it.  Defold&#39;s license is derived from a proper open source license, but adds its own restrictions, so now those changes need to be checked by knowledgeable people to determine the possible consequences of the changes.  You can&#39;t just take the writer&#39;s word that their license is open source and use it as such, because you risk legal problems in the future if it turns out that their modified terms disallow something you did but it wasn&#39;t clear at the time.</p>

<p>Also, &quot;open source&quot; carries an expectation that you can do whatever you want with the software, so technically a license based on a proper open source one but with additional restrictions no longer carries the same freedom.  That&#39;s kept a lot of software with custom licenses out of Debian, and Defold will be no different.</p>
</div>",1589908285.0,,False,fr5gpzv,False,t3_gmq62w,t1_fr55zxv,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr5gpzv/,2,False,7,False,gmq62w,lua,t5_2qjla
383,mustooch,Thanks for the reply! I appreciate it. Definitely gonna give it a try then.,"<div class=""md""><p>Thanks for the reply! I appreciate it. Definitely gonna give it a try then.</p>
</div>",1589908572.0,,False,fr5hc2m,False,t3_gmq62w,t1_fr5ebn2,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr5hc2m/,0,False,2,False,gmq62w,lua,t5_2qjla
384,,"Even though it might be the most popular one, a lot of people switched over to Godot due to how bloated unity can be. I do think that Defold has a potential (one because it uses Lua which is the easiest language to learn imo) I do hope none of you misunderstood my comment as negative, perhaps I worded it wrongly.

I do hope to move over from love2d to defold at some point","<div class=""md""><p>Even though it might be the most popular one, a lot of people switched over to Godot due to how bloated unity can be. I do think that Defold has a potential (one because it uses Lua which is the easiest language to learn imo) I do hope none of you misunderstood my comment as negative, perhaps I worded it wrongly.</p>

<p>I do hope to move over from love2d to defold at some point</p>
</div>",1590046679.0,,False,frblkcu,False,t3_gmq62w,t1_frbjuvu,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/frblkcu/,0,False,2,False,gmq62w,lua,t5_2qjla
385,,"The UI mostly really.
To me personally it feels all over the place. But perhaps it is my own fault too for not reading all of the documentations properly. 

Don't get me wrong, I love Lua and with it the game engines because it's something I want to use myself.","<div class=""md""><p>The UI mostly really.
To me personally it feels all over the place. But perhaps it is my own fault too for not reading all of the documentations properly. </p>

<p>Don&#39;t get me wrong, I love Lua and with it the game engines because it&#39;s something I want to use myself.</p>
</div>",1590043643.0,,False,frbie2h,False,t3_gmq62w,t1_frbhyal,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/frbie2h/,1,False,1,False,gmq62w,lua,t5_2qjla
386,,"I agree about the need for legal clarity, and after some discussion in the Defold Slack #opensource channel I agree that they should remove the commercial limitation, because it doesn't even make sense. Who would buy/use something based on Defold and not just use Defold itself?

As far as I know, the concept of open source pre-dated the Open Source Initiative, and used to just mean source you can see before it was co-opted. Now colloquially it still means that... but there are people who are trying to police the exact term. I still think it's fair, they mean well, but it also needlessly sours good will gestures like this that should be celebrated.

>""open source"" carries an expectation that you can do whatever you want with the software

GPL isn't open source then? 😏","<div class=""md""><p>I agree about the need for legal clarity, and after some discussion in the Defold Slack #opensource channel I agree that they should remove the commercial limitation, because it doesn&#39;t even make sense. Who would buy/use something based on Defold and not just use Defold itself?</p>

<p>As far as I know, the concept of open source pre-dated the Open Source Initiative, and used to just mean source you can see before it was co-opted. Now colloquially it still means that... but there are people who are trying to police the exact term. I still think it&#39;s fair, they mean well, but it also needlessly sours good will gestures like this that should be celebrated.</p>

<blockquote>
<p>&quot;open source&quot; carries an expectation that you can do whatever you want with the software</p>
</blockquote>

<p>GPL isn&#39;t open source then? 😏</p>
</div>",1589908803.0,,False,fr5hu50,False,t3_gmq62w,t1_fr5gpzv,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr5hu50/,2,False,2,False,gmq62w,lua,t5_2qjla
387,DarkWiiPlayer,"GNU/Linux is not pedantry, it's attention seeking. There is neither a ""Linux"" nor a ""GNU/Liunux"" OS; there's Ubuntu, Linux Mint, Void Linux, etc.

The fact that people have settled on ""Linux"" as a blanket term for all the Linux-based OSes out there seems to annoy some people who'd like to be in the name, but has no meaning otherwise. There's even linuxes that don't use nearly enough GNU tools to be a ""GNU/Linux""; just think of all the busybox+musl systems out there.

Open Source, on the other hand, is a term to describe a type of software licensing, where you're essentially allowed to do mostly whatever you want with the source code. Using this word too broadly gives us another term for ""source available"", and leaves us without any meaningful way to describe what open source was meant to describe.

There's also a [list of licenses](https://opensource.org/licenses) aproved by the Open Source initiative; which should further underline that this term holds a very specific meaning.","<div class=""md""><p>GNU/Linux is not pedantry, it&#39;s attention seeking. There is neither a &quot;Linux&quot; nor a &quot;GNU/Liunux&quot; OS; there&#39;s Ubuntu, Linux Mint, Void Linux, etc.</p>

<p>The fact that people have settled on &quot;Linux&quot; as a blanket term for all the Linux-based OSes out there seems to annoy some people who&#39;d like to be in the name, but has no meaning otherwise. There&#39;s even linuxes that don&#39;t use nearly enough GNU tools to be a &quot;GNU/Linux&quot;; just think of all the busybox+musl systems out there.</p>

<p>Open Source, on the other hand, is a term to describe a type of software licensing, where you&#39;re essentially allowed to do mostly whatever you want with the source code. Using this word too broadly gives us another term for &quot;source available&quot;, and leaves us without any meaningful way to describe what open source was meant to describe.</p>

<p>There&#39;s also a <a href=""https://opensource.org/licenses"">list of licenses</a> aproved by the Open Source initiative; which should further underline that this term holds a very specific meaning.</p>
</div>",1589965509.0,,False,fr82mbo,False,t3_gmq62w,t1_fr5gpzv,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr82mbo/,0,False,1,False,gmq62w,lua,t5_2qjla
388,mustooch,"Oh i see, it's funny because i personally feel the same for unity's UI, perhpas because i didn't really get into it aswell.","<div class=""md""><p>Oh i see, it&#39;s funny because i personally feel the same for unity&#39;s UI, perhpas because i didn&#39;t really get into it aswell.</p>
</div>",1590043794.0,,False,frbijvh,False,t3_gmq62w,t1_frbie2h,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/frbijvh/,1,False,2,False,gmq62w,lua,t5_2qjla
389,dddbbb,"> GPL isn't open source then? 😏

No. [GPL is Free Software](https://www.gnu.org/philosophy/open-source-misses-the-point.en.html), and not Open Source.

:D

> Who would buy/use something based on Defold and not just use Defold itself?

There's a market for game mills where you put in different art and it pumps out reskinned versions of a game along with an SEO-optimized game name. You could sell your Defold fork as a game reskinner and that would probably run afoul of the license.","<div class=""md""><blockquote>
<p>GPL isn&#39;t open source then? 😏</p>
</blockquote>

<p>No. <a href=""https://www.gnu.org/philosophy/open-source-misses-the-point.en.html"">GPL is Free Software</a>, and not Open Source.</p>

<p>:D</p>

<blockquote>
<p>Who would buy/use something based on Defold and not just use Defold itself?</p>
</blockquote>

<p>There&#39;s a market for game mills where you put in different art and it pumps out reskinned versions of a game along with an SEO-optimized game name. You could sell your Defold fork as a game reskinner and that would probably run afoul of the license.</p>
</div>",1589961509.0,,False,fr7yl23,False,t3_gmq62w,t1_fr5hu50,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr7yl23/,0,False,3,False,gmq62w,lua,t5_2qjla
390,ws-ilazki,"> As far as I know, the concept of open source pre-dated the Open Source Initiative, and used to just mean source you can see before it was co-opted.

The term predates software licensing, period.  Open source then was effectively a public domain type of ""here's the code, do what you want"" at a time when people generally did not do that.  Even before the OSI (and the Debian Free Software Guidelines, which the OSI definition was taken from), open source was still used with that intent.  There was some controversy over this with the FSF because this definition is more permissive than theirs, which led to their deprecation of the term ""open source"" in favour of calling their stricter definition ""free software"", but both still required the end-user be able to do what they want with the code.

This mutation of ""open source"" to include non-free source-available software is a much newer thing.  Maybe it's because businesses finally started seeing the benefits of open source software *for them* but are still wary of giving their code back free of stipulations, because it might potentially help competitors.  

> GPL isn't open source then? 😏

Now you're just trolling.  GPL doesn't restrict you in any way with regard to how you use the software.  It just demands that you share those changes back.  Whether that's better or worse than the BSD style of ""do whatever you want to the software, and you don't have to share it"" is debatable, but neither one (nor any other open source license) places any restrictions on what you may do with the software itself.","<div class=""md""><blockquote>
<p>As far as I know, the concept of open source pre-dated the Open Source Initiative, and used to just mean source you can see before it was co-opted.</p>
</blockquote>

<p>The term predates software licensing, period.  Open source then was effectively a public domain type of &quot;here&#39;s the code, do what you want&quot; at a time when people generally did not do that.  Even before the OSI (and the Debian Free Software Guidelines, which the OSI definition was taken from), open source was still used with that intent.  There was some controversy over this with the FSF because this definition is more permissive than theirs, which led to their deprecation of the term &quot;open source&quot; in favour of calling their stricter definition &quot;free software&quot;, but both still required the end-user be able to do what they want with the code.</p>

<p>This mutation of &quot;open source&quot; to include non-free source-available software is a much newer thing.  Maybe it&#39;s because businesses finally started seeing the benefits of open source software <em>for them</em> but are still wary of giving their code back free of stipulations, because it might potentially help competitors.  </p>

<blockquote>
<p>GPL isn&#39;t open source then? 😏</p>
</blockquote>

<p>Now you&#39;re just trolling.  GPL doesn&#39;t restrict you in any way with regard to how you use the software.  It just demands that you share those changes back.  Whether that&#39;s better or worse than the BSD style of &quot;do whatever you want to the software, and you don&#39;t have to share it&quot; is debatable, but neither one (nor any other open source license) places any restrictions on what you may do with the software itself.</p>
</div>",1589910436.0,,False,fr5lbt3,False,t3_gmq62w,t1_fr5hu50,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr5lbt3/,1,False,2,False,gmq62w,lua,t5_2qjla
391,,I do hope to get fully into defold some day. Perhaps when that happens the community grows and there might be some interesting videos to watch on using defold for visual learners like me.,"<div class=""md""><p>I do hope to get fully into defold some day. Perhaps when that happens the community grows and there might be some interesting videos to watch on using defold for visual learners like me.</p>
</div>",1590043989.0,,False,frbirdw,False,t3_gmq62w,t1_frbijvh,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/frbirdw/,1,False,1,False,gmq62w,lua,t5_2qjla
392,gcross,">  It just demands that you share those changes back.

And it is worth noting that even this restriction only kicks in if you are sharing the binaries;  if you keep the binaries to yourself then you don't have to do this--with the exception of code licensed specifically using [the Affero variant of the GPL](https://www.gnu.org/licenses/agpl-3.0.en.html), in which case essentially if you run a web server using that code then that is treated like sharing the binaries.","<div class=""md""><blockquote>
<p>It just demands that you share those changes back.</p>
</blockquote>

<p>And it is worth noting that even this restriction only kicks in if you are sharing the binaries;  if you keep the binaries to yourself then you don&#39;t have to do this--with the exception of code licensed specifically using <a href=""https://www.gnu.org/licenses/agpl-3.0.en.html"">the Affero variant of the GPL</a>, in which case essentially if you run a web server using that code then that is treated like sharing the binaries.</p>
</div>",1589921251.0,,False,fr67ham,False,t3_gmq62w,t1_fr5lbt3,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/fr67ham/,0,False,3,False,gmq62w,lua,t5_2qjla
393,mustooch,"Yeah videos are a great way of learning, although well written documentation is just as good imo.","<div class=""md""><p>Yeah videos are a great way of learning, although well written documentation is just as good imo.</p>
</div>",1590044649.0,,False,frbjgrk,False,t3_gmq62w,t1_frbirdw,/r/lua/comments/gmq62w/defold_the_cross_platform_lua_based_gamedev_tool/frbjgrk/,0,False,1,False,gmq62w,lua,t5_2qjla
394,leafo2,"Here's a link to amazon if anyone is searching for it: 

http://www.amazon.com/Programming-Third-Edition-Roberto-Ierusalimschy/dp/859037985X/ref=sr_1_1?ie=UTF8&qid=1356983655&sr=8-1&keywords=programming+in+lua+third","<div class=""md""><p>Here&#39;s a link to amazon if anyone is searching for it: </p>

<p><a href=""http://www.amazon.com/Programming-Third-Edition-Roberto-Ierusalimschy/dp/859037985X/ref=sr_1_1?ie=UTF8&amp;qid=1356983655&amp;sr=8-1&amp;keywords=programming+in+lua+third"">http://www.amazon.com/Programming-Third-Edition-Roberto-Ierusalimschy/dp/859037985X/ref=sr_1_1?ie=UTF8&amp;qid=1356983655&amp;sr=8-1&amp;keywords=programming+in+lua+third</a></p>
</div>",1356983684.0,,False,c7ow3fx,False,t3_15qi10,t3_15qi10,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c7ow3fx/,0,False,9,False,15qi10,lua,t5_2qjla
395,timschwartz,Crap. My order for 2nd edition just shipped.,"<div class=""md""><p>Crap. My order for 2nd edition just shipped.</p>
</div>",1357021919.0,,False,c7p4ame,False,t3_15qi10,t3_15qi10,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c7p4ame/,1,False,3,False,15qi10,lua,t5_2qjla
396,TonySuarez,"Beware that the book price has been lowering steadily at Amazon. I ordered one copy yesterday by USD 30.36, and at this precise moment it costs only USD 26.37. They didn't even sent my packet :-(, but the price has not been updated. This amazon's floating (random?) price policy sucks...","<div class=""md""><p>Beware that the book price has been lowering steadily at Amazon. I ordered one copy yesterday by USD 30.36, and at this precise moment it costs only USD 26.37. They didn&#39;t even sent my packet :-(, but the price has not been updated. This amazon&#39;s floating (random?) price policy sucks...</p>
</div>",1357148379.0,,False,c7psguh,True,t3_15qi10,t3_15qi10,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c7psguh/,0,False,3,False,15qi10,lua,t5_2qjla
397,Mecdemort,Is this available anywhere as eBook?,"<div class=""md""><p>Is this available anywhere as eBook?</p>
</div>",1357064278.0,,False,c7p9u2l,False,t3_15qi10,t3_15qi10,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c7p9u2l/,1,False,2,False,15qi10,lua,t5_2qjla
398,aDevilInMe,"If you are looking for a local seller for the book see the following links, it seems it is now coming online in other Amazon stores.

* http://www.fetchbook.info/compare.do?search=9788590379850
* http://www.justbooks.co.uk/search/?keywords=978-8590379850&st=sh&ac=qr&submit=
* http://www.cheapriver.com/#?q=9788590379850
","<div class=""md""><p>If you are looking for a local seller for the book see the following links, it seems it is now coming online in other Amazon stores.</p>

<ul>
<li><a href=""http://www.fetchbook.info/compare.do?search=9788590379850"">http://www.fetchbook.info/compare.do?search=9788590379850</a></li>
<li><a href=""http://www.justbooks.co.uk/search/?keywords=978-8590379850&amp;st=sh&amp;ac=qr&amp;submit="">http://www.justbooks.co.uk/search/?keywords=978-8590379850&amp;st=sh&amp;ac=qr&amp;submit=</a></li>
<li><a href=""http://www.cheapriver.com/#?q=9788590379850"">http://www.cheapriver.com/#?q=9788590379850</a></li>
</ul>
</div>",1357079184.0,,False,c7pdsjl,False,t3_15qi10,t3_15qi10,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c7pdsjl/,0,False,2,False,15qi10,lua,t5_2qjla
399,ExiledPilot,"I'm looking forward to reading this, awesome. ","<div class=""md""><p>I&#39;m looking forward to reading this, awesome. </p>
</div>",1357361596.0,,False,c7rbjti,False,t3_15qi10,t3_15qi10,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c7rbjti/,0,False,1,False,15qi10,lua,t5_2qjla
400,vaff,Anyone know if it's out as ebook version?,"<div class=""md""><p>Anyone know if it&#39;s out as ebook version?</p>
</div>",1359788928.0,,False,c87zmo1,False,t3_15qi10,t3_15qi10,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c87zmo1/,1,False,1,False,15qi10,lua,t5_2qjla
401,TonySuarez,"I ordered the 3rd ed., and already own the 2nd and the 1st! I think you'll enjoy the book (its organization reminds me K&R ""C programming"", which is the classic of the classics regarding programming languages IMHO) and in a couple of months you'll get the 3rd ed. :-). And the evolution of Lua between versions 5.1 and 5.2 is not that disruptive...","<div class=""md""><p>I ordered the 3rd ed., and already own the 2nd and the 1st! I think you&#39;ll enjoy the book (its organization reminds me K&amp;R &quot;C programming&quot;, which is the classic of the classics regarding programming languages IMHO) and in a couple of months you&#39;ll get the 3rd ed. :-). And the evolution of Lua between versions 5.1 and 5.2 is not that disruptive...</p>
</div>",1357148789.0,,False,c7psl1j,True,t3_15qi10,t1_c7p4ame,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c7psl1j/,1,False,3,False,15qi10,lua,t5_2qjla
402,ansible,"Feisty Duck was the publisher for the 2nd edition, and IIRC Roberto said they'd be coming out with the 3rd edition in a few weeks.

http://store.feistyduck.com/products/programming-in-lua

","<div class=""md""><p>Feisty Duck was the publisher for the 2nd edition, and IIRC Roberto said they&#39;d be coming out with the 3rd edition in a few weeks.</p>

<p><a href=""http://store.feistyduck.com/products/programming-in-lua"">http://store.feistyduck.com/products/programming-in-lua</a></p>
</div>",1357152708.0,,False,c7ptqzc,False,t3_15qi10,t1_c7p9u2l,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c7ptqzc/,0,False,1,False,15qi10,lua,t5_2qjla
403,aDevilInMe,Roberto made a comment on the mailing list that it would be a few months yet before the ebook version.,"<div class=""md""><p>Roberto made a comment on the mailing list that it would be a few months yet before the ebook version.</p>
</div>",1360012873.0,,False,c89bs54,False,t3_15qi10,t1_c87zmo1,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c89bs54/,1,False,1,False,15qi10,lua,t5_2qjla
404,lambda_abstraction,"Also, if you plan to code primarily for Luajit, the 5.2 docs and PIL 2e are still very relevant.","<div class=""md""><p>Also, if you plan to code primarily for Luajit, the 5.2 docs and PIL 2e are still very relevant.</p>
</div>",1357320973.0,,False,c7qzf5y,False,t3_15qi10,t1_c7psl1j,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c7qzf5y/,0,False,1,False,15qi10,lua,t5_2qjla
405,vaff,"Okay ... I've got the 2. Release, I will just read that. As far as I understand, the difference isn't that big anyways","<div class=""md""><p>Okay ... I&#39;ve got the 2. Release, I will just read that. As far as I understand, the difference isn&#39;t that big anyways</p>
</div>",1360022490.0,,False,c89eyzp,False,t3_15qi10,t1_c89bs54,/r/lua/comments/15qi10/programming_lua_3rd_ed_by_roberto_ierusalimschy/c89eyzp/,0,False,1,False,15qi10,lua,t5_2qjla
406,suhcoR,A very useful list.,"<div class=""md""><p>A very useful list.</p>
</div>",1584788652.0,,False,fl3ktey,False,t3_fmcu1f,t3_fmcu1f,/r/lua/comments/fmcu1f/languages_that_compile_to_lua/fl3ktey/,0,False,3,False,fmcu1f,lua,t5_2qjla
407,dinosaur__fan,"According to [this email on the mailing list](http://lua-users.org/lists/lua-l/2022-11/msg00084.html), a lot of the growth might have been because of Neovim plugins and dotfiles.","<div class=""md""><p>According to <a href=""http://lua-users.org/lists/lua-l/2022-11/msg00084.html"">this email on the mailing list</a>, a lot of the growth might have been because of Neovim plugins and dotfiles.</p>
</div>",1670067147.0,,False,iyql1do,True,t3_zbe8l6,t3_zbe8l6,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iyql1do/,1,False,23,False,zbe8l6,lua,t5_2qjla
408,loneraver,"How? As someone who has a harder time justifying the use of Lua theses days, I’m genuinely curious about why this is.","<div class=""md""><p>How? As someone who has a harder time justifying the use of Lua theses days, I’m genuinely curious about why this is.</p>
</div>",1670093817.0,,False,iys3ddt,False,t3_zbe8l6,t3_zbe8l6,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iys3ddt/,2,False,1,False,zbe8l6,lua,t5_2qjla
409,arkt8,"I love Lua but I can't help to always remember about some things...

Usually language ranks are somewhat biased. So we need to remember:

What is popularity?

\- Amount of new code written in a language in certain period?

\- Amount of projects using a language?

\- Amount of installed software using a language?

\- Amount of critical employment?

As u/dinosaur__fan mentioned it can be due to Neovim. Others may argue that is due to Roblox or other thing. Anyway, these codes are of the rolling type: many writing, rewriting. While it put focus on the language, it isn't the better way to measure its popularity.

While some people argue that the Python or JS is the #1, if considered the above criteria, not! Probably is C and, even Java, are  above these.

So Lua? Well, here Lua shines whithout much bells and whistles...

There are a lot of web services and microservices around the world using Lua, be as extension for Nginx where it can act as a backend language, routing or configuration tool.

Also the way as it empowers professionals on media editing as plugins, in embedded systems as South America digital system or in scientific research projects as the CERN or data analisis like Torch.

Don't forget that even other languages use Lua as extension or even to write performance critical parts (there are a lot of people indicating write in Lua amidst Python code to speed things up)

While there are languages high ranked by amount of LOC/day I really guess there are more places and more critical software using Lua today than can be measured by any popularity stats.","<div class=""md""><p>I love Lua but I can&#39;t help to always remember about some things...</p>

<p>Usually language ranks are somewhat biased. So we need to remember:</p>

<p>What is popularity?</p>

<p>- Amount of new code written in a language in certain period?</p>

<p>- Amount of projects using a language?</p>

<p>- Amount of installed software using a language?</p>

<p>- Amount of critical employment?</p>

<p>As <a href=""/u/dinosaur__fan"">u/dinosaur__fan</a> mentioned it can be due to Neovim. Others may argue that is due to Roblox or other thing. Anyway, these codes are of the rolling type: many writing, rewriting. While it put focus on the language, it isn&#39;t the better way to measure its popularity.</p>

<p>While some people argue that the Python or JS is the #1, if considered the above criteria, not! Probably is C and, even Java, are  above these.</p>

<p>So Lua? Well, here Lua shines whithout much bells and whistles...</p>

<p>There are a lot of web services and microservices around the world using Lua, be as extension for Nginx where it can act as a backend language, routing or configuration tool.</p>

<p>Also the way as it empowers professionals on media editing as plugins, in embedded systems as South America digital system or in scientific research projects as the CERN or data analisis like Torch.</p>

<p>Don&#39;t forget that even other languages use Lua as extension or even to write performance critical parts (there are a lot of people indicating write in Lua amidst Python code to speed things up)</p>

<p>While there are languages high ranked by amount of LOC/day I really guess there are more places and more critical software using Lua today than can be measured by any popularity stats.</p>
</div>",1670083461.0,,1670083662.0,iyre5qv,False,t3_zbe8l6,t3_zbe8l6,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iyre5qv/,0,False,1,False,zbe8l6,lua,t5_2qjla
410,,Wish browsers supported Lua natively,"<div class=""md""><p>Wish browsers supported Lua natively</p>
</div>",1670096156.0,,False,iys8vy4,False,t3_zbe8l6,t1_iyql1do,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iys8vy4/,1,False,9,False,zbe8l6,lua,t5_2qjla
411,solidiquis1,see OPs comment about neovim,"<div class=""md""><p>see OPs comment about neovim</p>
</div>",1670094134.0,,False,iys44it,False,t3_zbe8l6,t1_iys3ddt,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iys44it/,0,False,5,False,zbe8l6,lua,t5_2qjla
412,mbuckbee,I'm in this sub because I'm learning lua for a Redis project.,"<div class=""md""><p>I&#39;m in this sub because I&#39;m learning lua for a Redis project.</p>
</div>",1670120726.0,,False,iytrdve,False,t3_zbe8l6,t1_iys3ddt,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iytrdve/,0,False,1,False,zbe8l6,lua,t5_2qjla
413,fatboychummy,"Seriously, I'd love to use Lua instead of JavaScript.","<div class=""md""><p>Seriously, I&#39;d love to use Lua instead of JavaScript.</p>
</div>",1670100967.0,,False,iyskjlf,False,t3_zbe8l6,t1_iys8vy4,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iyskjlf/,2,False,8,False,zbe8l6,lua,t5_2qjla
414,Rice7th,"eh, i think js was literally meant for the job, since web programming is mostly based around objects","<div class=""md""><p>eh, i think js was literally meant for the job, since web programming is mostly based around objects</p>
</div>",1670102363.0,,False,iysnynv,False,t3_zbe8l6,t1_iyskjlf,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iysnynv/,0,False,1,False,zbe8l6,lua,t5_2qjla
415,m-faith,"yall know this exists right?

there's lua-to-js libraries...

you've not seen them? they're insufficient for you?","<div class=""md""><p>yall know this exists right?</p>

<p>there&#39;s lua-to-js libraries...</p>

<p>you&#39;ve not seen them? they&#39;re insufficient for you?</p>
</div>",1670183039.0,,False,iywrxje,False,t3_zbe8l6,t1_iyskjlf,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iywrxje/,1,False,-1,False,zbe8l6,lua,t5_2qjla
416,fatboychummy,"That adds an extra step to development. Every time you make a single change to the lua code you have to run it through the library to convert it to js code. Not ideal.

Alternatively you use a js lua interpreter, but that slows things down quite a bit. Also not ideal.

Neither of the above are *native* support, which is what I would love to have. Being able to do something like `<script language=""lua"">...</script>` and have it just work out of the box.","<div class=""md""><p>That adds an extra step to development. Every time you make a single change to the lua code you have to run it through the library to convert it to js code. Not ideal.</p>

<p>Alternatively you use a js lua interpreter, but that slows things down quite a bit. Also not ideal.</p>

<p>Neither of the above are <em>native</em> support, which is what I would love to have. Being able to do something like <code>&lt;script language=&quot;lua&quot;&gt;...&lt;/script&gt;</code> and have it just work out of the box.</p>
</div>",1670192741.0,,False,iyxgu8q,False,t3_zbe8l6,t1_iywrxje,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iyxgu8q/,1,False,4,False,zbe8l6,lua,t5_2qjla
417,m-faith,"oh ""native"" support, gotcha. Having a filewatch/runner that automatically compiles eases that process, but understood, its an extra thing and things can be a pain.

I was real excited to see these recently... have you tried any? https://fengari.io/ is the one I was most intrigued by.","<div class=""md""><p>oh &quot;native&quot; support, gotcha. Having a filewatch/runner that automatically compiles eases that process, but understood, its an extra thing and things can be a pain.</p>

<p>I was real excited to see these recently... have you tried any? <a href=""https://fengari.io/"">https://fengari.io/</a> is the one I was most intrigued by.</p>
</div>",1670199234.0,,False,iyxw1i9,False,t3_zbe8l6,t1_iyxgu8q,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iyxw1i9/,1,False,2,False,zbe8l6,lua,t5_2qjla
418,m-faith,"that loads like `<script src=""/my-script.lua"" type=""application/lua"" async></script>` but I guess that would be using an interpreter which slows things down as you said.","<div class=""md""><p>that loads like <code>&lt;script src=&quot;/my-script.lua&quot; type=&quot;application/lua&quot; async&gt;&lt;/script&gt;</code> but I guess that would be using an interpreter which slows things down as you said.</p>
</div>",1670199438.0,,False,iyxwifj,False,t3_zbe8l6,t1_iyxw1i9,/r/lua/comments/zbe8l6/lua_is_the_fourthfastest_growing_language_on/iyxwifj/,0,False,1,False,zbe8l6,lua,t5_2qjla
419,kasbah,Looks very interesting! Does anyone know of anything similar (declarative graphics for VR) in any other languages?,"<div class=""md""><p>Looks very interesting! Does anyone know of anything similar (declarative graphics for VR) in any other languages?</p>
</div>",1481293243.0,,False,dazeqvm,False,t3_5hdhmg,t3_5hdhmg,/r/lua/comments/5hdhmg/lövr_virtual_reality_for_lua_inspired_by_löve/dazeqvm/,1,False,3,False,5hdhmg,lua,t5_2qjla
420,funny_falcon,Why not LÖVER ?,"<div class=""md""><p>Why not LÖVER ?</p>
</div>",1481365790.0,,False,db0o1mo,False,t3_5hdhmg,t3_5hdhmg,/r/lua/comments/5hdhmg/lövr_virtual_reality_for_lua_inspired_by_löve/db0o1mo/,1,False,2,False,5hdhmg,lua,t5_2qjla
421,oneraul,"Looks very cool! I love you documentation web. I spend so much time in those sites and yours looks so friendly :)

Just wanted to ask, would it work with Google Cardboard?","<div class=""md""><p>Looks very cool! I love you documentation web. I spend so much time in those sites and yours looks so friendly :)</p>

<p>Just wanted to ask, would it work with Google Cardboard?</p>
</div>",1481600168.0,,False,db4lr7j,False,t3_5hdhmg,t3_5hdhmg,/r/lua/comments/5hdhmg/lövr_virtual_reality_for_lua_inspired_by_löve/db4lr7j/,1,False,2,False,5hdhmg,lua,t5_2qjla
422,SkereOfficial,This looks promising,"<div class=""md""><p>This looks promising</p>
</div>",1481624441.0,,False,db4xfvo,False,t3_5hdhmg,t3_5hdhmg,/r/lua/comments/5hdhmg/lövr_virtual_reality_for_lua_inspired_by_löve/db4xfvo/,0,False,2,False,5hdhmg,lua,t5_2qjla
423,marijnfs,Great idea,"<div class=""md""><p>Great idea</p>
</div>",1481389038.0,,False,db0xolt,False,t3_5hdhmg,t3_5hdhmg,/r/lua/comments/5hdhmg/lövr_virtual_reality_for_lua_inspired_by_löve/db0xolt/,0,False,1,False,5hdhmg,lua,t5_2qjla
424,TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/love2d] [LÖVR: Virtual reality for Lua inspired by LÖVE, initial 0.1.0 release • xpost \/r\/lua](https://np.reddit.com/r/love2d/comments/5hmio4/lövr_virtual_reality_for_lua_inspired_by_löve/)

[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*

[](#bot)","<div class=""md""><p>I&#39;m a bot, <em>bleep</em>, <em>bloop</em>. Someone has linked to this thread from another place on reddit:</p>

<ul>
<li>[<a href=""/r/love2d"">/r/love2d</a>] <a href=""https://np.reddit.com/r/love2d/comments/5hmio4/l%C3%B6vr_virtual_reality_for_lua_inspired_by_l%C3%B6ve/"">LÖVR: Virtual reality for Lua inspired by LÖVE, initial 0.1.0 release • xpost /r/lua</a></li>
</ul>

<p><a href=""#footer""></a><em><sup>If you follow any of the above links, please respect the rules of reddit and don&#39;t vote in the other threads.</sup> <sup>(<a href=""/r/TotesMessenger"">Info</a></sup> <sup>/</sup> <sup><a href=""/message/compose?to=/r/TotesMessenger"">Contact</a>)</sup></em></p>

<p><a href=""#bot""></a></p>
</div>",1481406389.0,,False,db19hvi,False,t3_5hdhmg,t3_5hdhmg,/r/lua/comments/5hdhmg/lövr_virtual_reality_for_lua_inspired_by_löve/db19hvi/,0,False,1,False,5hdhmg,lua,t5_2qjla
425,orthoxerox,I don't think the graphics are declarative. `love.draw`is called every draw cycle.,"<div class=""md""><p>I don&#39;t think the graphics are declarative. <code>love.draw</code>is called every draw cycle.</p>
</div>",1481582953.0,,False,db48l82,False,t3_5hdhmg,t1_dazeqvm,/r/lua/comments/5hdhmg/lövr_virtual_reality_for_lua_inspired_by_löve/db48l82/,0,False,2,False,5hdhmg,lua,t5_2qjla
426,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1481378308.0,,False,db0rueo,False,t3_5hdhmg,t1_db0o1mo,/r/lua/comments/5hdhmg/lövr_virtual_reality_for_lua_inspired_by_löve/db0rueo/,1,False,7,False,5hdhmg,lua,t5_2qjla
427,bjornbytes,"Unfortunately, LÖVR doesn't work with Google Cardboard right now.  I'm experimenting with adding WebVR support though, which in theory should make things work with Gear VR/Cardboard.  Check back soon!","<div class=""md""><p>Unfortunately, LÖVR doesn&#39;t work with Google Cardboard right now.  I&#39;m experimenting with adding WebVR support though, which in theory should make things work with Gear VR/Cardboard.  Check back soon!</p>
</div>",1481609190.0,,False,db4rl50,True,t3_5hdhmg,t1_db4lr7j,/r/lua/comments/5hdhmg/lövr_virtual_reality_for_lua_inspired_by_löve/db4rl50/,0,False,4,False,5hdhmg,lua,t5_2qjla
428,funny_falcon,You're right. I didn't get it.,"<div class=""md""><p>You&#39;re right. I didn&#39;t get it.</p>
</div>",1481461937.0,,False,db20rl9,False,t3_5hdhmg,t1_db0rueo,/r/lua/comments/5hdhmg/lövr_virtual_reality_for_lua_inspired_by_löve/db20rl9/,0,False,1,False,5hdhmg,lua,t5_2qjla
429,smog_alado,"Very interesting article! An excellent example of explaining research in an accessible manner.

However, I think the author has a small misconception about how the register VM works. The Lua VM still uses a virtual stack, which is a big array of TValues. This is the same stack that the old stack-based VM used and also the same one that the C API currently uses. The difference is that in the stack-based VM the instruction arguments are implicitly popped from the top of the stack while in the register-based VM they can  be anywhere in the function's stack frame. 

The registers in the Lua VM are not mapped to real machine registers. Firstly because there is only a limited set of machine registers and they are already busy with the local variables used by the interpreter itself. But perhaps more importantly also because Lua values are too big to fit inside a machine register. Each Lua value is a combination of the value itself plus a type tag.

That said, the article still correctly states what is really the main benefit of the register-based architecture: less stack manipulation instructions to execute and all instructions have the same size.","<div class=""md""><p>Very interesting article! An excellent example of explaining research in an accessible manner.</p>

<p>However, I think the author has a small misconception about how the register VM works. The Lua VM still uses a virtual stack, which is a big array of TValues. This is the same stack that the old stack-based VM used and also the same one that the C API currently uses. The difference is that in the stack-based VM the instruction arguments are implicitly popped from the top of the stack while in the register-based VM they can  be anywhere in the function&#39;s stack frame. </p>

<p>The registers in the Lua VM are not mapped to real machine registers. Firstly because there is only a limited set of machine registers and they are already busy with the local variables used by the interpreter itself. But perhaps more importantly also because Lua values are too big to fit inside a machine register. Each Lua value is a combination of the value itself plus a type tag.</p>

<p>That said, the article still correctly states what is really the main benefit of the register-based architecture: less stack manipulation instructions to execute and all instructions have the same size.</p>
</div>",1588946583.0,,1588968748.0,fpvkftb,False,t3_gfp73j,t3_gfp73j,/r/lua/comments/gfp73j/interesting_things_about_the_lua_interpreter/fpvkftb/,0,False,9,False,gfp73j,lua,t5_2qjla
430,ws-ilazki,">  and is fairly old compared to the giants like JavaScript, Python, and Ruby – first made in a research lab 1993.

This line is very poorly worded **and** partly incorrect.  Python's about three years *older* than Lua, and the other two are only about two years younger, but the phrasing makes it sound like the age difference is much greater than that.

Interesting read, but that part immediately stood out as being ""off"".","<div class=""md""><blockquote>
<p>and is fairly old compared to the giants like JavaScript, Python, and Ruby – first made in a research lab 1993.</p>
</blockquote>

<p>This line is very poorly worded <strong>and</strong> partly incorrect.  Python&#39;s about three years <em>older</em> than Lua, and the other two are only about two years younger, but the phrasing makes it sound like the age difference is much greater than that.</p>

<p>Interesting read, but that part immediately stood out as being &quot;off&quot;.</p>
</div>",1588934434.0,,False,fpv4ch3,False,t3_gfp73j,t3_gfp73j,/r/lua/comments/gfp73j/interesting_things_about_the_lua_interpreter/fpv4ch3/,1,False,3,False,gfp73j,lua,t5_2qjla
431,DarkWiiPlayer,"I found this link on Hackernews just now, where it didn't get much attention, and thought I'd just repost it here. I'm about to read it myself so I can't yet say how good the content is :D","<div class=""md""><p>I found this link on Hackernews just now, where it didn&#39;t get much attention, and thought I&#39;d just repost it here. I&#39;m about to read it myself so I can&#39;t yet say how good the content is :D</p>
</div>",1588926304.0,,False,fpuwn2a,True,t3_gfp73j,t3_gfp73j,/r/lua/comments/gfp73j/interesting_things_about_the_lua_interpreter/fpuwn2a/,1,False,2,False,gfp73j,lua,t5_2qjla
432,SoCalSurferDude,Thank you. I found the article very interesting.,"<div class=""md""><p>Thank you. I found the article very interesting.</p>
</div>",1590009601.0,,False,fra5l0m,False,t3_gfp73j,t3_gfp73j,/r/lua/comments/gfp73j/interesting_things_about_the_lua_interpreter/fra5l0m/,0,False,1,False,gfp73j,lua,t5_2qjla
433,DarkWiiPlayer,"I had the same thought as I read that line, but it's ultimately inconsequential to the main contents of the article, so I didn't pay it much attention. I can only assume that the author underestimated how old even ""modern"" scripting languages usually are, and just assumed most of them must be inventions of the early to mid 2000s or so.","<div class=""md""><p>I had the same thought as I read that line, but it&#39;s ultimately inconsequential to the main contents of the article, so I didn&#39;t pay it much attention. I can only assume that the author underestimated how old even &quot;modern&quot; scripting languages usually are, and just assumed most of them must be inventions of the early to mid 2000s or so.</p>
</div>",1588936492.0,,False,fpv6fd2,True,t3_gfp73j,t1_fpv4ch3,/r/lua/comments/gfp73j/interesting_things_about_the_lua_interpreter/fpv6fd2/,0,False,1,False,gfp73j,lua,t5_2qjla
434,ggchappell,"I've skimmed it, and it looks quite interesting.","<div class=""md""><p>I&#39;ve skimmed it, and it looks quite interesting.</p>
</div>",1588934384.0,,False,fpv4alz,False,t3_gfp73j,t1_fpuwn2a,/r/lua/comments/gfp73j/interesting_things_about_the_lua_interpreter/fpv4alz/,0,False,2,False,gfp73j,lua,t5_2qjla
435,mevoltz,"Thank you for making these.  I hope your channel grows quickly.  My feedback is positive:  

* Your voice is clear and easy to understand
* The topics are on point and you waste very little time getting through the material
* The graphics and special effects are easy to see (and entertaining)

Keep it up!  I look forward to seeing more.","<div class=""md""><p>Thank you for making these.  I hope your channel grows quickly.  My feedback is positive:  </p>

<ul>
<li>Your voice is clear and easy to understand</li>
<li>The topics are on point and you waste very little time getting through the material</li>
<li>The graphics and special effects are easy to see (and entertaining)</li>
</ul>

<p>Keep it up!  I look forward to seeing more.</p>
</div>",1596478912.0,,False,g08ltjo,False,t3_i2yhty,t3_i2yhty,/r/lua/comments/i2yhty/lua_löve_tutorial_series_for_beginners_youtube/g08ltjo/,1,False,3,False,i2yhty,lua,t5_2qjla
436,InertiaOfGravity,"I live seeing introductory programming tutorials, especially those set in game engines/frameworks. I'm currently preparing for a class where I teach intro to programming with Godot, actually","<div class=""md""><p>I live seeing introductory programming tutorials, especially those set in game engines/frameworks. I&#39;m currently preparing for a class where I teach intro to programming with Godot, actually</p>
</div>",1596483755.0,,False,g08yfk0,False,t3_i2yhty,t3_i2yhty,/r/lua/comments/i2yhty/lua_löve_tutorial_series_for_beginners_youtube/g08yfk0/,1,False,1,False,i2yhty,lua,t5_2qjla
437,DarkWiiPlayer,"Very nice to see such a well-made tutorial in the Lua world!

Löve is a great framework for building games and it's amazing for learning things from the ground up.

However, löve is also pretty low-level; it lets you do everything from scratch, but it also kinda forces you to. It might be worth adding at some point that other engines provide much more functionality already built in, at the cost of some architectural freedom.","<div class=""md""><p>Very nice to see such a well-made tutorial in the Lua world!</p>

<p>Löve is a great framework for building games and it&#39;s amazing for learning things from the ground up.</p>

<p>However, löve is also pretty low-level; it lets you do everything from scratch, but it also kinda forces you to. It might be worth adding at some point that other engines provide much more functionality already built in, at the cost of some architectural freedom.</p>
</div>",1596524384.0,,False,g0axmi8,False,t3_i2yhty,t3_i2yhty,/r/lua/comments/i2yhty/lua_löve_tutorial_series_for_beginners_youtube/g0axmi8/,0,False,1,False,i2yhty,lua,t5_2qjla
438,WMG_Jeeper,"Thank you so much for the kind words, it means a lot!","<div class=""md""><p>Thank you so much for the kind words, it means a lot!</p>
</div>",1596485218.0,,False,g0924th,True,t3_i2yhty,t1_g08ltjo,/r/lua/comments/i2yhty/lua_löve_tutorial_series_for_beginners_youtube/g0924th/,0,False,1,False,i2yhty,lua,t5_2qjla
439,WMG_Jeeper,"Awesome! Learning Godot is on my (quite long) to-do list, it seems really cool!","<div class=""md""><p>Awesome! Learning Godot is on my (quite long) to-do list, it seems really cool!</p>
</div>",1596545815.0,,False,g0bl631,True,t3_i2yhty,t1_g08yfk0,/r/lua/comments/i2yhty/lua_löve_tutorial_series_for_beginners_youtube/g0bl631/,0,False,2,False,i2yhty,lua,t5_2qjla
440,BadBoy6767,History happenin' right here!,"<div class=""md""><p>History happenin&#39; right here!</p>
</div>",1576743062.0,,False,fbd257l,False,t3_ec37u0,t3_ec37u0,/r/lua/comments/ec37u0/call_for_moderators_and_other_rlua_news/fbd257l/,0,False,1,False,ec37u0,lua,t5_2qjla
441,ansible,"Update:

Thanks to everyone that applied to be a moderator!

I'll be sending out invitations in the next week or so.","<div class=""md""><p>Update:</p>

<p>Thanks to everyone that applied to be a moderator!</p>

<p>I&#39;ll be sending out invitations in the next week or so.</p>
</div>",1577988041.0,moderator,False,fcut8r5,True,t3_ec37u0,t3_ec37u0,/r/lua/comments/ec37u0/call_for_moderators_and_other_rlua_news/fcut8r5/,0,False,1,True,ec37u0,lua,t5_2qjla
442,DarkWiiPlayer,"Here are some quick thoughts on the above:

1. Having a simple code of conduct seems like a good idea, though I doubt it would improve anything since discussions over here are already fairly civilized and mostly stay on-topic.
2. Yes.
3. Does that even matter much with the new reddit design? I doubt there's enough people still using the old reddit to start investing time in that *now*
4. Same as 3; is there much of a point to that now?
5. I believe the easiest fix might be to create a sticky thread for people to get started, since most of the newbie questions seem to be about 1) where to start or 2) why Lua and most users apparently can't be bothered to type their question into the search bar first, so having it pinned for everyone to see at the top might help.

EDIT: Also the discord server; put an invite link to that somewhere :)","<div class=""md""><p>Here are some quick thoughts on the above:</p>

<ol>
<li>Having a simple code of conduct seems like a good idea, though I doubt it would improve anything since discussions over here are already fairly civilized and mostly stay on-topic.</li>
<li>Yes.</li>
<li>Does that even matter much with the new reddit design? I doubt there&#39;s enough people still using the old reddit to start investing time in that <em>now</em></li>
<li>Same as 3; is there much of a point to that now?</li>
<li>I believe the easiest fix might be to create a sticky thread for people to get started, since most of the newbie questions seem to be about 1) where to start or 2) why Lua and most users apparently can&#39;t be bothered to type their question into the search bar first, so having it pinned for everyone to see at the top might help.</li>
</ol>

<p>EDIT: Also the discord server; put an invite link to that somewhere :)</p>
</div>",1576675758.0,,False,fbaee0d,False,t3_ec37u0,t3_ec37u0,/r/lua/comments/ec37u0/call_for_moderators_and_other_rlua_news/fbaee0d/,1,False,1,False,ec37u0,lua,t5_2qjla
443,BadBoy6767,"With the extreme push of the new design, 3 and 4 probably shouldn't be top priority but should at least be on the list.","<div class=""md""><p>With the extreme push of the new design, 3 and 4 probably shouldn&#39;t be top priority but should at least be on the list.</p>
</div>",1576677749.0,,False,fbagske,False,t3_ec37u0,t1_fbaee0d,/r/lua/comments/ec37u0/call_for_moderators_and_other_rlua_news/fbagske/,1,False,1,False,ec37u0,lua,t5_2qjla
444,irckeyboardwarrior,"It's important to consider that there is a non-trivial amount of Redditors, especially in the technical community, that prefer to use the old design over the redesign.","<div class=""md""><p>It&#39;s important to consider that there is a non-trivial amount of Redditors, especially in the technical community, that prefer to use the old design over the redesign.</p>
</div>",1576680209.0,,False,fbak2rj,False,t3_ec37u0,t1_fbagske,/r/lua/comments/ec37u0/call_for_moderators_and_other_rlua_news/fbak2rj/,0,False,1,False,ec37u0,lua,t5_2qjla
445,astrofra,"In case people are wondering, this is the engine I used to build this project:[https://www.harfang3d.com](https://www.harfang3d.com)  


(full disclaimer, i work with the harfang team)","<div class=""md""><p>In case people are wondering, this is the engine I used to build this project:<a href=""https://www.harfang3d.com"">https://www.harfang3d.com</a>  </p>

<p>(full disclaimer, i work with the harfang team)</p>
</div>",1655030588.0,,1655131552.0,ic2opi9,True,t3_vahve0,t3_vahve0,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic2opi9/,1,False,9,False,vahve0,lua,t5_2qjla
446,,What's that BS at the bottom? looks tacky.,"<div class=""md""><p>What&#39;s that BS at the bottom? looks tacky.</p>
</div>",1655046847.0,,False,ic3fj2w,False,t3_vahve0,t3_vahve0,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic3fj2w/,1,False,4,False,vahve0,lua,t5_2qjla
447,,"me likey, that looks awesome!","<div class=""md""><p>me likey, that looks awesome!</p>
</div>",1655030896.0,,False,ic2p268,False,t3_vahve0,t3_vahve0,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic2p268/,0,False,3,False,vahve0,lua,t5_2qjla
448,NotThisBlackDuck,"Anything particularly noteworthy about harfang? I've played with godot, unity and unreal.","<div class=""md""><p>Anything particularly noteworthy about harfang? I&#39;ve played with godot, unity and unreal.</p>
</div>",1655057949.0,,False,ic43for,False,t3_vahve0,t3_vahve0,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic43for/,1,False,2,False,vahve0,lua,t5_2qjla
449,Fledo,So that's where I can find the Harfang Engine and the Harfang Studio Editor? On harfang3d.com?,"<div class=""md""><p>So that&#39;s where I can find the Harfang Engine and the Harfang Studio Editor? On harfang3d.com?</p>
</div>",1655046652.0,,False,ic3f4kw,False,t3_vahve0,t1_ic2opi9,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic3f4kw/,1,False,3,False,vahve0,lua,t5_2qjla
450,astrofra,"Ahah, nice catch, I see a connoisseur here.  
It's an old scrolltext from a very old Amiga cracktro, from back in the 80's when hackers used to clash through messages left on floppy disks.

[https://www.youtube.com/watch?v=NJjQM982S6s](https://www.youtube.com/watch?v=NJjQM982S6s)

I used it as a placeholder text, a more decent & well-manered message will end-up there eventually.","<div class=""md""><p>Ahah, nice catch, I see a connoisseur here.<br/>
It&#39;s an old scrolltext from a very old Amiga cracktro, from back in the 80&#39;s when hackers used to clash through messages left on floppy disks.</p>

<p><a href=""https://www.youtube.com/watch?v=NJjQM982S6s"">https://www.youtube.com/watch?v=NJjQM982S6s</a></p>

<p>I used it as a placeholder text, a more decent &amp; well-manered message will end-up there eventually.</p>
</div>",1655047480.0,,False,ic3guze,True,t3_vahve0,t1_ic3fj2w,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic3guze/,1,False,8,False,vahve0,lua,t5_2qjla
451,astrofra,"Well, the main difference I can see is that you can code within the existing Python or Lua vanilla VMs. Start Python, `import harfang` (or `require(""harfang"")` in Lua) and you have a 3D engine in your favorite language and ecosystem.

The engine is truly open-source (Unreal is not really, imo).

The C++ SDK can be used too, and we are working on Harfang GoLang (the API is ready, we need to work on the documentation).

About the editor (Harfang Studio), in the current version it's an asset/scene/animation editor, you won't code in Studio.
On a daily basis, our users work either in VSCode or Pycharm :)

(on a personal level, I have a huge respect for the Godot team)","<div class=""md""><p>Well, the main difference I can see is that you can code within the existing Python or Lua vanilla VMs. Start Python, <code>import harfang</code> (or <code>require(&quot;harfang&quot;)</code> in Lua) and you have a 3D engine in your favorite language and ecosystem.</p>

<p>The engine is truly open-source (Unreal is not really, imo).</p>

<p>The C++ SDK can be used too, and we are working on Harfang GoLang (the API is ready, we need to work on the documentation).</p>

<p>About the editor (Harfang Studio), in the current version it&#39;s an asset/scene/animation editor, you won&#39;t code in Studio.
On a daily basis, our users work either in VSCode or Pycharm :)</p>

<p>(on a personal level, I have a huge respect for the Godot team)</p>
</div>",1655060597.0,,False,ic499pf,True,t3_vahve0,t1_ic43for,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic499pf/,1,False,3,False,vahve0,lua,t5_2qjla
452,astrofra,"Click on the url, follow the ""Studio"" entry on top of the screen, then ""download"".  
If you want to try out the editor, you might want to download stuff from here and load this project file (project.prj) :

https://github.com/harfang3d/tutorials-hg2/tree/master/resources","<div class=""md""><p>Click on the url, follow the &quot;Studio&quot; entry on top of the screen, then &quot;download&quot;.<br/>
If you want to try out the editor, you might want to download stuff from here and load this project file (project.prj) :</p>

<p><a href=""https://github.com/harfang3d/tutorials-hg2/tree/master/resources"">https://github.com/harfang3d/tutorials-hg2/tree/master/resources</a></p>
</div>",1655047584.0,,False,ic3h2vs,True,t3_vahve0,t1_ic3f4kw,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic3h2vs/,0,False,3,False,vahve0,lua,t5_2qjla
453,,put that navy seal copypasta,"<div class=""md""><p>put that navy seal copypasta</p>
</div>",1655049007.0,,False,ic3k3vg,False,t3_vahve0,t1_ic3guze,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic3k3vg/,0,False,3,False,vahve0,lua,t5_2qjla
454,astrofra,"(full disclaimer, i work with the harfang team)","<div class=""md""><p>(full disclaimer, i work with the harfang team)</p>
</div>",1655060706.0,,False,ic49ice,True,t3_vahve0,t1_ic499pf,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic49ice/,1,False,3,False,vahve0,lua,t5_2qjla
455,Furry_69,"Should probably make that a top level comment, I feel like you should probably tell people that you're effectively advertising here.","<div class=""md""><p>Should probably make that a top level comment, I feel like you should probably tell people that you&#39;re effectively advertising here.</p>
</div>",1655093734.0,,False,ic61k8g,False,t3_vahve0,t1_ic49ice,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/ic61k8g/,1,False,2,False,vahve0,lua,t5_2qjla
456,astrofra,"Done!  
Thanks for the advice :)","<div class=""md""><p>Done!<br/>
Thanks for the advice :)</p>
</div>",1655393271.0,,False,iclbrl2,True,t3_vahve0,t1_ic61k8g,/r/lua/comments/vahve0/underwater_scenery_coded_in_lua_with_the_harfang/iclbrl2/,0,False,1,False,vahve0,lua,t5_2qjla
457,randrews,"Wow, this is really awesome. Especially the HTML5 stuff; there have been a couple attempts at that for Love2d but nothing that stuck.","<div class=""md""><p>Wow, this is really awesome. Especially the HTML5 stuff; there have been a couple attempts at that for Love2d but nothing that stuck.</p>
</div>",1455154607.0,,False,czvi8t0,False,t3_454sos,t3_454sos,/r/lua/comments/454sos/amulet_lua_game_engine/czvi8t0/,2,False,7,False,454sos,lua,t5_2qjla
458,xPhoenix777,"This is a low level engine - but a REALLY well done one. Not mine!  
  
Games play on Mac/Win/Lin/iOS/HTML5","<div class=""md""><p>This is a low level engine - but a REALLY well done one. Not mine!  </p>

<p>Games play on Mac/Win/Lin/iOS/HTML5</p>
</div>",1455136206.0,,False,czv62bp,True,t3_454sos,t3_454sos,/r/lua/comments/454sos/amulet_lua_game_engine/czv62bp/,0,False,4,False,454sos,lua,t5_2qjla
459,fuxoft,"Wow, that looks really promising!","<div class=""md""><p>Wow, that looks really promising!</p>
</div>",1455137279.0,,False,czv6urw,False,t3_454sos,t3_454sos,/r/lua/comments/454sos/amulet_lua_game_engine/czv6urw/,0,False,3,False,454sos,lua,t5_2qjla
460,redrick_schuhart,"Very impressive piece of work: compiles out of the box, almost complete docs, shaders and sound look awesome. I look forward to playing around with this. ","<div class=""md""><p>Very impressive piece of work: compiles out of the box, almost complete docs, shaders and sound look awesome. I look forward to playing around with this. </p>
</div>",1455143895.0,,False,czvbmfs,False,t3_454sos,t3_454sos,/r/lua/comments/454sos/amulet_lua_game_engine/czvbmfs/,1,False,3,False,454sos,lua,t5_2qjla
461,xPhoenix777,"Ya, I have been searching for quite some time. I stumbled on this and another engine that are built wonderfully for web (this on has more platform support - the other was just web and linux). It's tricky stuff to compile for the web AND do it well.","<div class=""md""><p>Ya, I have been searching for quite some time. I stumbled on this and another engine that are built wonderfully for web (this on has more platform support - the other was just web and linux). It&#39;s tricky stuff to compile for the web AND do it well.</p>
</div>",1455211289.0,,False,czw77ny,True,t3_454sos,t1_czvi8t0,/r/lua/comments/454sos/amulet_lua_game_engine/czw77ny/,0,False,1,False,454sos,lua,t5_2qjla
462,EricTboneJackson,"FYI, MOAI (very powerful Lua-based game engine used in several commercial titles) supports HTML 5.","<div class=""md""><p>FYI, MOAI (very powerful Lua-based game engine used in several commercial titles) supports HTML 5.</p>
</div>",1455737866.0,,False,d03k1a3,False,t3_454sos,t1_czvi8t0,/r/lua/comments/454sos/amulet_lua_game_engine/d03k1a3/,0,False,1,False,454sos,lua,t5_2qjla
463,xPhoenix777,"Again, not mine - but I whole heartedly agree with you. Author is quite active AND it has an online editor with examples: http://www.amulet.xyz/editor.html","<div class=""md""><p>Again, not mine - but I whole heartedly agree with you. Author is quite active AND it has an online editor with examples: <a href=""http://www.amulet.xyz/editor.html"">http://www.amulet.xyz/editor.html</a></p>
</div>",1455144025.0,,False,czvbpnl,True,t3_454sos,t1_czvbmfs,/r/lua/comments/454sos/amulet_lua_game_engine/czvbpnl/,1,False,4,False,454sos,lua,t5_2qjla
464,redrick_schuhart,Wow that's very cool - emscripten I guess?,"<div class=""md""><p>Wow that&#39;s very cool - emscripten I guess?</p>
</div>",1455196019.0,,False,czvy67n,False,t3_454sos,t1_czvbpnl,/r/lua/comments/454sos/amulet_lua_game_engine/czvy67n/,1,False,2,False,454sos,lua,t5_2qjla
465,xPhoenix777,Yep.,"<div class=""md""><p>Yep.</p>
</div>",1455211215.0,,False,czw75qx,True,t3_454sos,t1_czvy67n,/r/lua/comments/454sos/amulet_lua_game_engine/czw75qx/,0,False,1,False,454sos,lua,t5_2qjla
466,notkraftman,also worth checking out http://learnxinyminutes.com for a similar intro to most other languages.,"<div class=""md""><p>also worth checking out <a href=""http://learnxinyminutes.com"">http://learnxinyminutes.com</a> for a similar intro to most other languages.</p>
</div>",1470092166.0,,False,d609hr9,False,t3_4vlwtc,t3_4vlwtc,/r/lua/comments/4vlwtc/learn_lua_in_15_minutes/d609hr9/,1,False,3,False,4vlwtc,lua,t5_2qjla
467,lyspr,"Which is where Tyler posted this...

","<div class=""md""><p>Which is where Tyler posted this...</p>
</div>",1470225690.0,,False,d62cof0,False,t3_4vlwtc,t1_d609hr9,/r/lua/comments/4vlwtc/learn_lua_in_15_minutes/d62cof0/,1,False,1,False,4vlwtc,lua,t5_2qjla
468,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1470227429.0,,False,d62dgpe,False,t3_4vlwtc,t1_d62cof0,/r/lua/comments/4vlwtc/learn_lua_in_15_minutes/d62dgpe/,1,False,1,False,4vlwtc,lua,t5_2qjla
469,lyspr,Yup. He's a pretty cool guy.,"<div class=""md""><p>Yup. He&#39;s a pretty cool guy.</p>
</div>",1470227871.0,,False,d62doic,False,t3_4vlwtc,t1_d62dgpe,/r/lua/comments/4vlwtc/learn_lua_in_15_minutes/d62doic/,0,False,1,False,4vlwtc,lua,t5_2qjla
470,goodtower,"I totally agree.  As an occasional programmer the simplicity of Lua means I dont have to climb the learning curve again every time I want to write a small program.
Another virtue of Lua is the power of the string manipulation programs.  I frequently use it to extract data from various semi-tablular data sources.  It also interacts well with Excel via csv. ","<div class=""md""><p>I totally agree.  As an occasional programmer the simplicity of Lua means I dont have to climb the learning curve again every time I want to write a small program.
Another virtue of Lua is the power of the string manipulation programs.  I frequently use it to extract data from various semi-tablular data sources.  It also interacts well with Excel via csv. </p>
</div>",1472521752.0,,False,d7224o9,False,t3_508jbx,t3_508jbx,/r/lua/comments/508jbx/the_most_obvious_strength_of_lua_is_its/d7224o9/,0,False,5,False,508jbx,lua,t5_2qjla
471,redrick_schuhart,"The other cool thing about having deep and powerful features in a simple language is that it makes it easy to use as a target for your own languages or DSLs, or as an implementation environment for them - or both. [Moonscript](http://moonscript.org/) and [l2l](https://github.com/meric/l2l) are examples that have inspired me. ","<div class=""md""><p>The other cool thing about having deep and powerful features in a simple language is that it makes it easy to use as a target for your own languages or DSLs, or as an implementation environment for them - or both. <a href=""http://moonscript.org/"">Moonscript</a> and <a href=""https://github.com/meric/l2l"">l2l</a> are examples that have inspired me. </p>
</div>",1472622757.0,,False,d73o9x7,False,t3_508jbx,t3_508jbx,/r/lua/comments/508jbx/the_most_obvious_strength_of_lua_is_its/d73o9x7/,0,False,2,False,508jbx,lua,t5_2qjla
472,piXelicidio,"Nice! I  have a dream of making a 2D game engine purely for Luajit and focused on desktops. Would perfectly fit inside your OS :)   
Bookmarked and starred your repo to take look later.","<div class=""md""><p>Nice! I  have a dream of making a 2D game engine purely for Luajit and focused on desktops. Would perfectly fit inside your OS :)<br/>
Bookmarked and starred your repo to take look later.</p>
</div>",1605063445.0,,False,gbwcobn,False,t3_jrznr5,t3_jrznr5,/r/lua/comments/jrznr5/luajit_based_os/gbwcobn/,2,False,4,False,jrznr5,lua,t5_2qjla
473,WrongAndBeligerent,"If any of it works, I'm already impressed.  Never forget that copying QNX will be cutting edge for at least the next 20 years.","<div class=""md""><p>If any of it works, I&#39;m already impressed.  Never forget that copying QNX will be cutting edge for at least the next 20 years.</p>
</div>",1605064737.0,,False,gbwewg5,False,t3_jrznr5,t3_jrznr5,/r/lua/comments/jrznr5/luajit_based_os/gbwewg5/,0,False,3,False,jrznr5,lua,t5_2qjla
474,beaubeautastic,"ive thought about a luajit kernel for a really long time. all code could run in ring 0 making system calls very fast, opening up a lot of possibility. could look like what unix was supposed to look like, with the filesystem being just a regular table and giving developers access to the objects themselves.","<div class=""md""><p>ive thought about a luajit kernel for a really long time. all code could run in ring 0 making system calls very fast, opening up a lot of possibility. could look like what unix was supposed to look like, with the filesystem being just a regular table and giving developers access to the objects themselves.</p>
</div>",1605070491.0,,False,gbwo32q,False,t3_jrznr5,t3_jrznr5,/r/lua/comments/jrznr5/luajit_based_os/gbwo32q/,1,False,3,False,jrznr5,lua,t5_2qjla
475,hawhill,"Hm, so it is something like LJ/Linux (c.f. GNU/Linux)? A Linux kernel plus a ""LuaJIT userland""? You have listed some packages - and indeed, probably LuaJIT has to be added itself - that I can't imagine running without a libc, so I guess that's still there? If not for other stuff, then at least for heap management? What function fulfills LuaJIT in this - is it what drives the shell? And possibly the init/PID 1 process?","<div class=""md""><p>Hm, so it is something like LJ/Linux (c.f. GNU/Linux)? A Linux kernel plus a &quot;LuaJIT userland&quot;? You have listed some packages - and indeed, probably LuaJIT has to be added itself - that I can&#39;t imagine running without a libc, so I guess that&#39;s still there? If not for other stuff, then at least for heap management? What function fulfills LuaJIT in this - is it what drives the shell? And possibly the init/PID 1 process?</p>
</div>",1605085036.0,,False,gbx4ev6,False,t3_jrznr5,t3_jrznr5,/r/lua/comments/jrznr5/luajit_based_os/gbx4ev6/,1,False,3,False,jrznr5,lua,t5_2qjla
476,nelsci,"Great work! When I saw your post, I remembered this paper [https://www.netbsd.org/\~lneto/dls14.pdf](https://www.netbsd.org/~lneto/dls14.pdf)","<div class=""md""><p>Great work! When I saw your post, I remembered this paper <a href=""https://www.netbsd.org/%7Elneto/dls14.pdf"">https://www.netbsd.org/~lneto/dls14.pdf</a></p>
</div>",1605092679.0,,False,gbxbb04,False,t3_jrznr5,t3_jrznr5,/r/lua/comments/jrznr5/luajit_based_os/gbxbb04/,1,False,3,False,jrznr5,lua,t5_2qjla
477,Wolf_4501,I suggest you to use [yieldhook](https://github.com/evg-zhabotinsky/yieldhook) to possibly create pre-empative multitasking (it will yield running coroutine when the debug hook that attached to the coroutine return true) and i success doing that but i dont know if it will compile for LuaJIT,"<div class=""md""><p>I suggest you to use <a href=""https://github.com/evg-zhabotinsky/yieldhook"">yieldhook</a> to possibly create pre-empative multitasking (it will yield running coroutine when the debug hook that attached to the coroutine return true) and i success doing that but i dont know if it will compile for LuaJIT</p>
</div>",1605089407.0,,False,gbx8avy,False,t3_jrznr5,t3_jrznr5,/r/lua/comments/jrznr5/luajit_based_os/gbx8avy/,1,False,2,False,jrznr5,lua,t5_2qjla
478,isr786,"You mentioned in one of your comments that you have had some exposure to Plan9. In which case, the following might be of interest (assuming you didn't already know about his - perhaps you do!):

Inferno was/is essentially the plan9 os boiled down into a vm. This vm can itself run on baremetal (in which case, it is the OS), or run as an app under osx, linux, etc.

Within inferno, you have access to much of the original plan9 goodness. Everything is a file, everything uses 9p. So you can coble together a distributed system by just mounting /dev/cpu from others, etc). It even has acme! Plus it has a few additions (inferno's shell is highly modular, and can be used a proper scripting language).

Unlike plan9, inferno is implemented in lingo. You can think of lingo as a precursor to go (Rob Pike being involved with both).

Node9 is an (unfortunately stalled) effort to take Inferno, rip out limbo, and replace it with lua. With some interesting ideas on how lua croutines can be used in lieu of processes, etc.

- [git repo](https://github.com/jvburnes/node9)

- [hacker news thread](https://news.ycombinator.com/item?id=9704517)

Thought this might be of interest :-)","<div class=""md""><p>You mentioned in one of your comments that you have had some exposure to Plan9. In which case, the following might be of interest (assuming you didn&#39;t already know about his - perhaps you do!):</p>

<p>Inferno was/is essentially the plan9 os boiled down into a vm. This vm can itself run on baremetal (in which case, it is the OS), or run as an app under osx, linux, etc.</p>

<p>Within inferno, you have access to much of the original plan9 goodness. Everything is a file, everything uses 9p. So you can coble together a distributed system by just mounting /dev/cpu from others, etc). It even has acme! Plus it has a few additions (inferno&#39;s shell is highly modular, and can be used a proper scripting language).</p>

<p>Unlike plan9, inferno is implemented in lingo. You can think of lingo as a precursor to go (Rob Pike being involved with both).</p>

<p>Node9 is an (unfortunately stalled) effort to take Inferno, rip out limbo, and replace it with lua. With some interesting ideas on how lua croutines can be used in lieu of processes, etc.</p>

<ul>
<li><p><a href=""https://github.com/jvburnes/node9"">git repo</a></p></li>
<li><p><a href=""https://news.ycombinator.com/item?id=9704517"">hacker news thread</a></p></li>
</ul>

<p>Thought this might be of interest :-)</p>
</div>",1605144616.0,,False,gbztj38,False,t3_jrznr5,t3_jrznr5,/r/lua/comments/jrznr5/luajit_based_os/gbztj38/,1,False,2,False,jrznr5,lua,t5_2qjla
479,Barp_the_Wire,"Damn this is awesome!

Looks my dreams come true, I will definitely check it out.","<div class=""md""><p>Damn this is awesome!</p>

<p>Looks my dreams come true, I will definitely check it out.</p>
</div>",1605168159.0,,False,gc0vzoo,False,t3_jrznr5,t3_jrznr5,/r/lua/comments/jrznr5/luajit_based_os/gc0vzoo/,1,False,2,False,jrznr5,lua,t5_2qjla
480,oyo321,"I really dislike, that most people believe great companies would keep the informatics sector alive. They don't. In reality **coders like you keep the things going**! This is impressive! Coders like you have inventive ideas and realize them out of pure fun! Now I am motivated enough to work again on my Love2D project.","<div class=""md""><p>I really dislike, that most people believe great companies would keep the informatics sector alive. They don&#39;t. In reality <strong>coders like you keep the things going</strong>! This is impressive! Coders like you have inventive ideas and realize them out of pure fun! Now I am motivated enough to work again on my Love2D project.</p>
</div>",1605281169.0,,False,gc5q25x,False,t3_jrznr5,t3_jrznr5,/r/lua/comments/jrznr5/luajit_based_os/gc5q25x/,0,False,2,False,jrznr5,lua,t5_2qjla
481,dlannan68,"Oh. Some notes: 

Beware running samples! Some will not exit - no signal handling yet :)  (its going in now). 

To look at available commands type help. 

Use exec to run a real binary, and dofile to run lua scripts. Things will break! 

And DONT run the development system outside of qemu unless you really understand what will happen. You \_can\_ completely break your linux environment if you do the wrong thing. I would always recommend running in qemu.","<div class=""md""><p>Oh. Some notes: </p>

<p>Beware running samples! Some will not exit - no signal handling yet :)  (its going in now). </p>

<p>To look at available commands type help. </p>

<p>Use exec to run a real binary, and dofile to run lua scripts. Things will break! </p>

<p>And DONT run the development system outside of qemu unless you really understand what will happen. You _can_ completely break your linux environment if you do the wrong thing. I would always recommend running in qemu.</p>
</div>",1605065502.0,,False,gbwg7m1,True,t3_jrznr5,t3_jrznr5,/r/lua/comments/jrznr5/luajit_based_os/gbwg7m1/,0,False,3,False,jrznr5,lua,t5_2qjla
482,dlannan68,"Thanks. Yes you should be able to run framebuffer styled setups quite easily. The current aim is to use sdl, cairo or fbdev directly via a lua interface (with a sprinkling of ffi c calls) . All rendering is via /dev/fb0 at the moment. This should allow it to be used on different platforms with some massaging.

I also hope to get an egl driver working too, but there are a number of things that need to be sorted out for that. It will also end up being very FBP (flow based programming) oriented, so it might be a little quirky :)","<div class=""md""><p>Thanks. Yes you should be able to run framebuffer styled setups quite easily. The current aim is to use sdl, cairo or fbdev directly via a lua interface (with a sprinkling of ffi c calls) . All rendering is via /dev/fb0 at the moment. This should allow it to be used on different platforms with some massaging.</p>

<p>I also hope to get an egl driver working too, but there are a number of things that need to be sorted out for that. It will also end up being very FBP (flow based programming) oriented, so it might be a little quirky :)</p>
</div>",1605065122.0,,False,gbwfkbg,True,t3_jrznr5,t1_gbwcobn,/r/lua/comments/jrznr5/luajit_based_os/gbwfkbg/,1,False,3,False,jrznr5,lua,t5_2qjla
483,WrongAndBeligerent,Like LOVE 2D?,"<div class=""md""><p>Like LOVE 2D?</p>
</div>",1605064386.0,,False,gbwear8,False,t3_jrznr5,t1_gbwcobn,/r/lua/comments/jrznr5/luajit_based_os/gbwear8/,2,False,4,False,jrznr5,lua,t5_2qjla
484,dlannan68,"Hi, yes exactly. This has been something Ive been thinking of since I was first introduced to Lua a while back. Ideally, once the basics are working, Id like to not have a filesystem (per se) and rather a simple indexing system like redis or memcache. Redis is preferrable because then clustering, and a number of other features come with the system. 

You would still \_use\_ and program the system normally (fopen etc) but everything will be held in protected structures like redis. It also makes backups, save points, and so on much easier to implement. However.. I am only just at the beginning of this little adventure. 

Its been quite fun, it reminds me of coding on the C64 and Amiga again. Where the access and definition of what happens is entirely up to you :)","<div class=""md""><p>Hi, yes exactly. This has been something Ive been thinking of since I was first introduced to Lua a while back. Ideally, once the basics are working, Id like to not have a filesystem (per se) and rather a simple indexing system like redis or memcache. Redis is preferrable because then clustering, and a number of other features come with the system. </p>

<p>You would still _use_ and program the system normally (fopen etc) but everything will be held in protected structures like redis. It also makes backups, save points, and so on much easier to implement. However.. I am only just at the beginning of this little adventure. </p>

<p>Its been quite fun, it reminds me of coding on the C64 and Amiga again. Where the access and definition of what happens is entirely up to you :)</p>
</div>",1605070845.0,,False,gbwol3b,True,t3_jrznr5,t1_gbwo32q,/r/lua/comments/jrznr5/luajit_based_os/gbwol3b/,0,False,6,False,jrznr5,lua,t5_2qjla
485,dlannan68,"Hi, good questions, and yes, Im a bit of an idiot. Luajit should be in that list. 

A generic Linux kernel is loaded (AMD64 bit at the moment, but this can be ARM etc). There are a usual set of GNU libs. As time goes on, I will reduce these and end up using things like musl (would prefer if everything was MIT, but not there yet). This runs the kernel process after booting from grub. 

The first init/PID 1 process is Luajit as you rightly guessed. The shell is provided mostly by scripts and the great lummander toolkit. Its \_very\_ rudimentary at the moment. But lummander has an excellent command extension system. Will add tab completion and so on in the near future (its one of the thing that annoys me most at the moment :) ). 

Additionally, the future use will be Luajit starting a ""process manager"" of sorts, that launches and spawns child Luajit's running applications/services etc. This us where FBP will be heavily used. 

Hope that explanation helps. Im still working through the ""hows"" at the moment, and will put some documentation on the github page once I confirm working elements.

Thanks again for the feedback.","<div class=""md""><p>Hi, good questions, and yes, Im a bit of an idiot. Luajit should be in that list. </p>

<p>A generic Linux kernel is loaded (AMD64 bit at the moment, but this can be ARM etc). There are a usual set of GNU libs. As time goes on, I will reduce these and end up using things like musl (would prefer if everything was MIT, but not there yet). This runs the kernel process after booting from grub. </p>

<p>The first init/PID 1 process is Luajit as you rightly guessed. The shell is provided mostly by scripts and the great lummander toolkit. Its _very_ rudimentary at the moment. But lummander has an excellent command extension system. Will add tab completion and so on in the near future (its one of the thing that annoys me most at the moment :) ). </p>

<p>Additionally, the future use will be Luajit starting a &quot;process manager&quot; of sorts, that launches and spawns child Luajit&#39;s running applications/services etc. This us where FBP will be heavily used. </p>

<p>Hope that explanation helps. Im still working through the &quot;hows&quot; at the moment, and will put some documentation on the github page once I confirm working elements.</p>

<p>Thanks again for the feedback.</p>
</div>",1605088813.0,,False,gbx7rzj,True,t3_jrznr5,t1_gbx4ev6,/r/lua/comments/jrznr5/luajit_based_os/gbx7rzj/,2,False,3,False,jrznr5,lua,t5_2qjla
486,dlannan68,"Ahh yes. Classic paper :) ..  has definitely been a part inspiration. As well as Justin's amazing work with ljsyscall. Which has really helped things along a huge amount.

[https://www.lua.org/wshop13/Cormack.pdf](https://www.lua.org/wshop13/Cormack.pdf)

Thanks for the feedback.","<div class=""md""><p>Ahh yes. Classic paper :) ..  has definitely been a part inspiration. As well as Justin&#39;s amazing work with ljsyscall. Which has really helped things along a huge amount.</p>

<p><a href=""https://www.lua.org/wshop13/Cormack.pdf"">https://www.lua.org/wshop13/Cormack.pdf</a></p>

<p>Thanks for the feedback.</p>
</div>",1605095363.0,,False,gbxdx1t,True,t3_jrznr5,t1_gbxbb04,/r/lua/comments/jrznr5/luajit_based_os/gbxdx1t/,0,False,3,False,jrznr5,lua,t5_2qjla
487,dlannan68,">when

Thanks, I'll check it out. Ive used debug hooks in the past like debugger.lua (which is pretty awesome). If its clean C, then it should work fine, thanks again for the tip.

\[update\]

Im not sure I can use this, since its Lua5.3. It might be able to be converted though. Oddly, I am needing something like this at the moment, so thankyou for the suggestion. I'll be investigating more into this package.","<div class=""md""><blockquote>
<p>when</p>
</blockquote>

<p>Thanks, I&#39;ll check it out. Ive used debug hooks in the past like debugger.lua (which is pretty awesome). If its clean C, then it should work fine, thanks again for the tip.</p>

<p>[update]</p>

<p>Im not sure I can use this, since its Lua5.3. It might be able to be converted though. Oddly, I am needing something like this at the moment, so thankyou for the suggestion. I&#39;ll be investigating more into this package.</p>
</div>",1605095217.0,,1605135337.0,gbxdro6,True,t3_jrznr5,t1_gbx8avy,/r/lua/comments/jrznr5/luajit_based_os/gbxdro6/,1,False,2,False,jrznr5,lua,t5_2qjla
488,dlannan68,"Thankyou. Yes, I have used Inferno (or attempted to). There is also a variant that runs lua as its base scripting system (cant remember the name). The 9p file system is quite awesome though, I like the natural way it works across distributed systems. There are some nice 9p c libraries Id like to try out in the future, but I need to determine how that will integrate with the redis backend. Also, little note, 9p is supported by qemu :)  which makes development much nicer too: [https://www.linux-kvm.org/page/9p\_virtio](https://www.linux-kvm.org/page/9p_virtio)

For me. Simplicity and flexibility is key. LJOS I hope to grow as something \_anyone\_ can jump in and just start using. Think C64, Apple, DOS (+GWBasic). Where you, the author, can control the tool (the computer) quickly and easily. 

A simple example: I really want to have singular application solutions - there wont be 12 ways to open a text file. Just one. And its built into the OS. 

Same with media files, and similar. Where the data is strict, the usage will be also. I dont want confusion on ""how to use a data source"". This is a little bit over-bearing possibly, but I really want a stable, simple system I can use and rely upon.  

Sorry.. about the ideology. :)","<div class=""md""><p>Thankyou. Yes, I have used Inferno (or attempted to). There is also a variant that runs lua as its base scripting system (cant remember the name). The 9p file system is quite awesome though, I like the natural way it works across distributed systems. There are some nice 9p c libraries Id like to try out in the future, but I need to determine how that will integrate with the redis backend. Also, little note, 9p is supported by qemu :)  which makes development much nicer too: <a href=""https://www.linux-kvm.org/page/9p_virtio"">https://www.linux-kvm.org/page/9p_virtio</a></p>

<p>For me. Simplicity and flexibility is key. LJOS I hope to grow as something _anyone_ can jump in and just start using. Think C64, Apple, DOS (+GWBasic). Where you, the author, can control the tool (the computer) quickly and easily. </p>

<p>A simple example: I really want to have singular application solutions - there wont be 12 ways to open a text file. Just one. And its built into the OS. </p>

<p>Same with media files, and similar. Where the data is strict, the usage will be also. I dont want confusion on &quot;how to use a data source&quot;. This is a little bit over-bearing possibly, but I really want a stable, simple system I can use and rely upon.  </p>

<p>Sorry.. about the ideology. :)</p>
</div>",1605157094.0,,False,gc0etf7,True,t3_jrznr5,t1_gbztj38,/r/lua/comments/jrznr5/luajit_based_os/gc0etf7/,1,False,1,False,jrznr5,lua,t5_2qjla
489,dlannan68,"Could be your nightmares too :) .. it works, but very specific. x64 only and its a fair bit in flux at the moment. Lots of great suggestions coming from here, so thanks for the support.","<div class=""md""><p>Could be your nightmares too :) .. it works, but very specific. x64 only and its a fair bit in flux at the moment. Lots of great suggestions coming from here, so thanks for the support.</p>
</div>",1605174474.0,,False,gc14jh4,True,t3_jrznr5,t1_gc0vzoo,/r/lua/comments/jrznr5/luajit_based_os/gc14jh4/,0,False,2,False,jrznr5,lua,t5_2qjla
490,,have you looked at [arcan](https://arcan-fe.com)?,"<div class=""md""><p>have you looked at <a href=""https://arcan-fe.com"">arcan</a>?</p>
</div>",1605071461.0,,False,gbwpfyr,False,t3_jrznr5,t1_gbwfkbg,/r/lua/comments/jrznr5/luajit_based_os/gbwpfyr/,1,False,2,False,jrznr5,lua,t5_2qjla
491,piXelicidio,"Similar. Main difference: Love2D source is C++. While my hypothetical 2D engine  full source will be Lua for LuaJit, so you can contribute without knowing C++.","<div class=""md""><p>Similar. Main difference: Love2D source is C++. While my hypothetical 2D engine  full source will be Lua for LuaJit, so you can contribute without knowing C++.</p>
</div>",1605113313.0,,False,gby6vio,False,t3_jrznr5,t1_gbwear8,/r/lua/comments/jrznr5/luajit_based_os/gby6vio/,1,False,4,False,jrznr5,lua,t5_2qjla
492,dlannan68,"Love 2D is an 'engine' which is an extra interface Id prefer not to have. I have used many systems like this and the main problem I often face is the fact that the chosen API or interface lacks something when trying to implement a feature. Then the interface either needs to be extended or worked around.

By using ffi, and lua only (with some c tools - for the time being) the access is open. Allowing as much or as little is as needed at the time.

For reference have a look at ufo: [https://github.com/malkia/ufo](https://github.com/malkia/ufo) (which started things like power, and others)  Also lfw:  [https://github.com/pga1992/luaforwindows](https://github.com/pga1992/luaforwindows) (this started this journey for me, around 10+yrs ago).

And also have a look at luvit: [https://luvit.io/](https://luvit.io/)  I have used this for commercial systems, it is very powerful.

I should note. If you like Love2D, then you might like Defold more :) I did. :)

[https://defold.com/](https://defold.com/)  Created and maintained by the makers of candy crush.","<div class=""md""><p>Love 2D is an &#39;engine&#39; which is an extra interface Id prefer not to have. I have used many systems like this and the main problem I often face is the fact that the chosen API or interface lacks something when trying to implement a feature. Then the interface either needs to be extended or worked around.</p>

<p>By using ffi, and lua only (with some c tools - for the time being) the access is open. Allowing as much or as little is as needed at the time.</p>

<p>For reference have a look at ufo: <a href=""https://github.com/malkia/ufo"">https://github.com/malkia/ufo</a> (which started things like power, and others)  Also lfw:  <a href=""https://github.com/pga1992/luaforwindows"">https://github.com/pga1992/luaforwindows</a> (this started this journey for me, around 10+yrs ago).</p>

<p>And also have a look at luvit: <a href=""https://luvit.io/"">https://luvit.io/</a>  I have used this for commercial systems, it is very powerful.</p>

<p>I should note. If you like Love2D, then you might like Defold more :) I did. :)</p>

<p><a href=""https://defold.com/"">https://defold.com/</a>  Created and maintained by the makers of candy crush.</p>
</div>",1605134710.0,,1605135469.0,gbzalex,True,t3_jrznr5,t1_gbwear8,/r/lua/comments/jrznr5/luajit_based_os/gbzalex/,0,False,2,False,jrznr5,lua,t5_2qjla
493,hawhill,"Thanks for the insight, and no, you're most certainly not a bit of an idiot - your project shows lots of insight into the workings and interwork of Linux kernel and userland and for this alone it certainly has its worth!","<div class=""md""><p>Thanks for the insight, and no, you&#39;re most certainly not a bit of an idiot - your project shows lots of insight into the workings and interwork of Linux kernel and userland and for this alone it certainly has its worth!</p>
</div>",1605100439.0,,False,gbxjxla,False,t3_jrznr5,t1_gbx7rzj,/r/lua/comments/jrznr5/luajit_based_os/gbxjxla/,0,False,2,False,jrznr5,lua,t5_2qjla
494,,"> Additionally, the future use will be Luajit starting a ""process manager"" of sorts, that launches and spawns child Luajit's running applications/services etc. This us where FBP will be heavily used. 

This sounds very interesting; I wonder if you have given thought to the API to use to communicate across such processes. I have found that the love2d API for starting separate LuaJIT instances and communicating with them over channels is simple and very useful: https://love2d.org/wiki/love.thread

Having the text editor be written in C is a bit of a drag; have you considered something like lite instead: https://github.com/rxi/lite/ It has a small C shim (mostly to get drawing primitives) but is mostly written in Lua, and is very extensible.","<div class=""md""><blockquote>
<p>Additionally, the future use will be Luajit starting a &quot;process manager&quot; of sorts, that launches and spawns child Luajit&#39;s running applications/services etc. This us where FBP will be heavily used. </p>
</blockquote>

<p>This sounds very interesting; I wonder if you have given thought to the API to use to communicate across such processes. I have found that the love2d API for starting separate LuaJIT instances and communicating with them over channels is simple and very useful: <a href=""https://love2d.org/wiki/love.thread"">https://love2d.org/wiki/love.thread</a></p>

<p>Having the text editor be written in C is a bit of a drag; have you considered something like lite instead: <a href=""https://github.com/rxi/lite/"">https://github.com/rxi/lite/</a> It has a small C shim (mostly to get drawing primitives) but is mostly written in Lua, and is very extensible.</p>
</div>",1605115463.0,,False,gbyba9h,False,t3_jrznr5,t1_gbx7rzj,/r/lua/comments/jrznr5/luajit_based_os/gbyba9h/,1,False,2,False,jrznr5,lua,t5_2qjla
495,Wolf_4501,you could use [luasdl2](https://github.com/Tangent128/luasdl2) for SDL2 access in lua (can be used to create a SDL2 screen that you could use as your LuaJIT OS monitor) that my other suggestion,"<div class=""md""><p>you could use <a href=""https://github.com/Tangent128/luasdl2"">luasdl2</a> for SDL2 access in lua (can be used to create a SDL2 screen that you could use as your LuaJIT OS monitor) that my other suggestion</p>
</div>",1605157802.0,,False,gc0g3pj,False,t3_jrznr5,t1_gbxdro6,/r/lua/comments/jrznr5/luajit_based_os/gc0g3pj/,1,False,2,False,jrznr5,lua,t5_2qjla
496,isr786,Carry on the good fight :-),"<div class=""md""><p>Carry on the good fight :-)</p>
</div>",1605158953.0,,False,gc0i29y,False,t3_jrznr5,t1_gc0etf7,/r/lua/comments/jrznr5/luajit_based_os/gc0i29y/,0,False,1,False,jrznr5,lua,t5_2qjla
497,dlannan68,"No. I'll check it out. Is it a similar setup?

Just had a very brief look. Will spend some time looking over it. Looks interesting, reminds a bit of Plan9, which I really liked.","<div class=""md""><p>No. I&#39;ll check it out. Is it a similar setup?</p>

<p>Just had a very brief look. Will spend some time looking over it. Looks interesting, reminds a bit of Plan9, which I really liked.</p>
</div>",1605095414.0,,False,gbxdyyh,True,t3_jrznr5,t1_gbwpfyr,/r/lua/comments/jrznr5/luajit_based_os/gbxdyyh/,1,False,1,False,jrznr5,lua,t5_2qjla
498,WrongAndBeligerent,Why? All that stuff is built in C++ and exposed to LuaJIT in a simple way.  Why not just build on that?,"<div class=""md""><p>Why? All that stuff is built in C++ and exposed to LuaJIT in a simple way.  Why not just build on that?</p>
</div>",1605116557.0,,False,gbydhzo,False,t3_jrznr5,t1_gby6vio,/r/lua/comments/jrznr5/luajit_based_os/gbydhzo/,0,False,3,False,jrznr5,lua,t5_2qjla
499,dlannan68,"You are quite predictive! I have added lite recently, since as you point out a C based text editor is a little annoying. Id like to get most (if not all) utilities built into the system as lua scripts. 

I wrote a FBP kernel engine many years ago: [https://github.com/dlannan/deity](https://github.com/dlannan/deity)

This is what will be used to sequence data flows. Its not really IPC, its more of a internal web network that has a fixed interface. And all modules are black box, self contained. The aim is to generate proper code reuse, and proper common OS/System frameworks you only need to code once.

Thanks for the feedback. I have used love2d in the past, and liked it very much. There are many good systems like that out there (maratis, ufo, moai.. etc). I dont expect to have anywhere near similar functionality :)","<div class=""md""><p>You are quite predictive! I have added lite recently, since as you point out a C based text editor is a little annoying. Id like to get most (if not all) utilities built into the system as lua scripts. </p>

<p>I wrote a FBP kernel engine many years ago: <a href=""https://github.com/dlannan/deity"">https://github.com/dlannan/deity</a></p>

<p>This is what will be used to sequence data flows. Its not really IPC, its more of a internal web network that has a fixed interface. And all modules are black box, self contained. The aim is to generate proper code reuse, and proper common OS/System frameworks you only need to code once.</p>

<p>Thanks for the feedback. I have used love2d in the past, and liked it very much. There are many good systems like that out there (maratis, ufo, moai.. etc). I dont expect to have anywhere near similar functionality :)</p>
</div>",1605134227.0,,False,gbz9ny4,True,t3_jrznr5,t1_gbyba9h,/r/lua/comments/jrznr5/luajit_based_os/gbz9ny4/,1,False,2,False,jrznr5,lua,t5_2qjla
500,dlannan68,"Good call - but Im already using a ffi wrapper for SDL :) .. the trick is getting it to work with dev/fb0 (which has been interesting). 

I hope to have a cairo/lite/something graphical start soon. The terminal at the moment is for testing all the parts. My daughter made a quik svg logo today, so hopefully I can get this all working by weekend.","<div class=""md""><p>Good call - but Im already using a ffi wrapper for SDL :) .. the trick is getting it to work with dev/fb0 (which has been interesting). </p>

<p>I hope to have a cairo/lite/something graphical start soon. The terminal at the moment is for testing all the parts. My daughter made a quik svg logo today, so hopefully I can get this all working by weekend.</p>
</div>",1605174311.0,,False,gc14c9e,True,t3_jrznr5,t1_gc0g3pj,/r/lua/comments/jrznr5/luajit_based_os/gc14c9e/,1,False,1,False,jrznr5,lua,t5_2qjla
501,,"I've also rewritten some unix tools in lua. which would be nice I guess? if you're interested on the 
[repo](https://bitbucket.org/lalalan/nix.lua/src/master/).


Also, arcan is not an OS like plan9. It is a replacement for Xorg/wayland.","<div class=""md""><p>I&#39;ve also rewritten some unix tools in lua. which would be nice I guess? if you&#39;re interested on the 
<a href=""https://bitbucket.org/lalalan/nix.lua/src/master/"">repo</a>.</p>

<p>Also, arcan is not an OS like plan9. It is a replacement for Xorg/wayland.</p>
</div>",1605110767.0,,1605110975.0,gby1s6r,False,t3_jrznr5,t1_gbxdyyh,/r/lua/comments/jrznr5/luajit_based_os/gby1s6r/,1,False,2,False,jrznr5,lua,t5_2qjla
502,,"Interesting; thanks.

I have never heard of FBP, but from reading the readme you linked to, it does not look like a concurrency mechanism. Are you planning on having concurrency in your OS? If you do my vote would be for a system based on message-passing queues like love2d which is a lot like an actor-based system; actor-based systems tend to be the most reliable in my experience.","<div class=""md""><p>Interesting; thanks.</p>

<p>I have never heard of FBP, but from reading the readme you linked to, it does not look like a concurrency mechanism. Are you planning on having concurrency in your OS? If you do my vote would be for a system based on message-passing queues like love2d which is a lot like an actor-based system; actor-based systems tend to be the most reliable in my experience.</p>
</div>",1605137023.0,,False,gbzexeb,False,t3_jrznr5,t1_gbz9ny4,/r/lua/comments/jrznr5/luajit_based_os/gbzexeb/,1,False,2,False,jrznr5,lua,t5_2qjla
503,Wolf_4501,:),"<div class=""md""><p>:)</p>
</div>",1605182265.0,,False,gc1cj9y,False,t3_jrznr5,t1_gc14c9e,/r/lua/comments/jrznr5/luajit_based_os/gc1cj9y/,0,False,1,False,jrznr5,lua,t5_2qjla
504,dlannan68,"Ahh. sorry, my mistake. Arcan sounds like a damn good idea then - Xorg is just annoying and bloated. I find it amazing its still in heavy use when I was using it 25 yrs ago on Sun and SGI machines (XFree and its derivatives). Its very dated for modern computing.

I'll have a look at the repo. Definitely interested in any lua tools I can use. No point re-inventing everything :)

Thanks.

\[edited\]

Damn! Thats awesome. There are alot of useful commands there. I really appreciate the assist. I'll put some of these in over the next day or so. Thanks again!","<div class=""md""><p>Ahh. sorry, my mistake. Arcan sounds like a damn good idea then - Xorg is just annoying and bloated. I find it amazing its still in heavy use when I was using it 25 yrs ago on Sun and SGI machines (XFree and its derivatives). Its very dated for modern computing.</p>

<p>I&#39;ll have a look at the repo. Definitely interested in any lua tools I can use. No point re-inventing everything :)</p>

<p>Thanks.</p>

<p>[edited]</p>

<p>Damn! Thats awesome. There are alot of useful commands there. I really appreciate the assist. I&#39;ll put some of these in over the next day or so. Thanks again!</p>
</div>",1605157356.0,,1605157596.0,gc0faph,True,t3_jrznr5,t1_gby1s6r,/r/lua/comments/jrznr5/luajit_based_os/gc0faph/,1,False,1,False,jrznr5,lua,t5_2qjla
505,dlannan68,"FBP is more like a development/framework paradigm. You dont write code like you normally would (although with Lua much will be hidden).

[https://jpaulm.github.io/fbp/](https://jpaulm.github.io/fbp/)

Think of it more like functional modules (not too granular) with common interfaces, and the 'programming' is how the data is routed. So all the complexity and development lies in the connected topography, not the interfaces themselves.

As an example I previously built a game engine that allowed realtime switching between DX8 (yes, good old days) and OpenGL. As far as the 'program' was concerned it was just swapping data paths.

Hope that helps explain it a little. It can be a little odd to work with.

Oh, and yes, concurrency is how it all works, although not in the way you would probably recognize it. All the modules are ""running"" and servicing streaming data requests. The Deity system was hampered by the OS and especially the dll mechanisms - works better as separate processes.

Btw - not sure what you mean about actor based systems? Ie Unreal Engine? or Agent based systems maybe? These are more implementation entity systems which Im not sure I understand the use for process control.

\[edit\] Just read about the actor model on wiki - not really similar. FBP modules dont have rights over starting/stopping other modules. All they can do is exchange data.  Although, that is similar to the messaging interface, so I guess its a kind of hybrid?","<div class=""md""><p>FBP is more like a development/framework paradigm. You dont write code like you normally would (although with Lua much will be hidden).</p>

<p><a href=""https://jpaulm.github.io/fbp/"">https://jpaulm.github.io/fbp/</a></p>

<p>Think of it more like functional modules (not too granular) with common interfaces, and the &#39;programming&#39; is how the data is routed. So all the complexity and development lies in the connected topography, not the interfaces themselves.</p>

<p>As an example I previously built a game engine that allowed realtime switching between DX8 (yes, good old days) and OpenGL. As far as the &#39;program&#39; was concerned it was just swapping data paths.</p>

<p>Hope that helps explain it a little. It can be a little odd to work with.</p>

<p>Oh, and yes, concurrency is how it all works, although not in the way you would probably recognize it. All the modules are &quot;running&quot; and servicing streaming data requests. The Deity system was hampered by the OS and especially the dll mechanisms - works better as separate processes.</p>

<p>Btw - not sure what you mean about actor based systems? Ie Unreal Engine? or Agent based systems maybe? These are more implementation entity systems which Im not sure I understand the use for process control.</p>

<p>[edit] Just read about the actor model on wiki - not really similar. FBP modules dont have rights over starting/stopping other modules. All they can do is exchange data.  Although, that is similar to the messaging interface, so I guess its a kind of hybrid?</p>
</div>",1605144110.0,,1605145827.0,gbzsfr6,True,t3_jrznr5,t1_gbzexeb,/r/lua/comments/jrznr5/luajit_based_os/gbzsfr6/,1,False,2,False,jrznr5,lua,t5_2qjla
506,,"Oh Thanks! Did not actually think that was gonna be useful.


Anyway, My plan was making a toybox/busybox replacement in lua. I don't mind rewriting tools. If anything, its taught me a lot about many things. To me programming is more a hobby or a puzzle solving exercise. So if you need or want more tools let me know.","<div class=""md""><p>Oh Thanks! Did not actually think that was gonna be useful.</p>

<p>Anyway, My plan was making a toybox/busybox replacement in lua. I don&#39;t mind rewriting tools. If anything, its taught me a lot about many things. To me programming is more a hobby or a puzzle solving exercise. So if you need or want more tools let me know.</p>
</div>",1605160236.0,,False,gc0k7my,False,t3_jrznr5,t1_gc0faph,/r/lua/comments/jrznr5/luajit_based_os/gc0k7my/,0,False,1,False,jrznr5,lua,t5_2qjla
507,,"Thanks for the clarification. So it sounds like FBP *can* handle concurrency, but it's intended more as an implementation detail? You program in a declarative way, and the system handles orchestrating which bits run on which threads; is that accurate?

Your description reminds me of Functional Reactive Programming, which is only one letter off: https://en.wikipedia.org/wiki/Functional_reactive_programming","<div class=""md""><p>Thanks for the clarification. So it sounds like FBP <em>can</em> handle concurrency, but it&#39;s intended more as an implementation detail? You program in a declarative way, and the system handles orchestrating which bits run on which threads; is that accurate?</p>

<p>Your description reminds me of Functional Reactive Programming, which is only one letter off: <a href=""https://en.wikipedia.org/wiki/Functional_reactive_programming"">https://en.wikipedia.org/wiki/Functional_reactive_programming</a></p>
</div>",1605199925.0,,False,gc26lnt,False,t3_jrznr5,t1_gbzsfr6,/r/lua/comments/jrznr5/luajit_based_os/gc26lnt/,2,False,2,False,jrznr5,lua,t5_2qjla
508,wikipedia_text_bot,"**[Functional reactive programming](https://en.wikipedia.org/wiki/Functional reactive programming)**

Functional reactive programming (FRP) is a programming paradigm for reactive programming (asynchronous dataflow programming) using the building blocks of functional programming (e.g. map, reduce, filter). FRP has been used for programming graphical user interfaces (GUIs), robotics, games, and music, aiming to simplify these problems by explicitly modeling time.  

[About Me](https://www.reddit.com/user/wikipedia_text_bot/comments/jrn2mj/about_me/) - [Opt out](https://www.reddit.com/user/wikipedia_text_bot/comments/jrti43/opt_out_here/) - OP can reply '!delete' to delete","<div class=""md""><p><strong><a href=""https://en.wikipedia.org/wiki/Functional%20reactive%20programming"">Functional reactive programming</a></strong></p>

<p>Functional reactive programming (FRP) is a programming paradigm for reactive programming (asynchronous dataflow programming) using the building blocks of functional programming (e.g. map, reduce, filter). FRP has been used for programming graphical user interfaces (GUIs), robotics, games, and music, aiming to simplify these problems by explicitly modeling time.  </p>

<p><a href=""https://www.reddit.com/user/wikipedia_text_bot/comments/jrn2mj/about_me/"">About Me</a> - <a href=""https://www.reddit.com/user/wikipedia_text_bot/comments/jrti43/opt_out_here/"">Opt out</a> - OP can reply &#39;!delete&#39; to delete</p>
</div>",1605199940.0,,False,gc26mtw,False,t3_jrznr5,t1_gc26lnt,/r/lua/comments/jrznr5/luajit_based_os/gc26mtw/,0,False,2,False,jrznr5,lua,t5_2qjla
509,dlannan68,"This is better described in the fbp article :)

>FBP is a special case of [dataflow](https://en.wikipedia.org/wiki/Dataflow) programming characterized by asynchronous, concurrent processes ""under the covers"", Information Packets with defined lifetimes, named ports, ""bounded buffer"" connections, and definition of connections external to the components - it has been found to support improved development time and maintainability, reusability, rapid prototyping, simulation, improved performance, and good communication among developers, maintenance staff, users, systems people, and management - not to mention that FBP naturally takes advantage of multiple cores... without the programmer having to struggle with the intricacies of multitasking!

There are various modes of implementation and styles as well. One group has made a network service system using the methodology:[https://noflojs.org/](https://noflojs.org/)

Hope this helps define it a little more.

\[edit\]

Just going to expand the idea a bit. Technically the ""internet"" is a large FB system (of sorts). As are many messaging systems (IPC could be classed as an FB system). So its more of an architectural programming model, than implementation level. However, features like concurrency are automatically provided by design. 

Have a play with Paul Morrisson's toolkits - they are interesting to use: [https://jpaulm.github.io/fbp/software.html](https://jpaulm.github.io/fbp/software.html)

Or join us on slack :)","<div class=""md""><p>This is better described in the fbp article :)</p>

<blockquote>
<p>FBP is a special case of <a href=""https://en.wikipedia.org/wiki/Dataflow"">dataflow</a> programming characterized by asynchronous, concurrent processes &quot;under the covers&quot;, Information Packets with defined lifetimes, named ports, &quot;bounded buffer&quot; connections, and definition of connections external to the components - it has been found to support improved development time and maintainability, reusability, rapid prototyping, simulation, improved performance, and good communication among developers, maintenance staff, users, systems people, and management - not to mention that FBP naturally takes advantage of multiple cores... without the programmer having to struggle with the intricacies of multitasking!</p>
</blockquote>

<p>There are various modes of implementation and styles as well. One group has made a network service system using the methodology:<a href=""https://noflojs.org/"">https://noflojs.org/</a></p>

<p>Hope this helps define it a little more.</p>

<p>[edit]</p>

<p>Just going to expand the idea a bit. Technically the &quot;internet&quot; is a large FB system (of sorts). As are many messaging systems (IPC could be classed as an FB system). So its more of an architectural programming model, than implementation level. However, features like concurrency are automatically provided by design. </p>

<p>Have a play with Paul Morrisson&#39;s toolkits - they are interesting to use: <a href=""https://jpaulm.github.io/fbp/software.html"">https://jpaulm.github.io/fbp/software.html</a></p>

<p>Or join us on slack :)</p>
</div>",1605229465.0,,1605230289.0,gc3v4tw,True,t3_jrznr5,t1_gc26lnt,/r/lua/comments/jrznr5/luajit_based_os/gc3v4tw/,0,False,1,False,jrznr5,lua,t5_2qjla
510,doronbehar,How did he dye while he was so young?,"<div class=""md""><p>How did he dye while he was so young?</p>
</div>",1542355148.0,,False,e9sy6r1,False,t3_9xal05,t3_9xal05,/r/lua/comments/9xal05/rip_peter_melnichenko/e9sy6r1/,0,False,1,False,9xal05,lua,t5_2qjla
511,thedary,Qepd,"<div class=""md""><p>Qepd</p>
</div>",1544076220.0,,False,eb73pyv,False,t3_9xal05,t3_9xal05,/r/lua/comments/9xal05/rip_peter_melnichenko/eb73pyv/,0,False,1,False,9xal05,lua,t5_2qjla
512,qaisjp,f,"<div class=""md""><p>f</p>
</div>",1542316021.0,,False,e9rtfbi,False,t3_9xal05,t3_9xal05,/r/lua/comments/9xal05/rip_peter_melnichenko/e9rtfbi/,0,False,1,False,9xal05,lua,t5_2qjla
513,the_gnarts,"    do
        local f <close> = io.open(""/etc/fstab"", ""r"")
        -- read from file 'f'
    end
    -- file is automatically closed here

I absolutely love this. Goes to show that Lua’s lexical scoping
has been in a league of its own from the beginning, especially
compared to the clusterfuck that is “scoping” in Python which
was then addressed by introducing the nonsensical per-variable
``with`` keyword.

Congrats to Roberto and Luiz, they understand how to grow a
language.","<div class=""md""><pre><code>do
    local f &lt;close&gt; = io.open(&quot;/etc/fstab&quot;, &quot;r&quot;)
    -- read from file &#39;f&#39;
end
-- file is automatically closed here
</code></pre>

<p>I absolutely love this. Goes to show that Lua’s lexical scoping
has been in a league of its own from the beginning, especially
compared to the clusterfuck that is “scoping” in Python which
was then addressed by introducing the nonsensical per-variable
<code>with</code> keyword.</p>

<p>Congrats to Roberto and Luiz, they understand how to grow a
language.</p>
</div>",1594891486.0,,False,fy8jdl0,False,t3_hs1k8j,t3_hs1k8j,/r/lua/comments/hs1k8j/whats_new_in_lua_54/fy8jdl0/,0,False,11,False,hs1k8j,lua,t5_2qjla
514,shabunc,I wonder what was the rationale behind this particular syntax for local variable attributes or whatever they are called - why it goes postfixed? why in angular brackets?,"<div class=""md""><p>I wonder what was the rationale behind this particular syntax for local variable attributes or whatever they are called - why it goes postfixed? why in angular brackets?</p>
</div>",1595016977.0,,False,fye8n3d,False,t3_hs1k8j,t3_hs1k8j,/r/lua/comments/hs1k8j/whats_new_in_lua_54/fye8n3d/,2,False,2,False,hs1k8j,lua,t5_2qjla
515,27321,":( a new version already, I just downloaded it","<div class=""md""><p>:( a new version already, I just downloaded it</p>
</div>",1594875618.0,,False,fy828w5,False,t3_hs1k8j,t3_hs1k8j,/r/lua/comments/hs1k8j/whats_new_in_lua_54/fy828w5/,1,False,1,False,hs1k8j,lua,t5_2qjla
516,BadBoy6767,The angular brackets are probably to not have to add another reserved keyword. Still an awful choice.,"<div class=""md""><p>The angular brackets are probably to not have to add another reserved keyword. Still an awful choice.</p>
</div>",1595072938.0,,False,fygdynn,False,t3_hs1k8j,t1_fye8n3d,/r/lua/comments/hs1k8j/whats_new_in_lua_54/fygdynn/,0,False,1,False,hs1k8j,lua,t5_2qjla
517,st3f-ping,"I’m intrigued. `local const x=5` seems to fit in better with Lua’s current syntax than `local x <const> = 5`.

The choice to use the latter suggests that this paves the way for something else that might also use this syntax. As I can’t think what that would be, I guess I’ll just have to wait five or so years for the next release to find out.

(edit) Thinking about it again, maybe it’s just to ensure that multiple declarations are unambiguous. To me, `local a <const>, b = 4,5` makes it clearer that b is not a constant than `local const a, b = 4,5`. It could just be that but we’ll have to see.","<div class=""md""><p>I’m intrigued. <code>local const x=5</code> seems to fit in better with Lua’s current syntax than <code>local x &lt;const&gt; = 5</code>.</p>

<p>The choice to use the latter suggests that this paves the way for something else that might also use this syntax. As I can’t think what that would be, I guess I’ll just have to wait five or so years for the next release to find out.</p>

<p>(edit) Thinking about it again, maybe it’s just to ensure that multiple declarations are unambiguous. To me, <code>local a &lt;const&gt;, b = 4,5</code> makes it clearer that b is not a constant than <code>local const a, b = 4,5</code>. It could just be that but we’ll have to see.</p>
</div>",1595151977.0,,1595157502.0,fyjn9p6,False,t3_hs1k8j,t1_fye8n3d,/r/lua/comments/hs1k8j/whats_new_in_lua_54/fyjn9p6/,0,False,1,False,hs1k8j,lua,t5_2qjla
518,st3f-ping,It’s a repeated news story. 5.3 came out about 5 years ago. 5.4 came out a couple of weeks back. If you downloaded Lua in the last couple of weeks then you may already have 5.4.,"<div class=""md""><p>It’s a repeated news story. 5.3 came out about 5 years ago. 5.4 came out a couple of weeks back. If you downloaded Lua in the last couple of weeks then you may already have 5.4.</p>
</div>",1594887033.0,,False,fy8f1g6,False,t3_hs1k8j,t1_fy828w5,/r/lua/comments/hs1k8j/whats_new_in_lua_54/fy8f1g6/,1,False,4,False,hs1k8j,lua,t5_2qjla
519,27321,"Oh ok, thanks for helping me understand that","<div class=""md""><p>Oh ok, thanks for helping me understand that</p>
</div>",1594902775.0,,False,fy8w008,False,t3_hs1k8j,t1_fy8f1g6,/r/lua/comments/hs1k8j/whats_new_in_lua_54/fy8w008/,0,False,2,False,hs1k8j,lua,t5_2qjla
520,ws-ilazki,"This is cool and might be interesting to try out, but it seems to be missing some basic information that would be useful for people curious about the project:

* What version(s) of Lua does this work with?
* What existing lisps were used as inspiration for this?  Quick inspection leads me to believe it's primarily CL-inspired, but it looks like it has other inspirations as well, such as implementing a Clojure-style threading macro (`->`) and suggesting the use of adding `!` to functions that perform side effects (e.g. `set!`)
*  Is this a lisp-1 (Scheme style) or lisp-2 (Common Lisp style)? Lisp-1 seems more likely since Lua itself is lisp-1 style, but other things about the language resemble Common Lisp, so it would be good to have this explicitly stated.

* I see that it's mixing parentheses and brackets in places (such as [`let`](https://squiddev.github.io/urn/docs/lib.binders.html).  Is this Racket-style, where `[ ]`, `{ }`, and `( )` can be used interchangeably, or is this Clojure-style, where these symbols have special purpose?
* Is there any special syntax for Lua tables, like how Clojure uses `{key value}` for maps?

* Can it output valid Lua source that can be used elsewhere (such as with embedded Lua interpreters in games and programs)?  Or does it require the presence of Urn, so that it's only usable standalone?
* This ties in with the previous question, but what about Lua interop?  Specifically, can Urn-created functions and variables be called from normal Lua code?  

It would also be nice to see an examples directory with some smaller Urn code examples, to give newcomers an idea how the code looks at a glance.  

Anyway, congrats to the creator for making it.  Maybe it should get cross-posted to /r/lisp for more exposure, preferably after some of the above questions are answered. 

Edit:  also, useless trivia question, but why was the name Urn chosen?","<div class=""md""><p>This is cool and might be interesting to try out, but it seems to be missing some basic information that would be useful for people curious about the project:</p>

<ul>
<li>What version(s) of Lua does this work with?</li>
<li>What existing lisps were used as inspiration for this?  Quick inspection leads me to believe it&#39;s primarily CL-inspired, but it looks like it has other inspirations as well, such as implementing a Clojure-style threading macro (<code>-&gt;</code>) and suggesting the use of adding <code>!</code> to functions that perform side effects (e.g. <code>set!</code>)</li>
<li><p>Is this a lisp-1 (Scheme style) or lisp-2 (Common Lisp style)? Lisp-1 seems more likely since Lua itself is lisp-1 style, but other things about the language resemble Common Lisp, so it would be good to have this explicitly stated.</p></li>
<li><p>I see that it&#39;s mixing parentheses and brackets in places (such as <a href=""https://squiddev.github.io/urn/docs/lib.binders.html""><code>let</code></a>.  Is this Racket-style, where <code>[ ]</code>, <code>{ }</code>, and <code>( )</code> can be used interchangeably, or is this Clojure-style, where these symbols have special purpose?</p></li>
<li><p>Is there any special syntax for Lua tables, like how Clojure uses <code>{key value}</code> for maps?</p></li>
<li><p>Can it output valid Lua source that can be used elsewhere (such as with embedded Lua interpreters in games and programs)?  Or does it require the presence of Urn, so that it&#39;s only usable standalone?</p></li>
<li><p>This ties in with the previous question, but what about Lua interop?  Specifically, can Urn-created functions and variables be called from normal Lua code?  </p></li>
</ul>

<p>It would also be nice to see an examples directory with some smaller Urn code examples, to give newcomers an idea how the code looks at a glance.  </p>

<p>Anyway, congrats to the creator for making it.  Maybe it should get cross-posted to <a href=""/r/lisp"">/r/lisp</a> for more exposure, preferably after some of the above questions are answered. </p>

<p>Edit:  also, useless trivia question, but why was the name Urn chosen?</p>
</div>",1491659385.0,,1491660564.0,dfzvczp,False,t3_643ypc,t3_643ypc,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dfzvczp/,3,False,6,False,643ypc,lua,t5_2qjla
521,fuxoft,That's fascinating! Where is the compiled code able to run? Lua 5.1? 5.2? 5.3? LuaJIT?,"<div class=""md""><p>That&#39;s fascinating! Where is the compiled code able to run? Lua 5.1? 5.2? 5.3? LuaJIT?</p>
</div>",1491642238.0,,False,dfzp94l,False,t3_643ypc,t3_643ypc,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dfzp94l/,1,False,2,False,643ypc,lua,t5_2qjla
522,forflo,"seems to be interesting, but lacks some more documentation IMHO. Could you elaborate?","<div class=""md""><p>seems to be interesting, but lacks some more documentation IMHO. Could you elaborate?</p>
</div>",1491611209.0,,False,dfz9vhb,False,t3_643ypc,t3_643ypc,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dfz9vhb/,1,False,1,False,643ypc,lua,t5_2qjla
523,fuxoft,"Where in the sources are the Lua definitions of the ""most basic"" Lisp commands, e.g. ""define"", ""quote"", ""lambda""? I tried looking for them, found zilch...

EDIT: Found them! They are hardcoded in the file tacky/analysis/resolve.lua, beginning from line# 248","<div class=""md""><p>Where in the sources are the Lua definitions of the &quot;most basic&quot; Lisp commands, e.g. &quot;define&quot;, &quot;quote&quot;, &quot;lambda&quot;? I tried looking for them, found zilch...</p>

<p>EDIT: Found them! They are hardcoded in the file tacky/analysis/resolve.lua, beginning from line# 248</p>
</div>",1491645188.0,,1491662357.0,dfzq3dk,False,t3_643ypc,t3_643ypc,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dfzq3dk/,0,False,1,False,643ypc,lua,t5_2qjla
524,MrHydraz,"Hi! Author here (well, at least one of them)

> I see that it's mixing parentheses and brackets in places (such as let. Is this Racket-style, where [ ], { }, and ( ) can be used interchangeably, or is this Clojure-style, where these symbols have special purpose?

Urn is Racket-style in that `[]`, `{}` and `()` are all interchangeable between themselves. `(print! ""foo"")`, `[print! ""foo""]` and `{print! ""foo""}` are all the same.

> Is there any special syntax for Lua tables, like how Clojure uses `{key value}` for maps?

Currently, not. You can either use `(struct key value key value)` or `(const-struct key value key value)` (if the ""shape"" is statically known.)

> Can it output valid Lua source that can be used elsewhere (such as with embedded Lua interpreters in games and programs)? Or does it require the presence of Urn, so that it's only usable standalone?
> What version(s) of Lua does this work with?

Yep! The Lua it emits is completely standalone, and should work with Lua 5.1, 5.2, 5.3 and LuaJIT.

> This ties in with the previous question, but what about Lua interop? Specifically, can Urn-created functions and variables be called from normal Lua code?

Yeah, you can return `struct`ures of definitions from Urn modules and use them with `require`, like other Lua modules.

> Edit: also, useless trivia question, but why was the name Urn chosen?

¯\\\_(ツ)_/¯

Edit: Oh god damn it, I missed some questions.

> What existing lisps were used as inspiration for this? Quick inspection leads me to believe it's primarily CL-inspired, but it looks like it has other inspirations as well, such as implementing a Clojure-style threading macro `(->)` and suggesting the use of adding `!` to functions that perform side effects (e.g. `set!`)

Really, it's all of them. Some macros are CL-inspired, while the standard library is more ""pure"", being inspired primarily by Clojure (and my Haskell roots)
","<div class=""md""><p>Hi! Author here (well, at least one of them)</p>

<blockquote>
<p>I see that it&#39;s mixing parentheses and brackets in places (such as let. Is this Racket-style, where [ ], { }, and ( ) can be used interchangeably, or is this Clojure-style, where these symbols have special purpose?</p>
</blockquote>

<p>Urn is Racket-style in that <code>[]</code>, <code>{}</code> and <code>()</code> are all interchangeable between themselves. <code>(print! &quot;foo&quot;)</code>, <code>[print! &quot;foo&quot;]</code> and <code>{print! &quot;foo&quot;}</code> are all the same.</p>

<blockquote>
<p>Is there any special syntax for Lua tables, like how Clojure uses <code>{key value}</code> for maps?</p>
</blockquote>

<p>Currently, not. You can either use <code>(struct key value key value)</code> or <code>(const-struct key value key value)</code> (if the &quot;shape&quot; is statically known.)</p>

<blockquote>
<p>Can it output valid Lua source that can be used elsewhere (such as with embedded Lua interpreters in games and programs)? Or does it require the presence of Urn, so that it&#39;s only usable standalone?
What version(s) of Lua does this work with?</p>
</blockquote>

<p>Yep! The Lua it emits is completely standalone, and should work with Lua 5.1, 5.2, 5.3 and LuaJIT.</p>

<blockquote>
<p>This ties in with the previous question, but what about Lua interop? Specifically, can Urn-created functions and variables be called from normal Lua code?</p>
</blockquote>

<p>Yeah, you can return <code>struct</code>ures of definitions from Urn modules and use them with <code>require</code>, like other Lua modules.</p>

<blockquote>
<p>Edit: also, useless trivia question, but why was the name Urn chosen?</p>
</blockquote>

<p>¯\_(ツ)_/¯</p>

<p>Edit: Oh god damn it, I missed some questions.</p>

<blockquote>
<p>What existing lisps were used as inspiration for this? Quick inspection leads me to believe it&#39;s primarily CL-inspired, but it looks like it has other inspirations as well, such as implementing a Clojure-style threading macro <code>(-&gt;)</code> and suggesting the use of adding <code>!</code> to functions that perform side effects (e.g. <code>set!</code>)</p>
</blockquote>

<p>Really, it&#39;s all of them. Some macros are CL-inspired, while the standard library is more &quot;pure&quot;, being inspired primarily by Clojure (and my Haskell roots)</p>
</div>",1491675290.0,,1491675645.0,dg05zen,False,t3_643ypc,t1_dfzvczp,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg05zen/,2,False,5,False,643ypc,lua,t5_2qjla
525,fuxoft,I played with it a little and the Lua output is completely standalone Lua.,"<div class=""md""><p>I played with it a little and the Lua output is completely standalone Lua.</p>
</div>",1491662473.0,,False,dfzx41c,False,t3_643ypc,t1_dfzvczp,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dfzx41c/,0,False,2,False,643ypc,lua,t5_2qjla
526,,"> I see that it's mixing parentheses and brackets in places

This is covered in the tutorial; it uses the Scheme/Racket style of allowing flexibility for the user to decide which is clearer.

> Is this a lisp-1 (Scheme style) or lisp-2 (Common Lisp style)?

Lisp-2 is so backwards and archaic I think it's safe to assume no one creating a new language nowadays would make the same mistake. The absence of a `funcall` seems to confirm this.

> What version(s) of Lua does this work with?

It contains support for LuaJIT, but it appears to be optional: https://gitlab.com/urn/urn/tree/master/lib/luajit It also contains references to `setfenv`, but all these references seem to be careful to check for the existence of `setfenv` before calling it, leading me to think it's compatible with at least 5.1 and 5.2. I don't know enough about 5.3 to know what to check for.

> Can it output valid Lua source that can be used elsewhere

It seems to output valid Lua source which depends on the presence of the Urn ""standard library"", but I'd imagine the compiled output could be taken to a system that didn't necessarily contain the whole Urn compiler.","<div class=""md""><blockquote>
<p>I see that it&#39;s mixing parentheses and brackets in places</p>
</blockquote>

<p>This is covered in the tutorial; it uses the Scheme/Racket style of allowing flexibility for the user to decide which is clearer.</p>

<blockquote>
<p>Is this a lisp-1 (Scheme style) or lisp-2 (Common Lisp style)?</p>
</blockquote>

<p>Lisp-2 is so backwards and archaic I think it&#39;s safe to assume no one creating a new language nowadays would make the same mistake. The absence of a <code>funcall</code> seems to confirm this.</p>

<blockquote>
<p>What version(s) of Lua does this work with?</p>
</blockquote>

<p>It contains support for LuaJIT, but it appears to be optional: <a href=""https://gitlab.com/urn/urn/tree/master/lib/luajit"">https://gitlab.com/urn/urn/tree/master/lib/luajit</a> It also contains references to <code>setfenv</code>, but all these references seem to be careful to check for the existence of <code>setfenv</code> before calling it, leading me to think it&#39;s compatible with at least 5.1 and 5.2. I don&#39;t know enough about 5.3 to know what to check for.</p>

<blockquote>
<p>Can it output valid Lua source that can be used elsewhere</p>
</blockquote>

<p>It seems to output valid Lua source which depends on the presence of the Urn &quot;standard library&quot;, but I&#39;d imagine the compiled output could be taken to a system that didn&#39;t necessarily contain the whole Urn compiler.</p>
</div>",1491668092.0,,False,dg00uof,False,t3_643ypc,t1_dfzvczp,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg00uof/,1,False,2,False,643ypc,lua,t5_2qjla
527,MrHydraz,"As I answered down in the thread, all of them! The CI runs tests using Lua 5.1, 5.2 and 5.3 (All of them are run in Travis, but [GitLab](https://gitlab.com/urn/urn/tree/master) only uses Lua 5.3).","<div class=""md""><p>As I answered down in the thread, all of them! The CI runs tests using Lua 5.1, 5.2 and 5.3 (All of them are run in Travis, but <a href=""https://gitlab.com/urn/urn/tree/master"">GitLab</a> only uses Lua 5.3).</p>
</div>",1491675436.0,,False,dg0633x,False,t3_643ypc,t1_dfzp94l,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg0633x/,0,False,1,False,643ypc,lua,t5_2qjla
528,,That's funny; I was just going to remark on how thorough the documentation seems to be compared to [some](https://github.com/meric/l2l) of the [alternatives](https://github.com/kstep/scheme.lua). Seems the project has only been around a few months.,"<div class=""md""><p>That&#39;s funny; I was just going to remark on how thorough the documentation seems to be compared to <a href=""https://github.com/meric/l2l"">some</a> of the <a href=""https://github.com/kstep/scheme.lua"">alternatives</a>. Seems the project has only been around a few months.</p>
</div>",1491625296.0,,False,dfzimnv,False,t3_643ypc,t1_dfz9vhb,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dfzimnv/,1,False,1,False,643ypc,lua,t5_2qjla
529,fuxoft,"This may be completely stupid question but: Is there something as ""eval"" in Urn? I.e. can I easily write an Urn program that loads Lisp expressions from stdio or file and evaluates them (after maybe modifying them somehow)? Or an Urn program that dynamically generates Lisp code and then runs it?","<div class=""md""><p>This may be completely stupid question but: Is there something as &quot;eval&quot; in Urn? I.e. can I easily write an Urn program that loads Lisp expressions from stdio or file and evaluates them (after maybe modifying them somehow)? Or an Urn program that dynamically generates Lisp code and then runs it?</p>
</div>",1491675751.0,,False,dg06b7z,False,t3_643ypc,t1_dg05zen,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg06b7z/,1,False,1,False,643ypc,lua,t5_2qjla
530,ws-ilazki,"Thanks for the answers!  Like I said above, it looks like a nice project, and I'm going to keep an eye on it as an alternative to using Lua directly when I need it.  Not something I need often, but when I do I tend to regret not having macros and some other niceties I get when using Clojure or Racket, so this could very well hit that sweet spot for me.

> > Is there any special syntax for Lua tables, like how Clojure uses {key value} for maps?

> Currently, not. You can either use (struct key value key value) or (const-struct key value key value) (if the ""shape"" is statically known.)

I had an idea that might work for it.  Instead of having `{}` be interchangeable along with `[]` and `()`, maybe you could have only `[]` and `()` be interchangeable, and dedicate `{}` to being literal syntax for Lua tables, akin to Clojure's reader syntax for hash-maps.  It would be familiar to Lua users that way, *and* be similar to Clojure's map literals as well.

There's no need for something like Clojure's vector literals since Lua 'arrays' are still just tables, so it could be a nice middle-ground between Racket's free-form style and Clojure's dedicated use.  I doubt losing it as a parentheses equivalent would hurt much, since everyone seems to mostly use `[]` or `()`.

If this doesn't sound like a completely insane idea that will never happen, I can add it as a feature request on the github issue tracker. ","<div class=""md""><p>Thanks for the answers!  Like I said above, it looks like a nice project, and I&#39;m going to keep an eye on it as an alternative to using Lua directly when I need it.  Not something I need often, but when I do I tend to regret not having macros and some other niceties I get when using Clojure or Racket, so this could very well hit that sweet spot for me.</p>

<blockquote>
<blockquote>
<p>Is there any special syntax for Lua tables, like how Clojure uses {key value} for maps?</p>
</blockquote>

<p>Currently, not. You can either use (struct key value key value) or (const-struct key value key value) (if the &quot;shape&quot; is statically known.)</p>
</blockquote>

<p>I had an idea that might work for it.  Instead of having <code>{}</code> be interchangeable along with <code>[]</code> and <code>()</code>, maybe you could have only <code>[]</code> and <code>()</code> be interchangeable, and dedicate <code>{}</code> to being literal syntax for Lua tables, akin to Clojure&#39;s reader syntax for hash-maps.  It would be familiar to Lua users that way, <em>and</em> be similar to Clojure&#39;s map literals as well.</p>

<p>There&#39;s no need for something like Clojure&#39;s vector literals since Lua &#39;arrays&#39; are still just tables, so it could be a nice middle-ground between Racket&#39;s free-form style and Clojure&#39;s dedicated use.  I doubt losing it as a parentheses equivalent would hurt much, since everyone seems to mostly use <code>[]</code> or <code>()</code>.</p>

<p>If this doesn&#39;t sound like a completely insane idea that will never happen, I can add it as a feature request on the github issue tracker. </p>
</div>",1491682446.0,,False,dg0avdt,False,t3_643ypc,t1_dg05zen,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg0avdt/,1,False,1,False,643ypc,lua,t5_2qjla
531,ws-ilazki,"> This is covered in the tutorial; it uses the Scheme/Racket style of allowing flexibility for the user to decide which is clearer.

I see. I had to go through the tutorial a second time to even find it because I missed it first time through.  It's sort of randomly thrown into the page about making a guessing game. 

> Lisp-2 is so backwards and archaic I think it's safe to assume no one creating a new language nowadays would make the same mistake.

I really dislike lisp-2 design and agree, but some people do prefer it, so it's not guaranteed.  Especially with the other similarities to CL, which could lead people to assume it's going to act similarly.

I ended up cloning the repo to grep through it (I was trying to find where `.<!` was defined because github's search wasn't cutting it) so I fired up the REPL and tested, and yeah, it *is* lisp-1.  Still should be mentioned somewhere, though; these are the kind of basic things one should be able to find out before downloading. 

> It contains support for LuaJIT, but it appears to be optional

Saw that, and I tested it with 5.2 and luajit after commenting, but it'd be nice if it actually stated what it supports so people would know what to expect.

That's what I meant about it missing a lot of basic information.  Most of those questions can be answered either by diving into the source or doing some REPL testing, but they're also the type of simple questions that would make sense either compiled into some kind of FAQ or a more comprehensive language introduction/README 

> It seems to output valid Lua source which depends on the presence of the Urn ""standard library""

Damn.  That's usually how it goes so I'm not surprised, but I can't help but be a little disappointed.  I don't use Lua much except when it's embedded into something else, so any Lua transpiler that doesn't generate standalone files doesn't help me much :/  I keep tossing around the idea of making something like that myself, but I use Lua so sporadically that I never actually go anywhere with it. 

","<div class=""md""><blockquote>
<p>This is covered in the tutorial; it uses the Scheme/Racket style of allowing flexibility for the user to decide which is clearer.</p>
</blockquote>

<p>I see. I had to go through the tutorial a second time to even find it because I missed it first time through.  It&#39;s sort of randomly thrown into the page about making a guessing game. </p>

<blockquote>
<p>Lisp-2 is so backwards and archaic I think it&#39;s safe to assume no one creating a new language nowadays would make the same mistake.</p>
</blockquote>

<p>I really dislike lisp-2 design and agree, but some people do prefer it, so it&#39;s not guaranteed.  Especially with the other similarities to CL, which could lead people to assume it&#39;s going to act similarly.</p>

<p>I ended up cloning the repo to grep through it (I was trying to find where <code>.&lt;!</code> was defined because github&#39;s search wasn&#39;t cutting it) so I fired up the REPL and tested, and yeah, it <em>is</em> lisp-1.  Still should be mentioned somewhere, though; these are the kind of basic things one should be able to find out before downloading. </p>

<blockquote>
<p>It contains support for LuaJIT, but it appears to be optional</p>
</blockquote>

<p>Saw that, and I tested it with 5.2 and luajit after commenting, but it&#39;d be nice if it actually stated what it supports so people would know what to expect.</p>

<p>That&#39;s what I meant about it missing a lot of basic information.  Most of those questions can be answered either by diving into the source or doing some REPL testing, but they&#39;re also the type of simple questions that would make sense either compiled into some kind of FAQ or a more comprehensive language introduction/README </p>

<blockquote>
<p>It seems to output valid Lua source which depends on the presence of the Urn &quot;standard library&quot;</p>
</blockquote>

<p>Damn.  That&#39;s usually how it goes so I&#39;m not surprised, but I can&#39;t help but be a little disappointed.  I don&#39;t use Lua much except when it&#39;s embedded into something else, so any Lua transpiler that doesn&#39;t generate standalone files doesn&#39;t help me much :/  I keep tossing around the idea of making something like that myself, but I use Lua so sporadically that I never actually go anywhere with it. </p>
</div>",1491670259.0,,False,dg02dph,False,t3_643ypc,t1_dg00uof,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg02dph/,1,False,1,False,643ypc,lua,t5_2qjla
532,ws-ilazki,"It's well documented in the sense that anything defined with Urn has a docstring that gets used to auto-generate documentation (props to the creator for that.  It even takes markdown in the docstrings!), but it's also missing documentation on basic things like the Lua-created builtins (e.g. `set!`, `define`, `cond`) that are fundamental to the language and have unclear usage.  For example, some of the generated documentation shows brackets used in some places, so does the built-in `lambda` get called as `(lambda (x) x)`, `(lambda [x] x)`, or are they equivalent?  It's not documented so the only option is trial-and-error.

There's also very little information on the language itself.  Off the top of my head, I thought of [these questions](https://www.reddit.com/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dfzvczp/) and I'm sure others could think of more.  ","<div class=""md""><p>It&#39;s well documented in the sense that anything defined with Urn has a docstring that gets used to auto-generate documentation (props to the creator for that.  It even takes markdown in the docstrings!), but it&#39;s also missing documentation on basic things like the Lua-created builtins (e.g. <code>set!</code>, <code>define</code>, <code>cond</code>) that are fundamental to the language and have unclear usage.  For example, some of the generated documentation shows brackets used in some places, so does the built-in <code>lambda</code> get called as <code>(lambda (x) x)</code>, <code>(lambda [x] x)</code>, or are they equivalent?  It&#39;s not documented so the only option is trial-and-error.</p>

<p>There&#39;s also very little information on the language itself.  Off the top of my head, I thought of <a href=""https://www.reddit.com/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dfzvczp/"">these questions</a> and I&#39;m sure others could think of more.  </p>
</div>",1491660247.0,,False,dfzvtlj,False,t3_643ypc,t1_dfzimnv,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dfzvtlj/,0,False,1,False,643ypc,lua,t5_2qjla
533,MrHydraz,"Not _presently_. We're still pondering the addition of `eval` (and similar facilities, such as `read`) as it would entail either including the entire compiler (which is _huge_) or implementing a simple tree evaluator (which would read to horrible performance).

Side note, but you can import bits of the parser to use `read` (just `(import urn/parser (read))`). This is currently what the REPL does to allow (to some extent) theming.","<div class=""md""><p>Not <em>presently</em>. We&#39;re still pondering the addition of <code>eval</code> (and similar facilities, such as <code>read</code>) as it would entail either including the entire compiler (which is <em>huge</em>) or implementing a simple tree evaluator (which would read to horrible performance).</p>

<p>Side note, but you can import bits of the parser to use <code>read</code> (just <code>(import urn/parser (read))</code>). This is currently what the REPL does to allow (to some extent) theming.</p>
</div>",1491675977.0,,False,dg06h0z,False,t3_643ypc,t1_dg06b7z,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg06h0z/,1,False,2,False,643ypc,lua,t5_2qjla
534,MrHydraz,"We were debating this. I'd appreciate if you could report an issue, but on [Gitlab](https://gitlab.com/urn/urn) instead. Thanks!","<div class=""md""><p>We were debating this. I&#39;d appreciate if you could report an issue, but on <a href=""https://gitlab.com/urn/urn"">Gitlab</a> instead. Thanks!</p>
</div>",1491682708.0,,False,dg0b1oi,False,t3_643ypc,t1_dg0avdt,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg0b1oi/,1,False,1,False,643ypc,lua,t5_2qjla
535,MrHydraz,"> > It seems to output valid Lua source which depends on the presence of the Urn ""standard library""

While /u/technomancy did a good job with the other answers, he got this one wrong. The compiler includes `(import)`ed modules in the output and then aggressively erases unused symbols. For reference, while compiling pure Lisp programs, it does not emit a single invocation of `require`.

Edit: apparently I don't know my own language well enough.","<div class=""md""><blockquote>
<blockquote>
<p>It seems to output valid Lua source which depends on the presence of the Urn &quot;standard library&quot;</p>
</blockquote>
</blockquote>

<p>While <a href=""/u/technomancy"">/u/technomancy</a> did a good job with the other answers, he got this one wrong. The compiler includes <code>(import)</code>ed modules in the output and then aggressively erases unused symbols. For reference, while compiling pure Lisp programs, it does not emit a single invocation of <code>require</code>.</p>

<p>Edit: apparently I don&#39;t know my own language well enough.</p>
</div>",1491675605.0,,1491684131.0,dg067do,False,t3_643ypc,t1_dg02dph,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg067do/,2,False,2,False,643ypc,lua,t5_2qjla
536,ws-ilazki,"Yeah, I can see why you adding `eval` or `read` might be unpleasant in this sort of thing.  Any specific reason why there doesn't seem to be `apply`, though?  e.g. `(apply f '(1 2 3 4))` to get `(f 1 2 3 4)`

That's usually a standard thing to have out-of-the-box in a lisp, and super useful to boot. ","<div class=""md""><p>Yeah, I can see why you adding <code>eval</code> or <code>read</code> might be unpleasant in this sort of thing.  Any specific reason why there doesn&#39;t seem to be <code>apply</code>, though?  e.g. <code>(apply f &#39;(1 2 3 4))</code> to get <code>(f 1 2 3 4)</code></p>

<p>That&#39;s usually a standard thing to have out-of-the-box in a lisp, and super useful to boot. </p>
</div>",1491681229.0,,False,dg0a1th,False,t3_643ypc,t1_dg06h0z,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg0a1th/,1,False,1,False,643ypc,lua,t5_2qjla
537,ws-ilazki,"[Done](https://gitlab.com/urn/urn/issues/20).

Going to add a couple more things I thought of later, but I have to run out for a bit.  ","<div class=""md""><p><a href=""https://gitlab.com/urn/urn/issues/20"">Done</a>.</p>

<p>Going to add a couple more things I thought of later, but I have to run out for a bit.  </p>
</div>",1491688285.0,,False,dg0esy5,False,t3_643ypc,t1_dg0b1oi,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg0esy5/,0,False,2,False,643ypc,lua,t5_2qjla
538,,"Thanks for the clarification!

I didn't mean to say that it would necessarily bring in additional files, just that typically in situations like this, the functions which your code compiles down to depend to some degree on existing built-ins. But if you've found a way to collapse all that down into a single file with tree-shaking that's very cool and beyond what I would have expected for such a young language.","<div class=""md""><p>Thanks for the clarification!</p>

<p>I didn&#39;t mean to say that it would necessarily bring in additional files, just that typically in situations like this, the functions which your code compiles down to depend to some degree on existing built-ins. But if you&#39;ve found a way to collapse all that down into a single file with tree-shaking that&#39;s very cool and beyond what I would have expected for such a young language.</p>
</div>",1491683818.0,,False,dg0bt06,False,t3_643ypc,t1_dg067do,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg0bt06/,0,False,2,False,643ypc,lua,t5_2qjla
539,ws-ilazki,"That's cool.  I looked at an output file and I see what you did:  you're putting anything imported into a `_libs` table within the file and calling from that so that it's self-contained.  This might be the sort of thing I've been wanting after all.

Especially since it looks like you can use `define-native` to declare Lua symbols so they won't break compilation.  It looks like I could `define-symbol` any necessary API calls, compile the file, and then use it with the embedded Lua (such as in a game mod)","<div class=""md""><p>That&#39;s cool.  I looked at an output file and I see what you did:  you&#39;re putting anything imported into a <code>_libs</code> table within the file and calling from that so that it&#39;s self-contained.  This might be the sort of thing I&#39;ve been wanting after all.</p>

<p>Especially since it looks like you can use <code>define-native</code> to declare Lua symbols so they won&#39;t break compilation.  It looks like I could <code>define-symbol</code> any necessary API calls, compile the file, and then use it with the embedded Lua (such as in a game mod)</p>
</div>",1491680800.0,,False,dg09rgl,False,t3_643ypc,t1_dg067do,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg09rgl/,0,False,1,False,643ypc,lua,t5_2qjla
540,MrHydraz,[Done](https://gitlab.com/urn/urn/commit/8c663a85aa48814dc50ca25e9be5f2071a749b55).,"<div class=""md""><p><a href=""https://gitlab.com/urn/urn/commit/8c663a85aa48814dc50ca25e9be5f2071a749b55"">Done</a>.</p>
</div>",1491682848.0,,False,dg0b531,False,t3_643ypc,t1_dg0a1th,/r/lua/comments/643ypc/urn_a_lisp_implementation_for_lua/dg0b531/,0,False,3,False,643ypc,lua,t5_2qjla
541,tf2ftw,Use all caps. If it’s all caps don’t try to assign a value. o.O,"<div class=""md""><p>Use all caps. If it’s all caps don’t try to assign a value. o.O</p>
</div>",1649428974.0,,False,i3wn25w,False,t3_tz4x3l,t3_tz4x3l,/r/lua/comments/tz4x3l/dont_worry/i3wn25w/,1,False,27,False,tz4x3l,lua,t5_2qjla
542,Nsber,"I mean, you could alao make a table with a setindex function to only set variables if they have not yet been set","<div class=""md""><p>I mean, you could alao make a table with a setindex function to only set variables if they have not yet been set</p>
</div>",1649435234.0,,False,i3x3f8d,False,t3_tz4x3l,t3_tz4x3l,/r/lua/comments/tz4x3l/dont_worry/i3x3f8d/,1,False,13,False,tz4x3l,lua,t5_2qjla
543,kazuo256,A reliable alternative is to use a function that returns the value instead.,"<div class=""md""><p>A reliable alternative is to use a function that returns the value instead.</p>
</div>",1649476856.0,,False,i3zsgo5,False,t3_tz4x3l,t3_tz4x3l,/r/lua/comments/tz4x3l/dont_worry/i3zsgo5/,0,False,8,False,tz4x3l,lua,t5_2qjla
544,Frityet5,*laughs in `<const>`*,"<div class=""md""><p><em>laughs in <code>&lt;const&gt;</code></em></p>
</div>",1649428544.0,,False,i3wlxy4,False,t3_tz4x3l,t3_tz4x3l,/r/lua/comments/tz4x3l/dont_worry/i3wlxy4/,0,False,15,False,tz4x3l,lua,t5_2qjla
545,luaexec,Do not change this value else face the wrath of x,"<div class=""md""><p>Do not change this value else face the wrath of x</p>
</div>",1649433068.0,,False,i3wxqrz,False,t3_tz4x3l,t3_tz4x3l,/r/lua/comments/tz4x3l/dont_worry/i3wxqrz/,0,False,4,False,tz4x3l,lua,t5_2qjla
546,RobLoach,This is incredible.,"<div class=""md""><p>This is incredible.</p>
</div>",1649439440.0,,False,i3xen8a,False,t3_tz4x3l,t3_tz4x3l,/r/lua/comments/tz4x3l/dont_worry/i3xen8a/,0,False,3,False,tz4x3l,lua,t5_2qjla
547,VeronikaKerman,"I like the lua way. Because in java or C++ you newer know whether a const or private was put there just because or whether code will really break when changed. In lua, it either is free to change, or described in such a comment. Love","<div class=""md""><p>I like the lua way. Because in java or C++ you newer know whether a const or private was put there just because or whether code will really break when changed. In lua, it either is free to change, or described in such a comment. Love</p>
</div>",1649456250.0,,False,i3yl1eh,False,t3_tz4x3l,t3_tz4x3l,/r/lua/comments/tz4x3l/dont_worry/i3yl1eh/,0,False,3,False,tz4x3l,lua,t5_2qjla
548,Rice7th,That made my day thanks :D,"<div class=""md""><p>That made my day thanks :D</p>
</div>",1649442406.0,,False,i3xmgf6,False,t3_tz4x3l,t3_tz4x3l,/r/lua/comments/tz4x3l/dont_worry/i3xmgf6/,0,False,2,False,tz4x3l,lua,t5_2qjla
549,makingthematrix,"In Java we have annotations that the compiler can understand and enforce additional rules, e.g. a `@NotNull` annotation before a function argument means that the compiler will throw an error if in another piece of code we will try to pass `null` as that parameter in a function call. In some other languages compilers don't do that, but there are additional tools for that, like `mypy` in Python.

Is there something like this for Lua?","<div class=""md""><p>In Java we have annotations that the compiler can understand and enforce additional rules, e.g. a <code>@NotNull</code> annotation before a function argument means that the compiler will throw an error if in another piece of code we will try to pass <code>null</code> as that parameter in a function call. In some other languages compilers don&#39;t do that, but there are additional tools for that, like <code>mypy</code> in Python.</p>

<p>Is there something like this for Lua?</p>
</div>",1649508046.0,,False,i410bcu,False,t3_tz4x3l,t3_tz4x3l,/r/lua/comments/tz4x3l/dont_worry/i410bcu/,0,False,1,False,tz4x3l,lua,t5_2qjla
550,Sure_Ad_5763,All caps and `_` at the beginning to look more threatening.,"<div class=""md""><p>All caps and <code>_</code> at the beginning to look more threatening.</p>
</div>",1649429379.0,,False,i3wo45r,True,t3_tz4x3l,t1_i3wn25w,/r/lua/comments/tz4x3l/dont_worry/i3wo45r/,2,False,20,False,tz4x3l,lua,t5_2qjla
551,lambda_abstraction,"    function make_const_table()
       local shadow = {}
       return setmetatable({},
          { __index=shadow,
            __newindex=function(tab,key,val)
               if shadow[key] then error('Failed to mutate constant') end
               shadow[key] = val
            end })
    end

Pairs and ipairs support left as an exercise for the reader.","<div class=""md""><pre><code>function make_const_table()
   local shadow = {}
   return setmetatable({},
      { __index=shadow,
        __newindex=function(tab,key,val)
           if shadow[key] then error(&#39;Failed to mutate constant&#39;) end
           shadow[key] = val
        end })
end
</code></pre>

<p>Pairs and ipairs support left as an exercise for the reader.</p>
</div>",1649536147.0,,1649536376.0,i42txot,False,t3_tz4x3l,t1_i3x3f8d,/r/lua/comments/tz4x3l/dont_worry/i42txot/,0,False,3,False,tz4x3l,lua,t5_2qjla
552,G_cat101,Python moment,"<div class=""md""><p>Python moment</p>
</div>",1649442269.0,,False,i3xm3fr,False,t3_tz4x3l,t1_i3wo45r,/r/lua/comments/tz4x3l/dont_worry/i3xm3fr/,0,False,19,False,tz4x3l,lua,t5_2qjla
553,lambda_abstraction,And now I'm going have underscore phobia for the rest of my life.  TIHI!,"<div class=""md""><p>And now I&#39;m going have underscore phobia for the rest of my life.  TIHI!</p>
</div>",1649536209.0,,False,i42u2pl,False,t3_tz4x3l,t1_i3wo45r,/r/lua/comments/tz4x3l/dont_worry/i42u2pl/,0,False,1,False,tz4x3l,lua,t5_2qjla
554,debugman18,"Oof, take your upvote and leave.","<div class=""md""><p>Oof, take your upvote and leave.</p>
</div>",1559522114.0,,False,epv1y4u,False,t3_bw1apm,t3_bw1apm,/r/lua/comments/bw1apm/how_many_lua_users_does_it_take_to_screw_in_a/epv1y4u/,0,False,7,False,bw1apm,lua,t5_2qjla
555,BadBoy6767,"[Oy, you took this from IRC >:(](https://i.imgur.com/1UmzTip.png).","<div class=""md""><p><a href=""https://i.imgur.com/1UmzTip.png"">Oy, you took this from IRC &gt;:(</a>.</p>
</div>",1559564047.0,,1559571837.0,epw34er,False,t3_bw1apm,t3_bw1apm,/r/lua/comments/bw1apm/how_many_lua_users_does_it_take_to_screw_in_a/epw34er/,1,False,4,False,bw1apm,lua,t5_2qjla
556,CodeFrenzy,Non it's a hardware problem!,"<div class=""md""><p>Non it&#39;s a hardware problem!</p>
</div>",1559561635.0,,False,epw0yqh,False,t3_bw1apm,t3_bw1apm,/r/lua/comments/bw1apm/how_many_lua_users_does_it_take_to_screw_in_a/epw0yqh/,0,False,2,False,bw1apm,lua,t5_2qjla
557,lambda_abstraction,/me assumes this is a strangely worded slight about the mechanics of objlen.,"<div class=""md""><p>/me assumes this is a strangely worded slight about the mechanics of objlen.</p>
</div>",1559567630.0,,1559567901.0,epw6tph,False,t3_bw1apm,t3_bw1apm,/r/lua/comments/bw1apm/how_many_lua_users_does_it_take_to_screw_in_a/epw6tph/,1,False,2,False,bw1apm,lua,t5_2qjla
558,DeathProgramming,<3,"<div class=""md""><p>&lt;3</p>
</div>",1559564813.0,,False,epw3uzu,True,t3_bw1apm,t1_epw34er,/r/lua/comments/bw1apm/how_many_lua_users_does_it_take_to_screw_in_a/epw3uzu/,0,False,1,False,bw1apm,lua,t5_2qjla
559,DeathProgramming,"It is indeed. One of my favorite things about the language, actually. Loosely defined enough that no one should rely on quirks with it.","<div class=""md""><p>It is indeed. One of my favorite things about the language, actually. Loosely defined enough that no one should rely on quirks with it.</p>
</div>",1559568360.0,,False,epw7naz,True,t3_bw1apm,t1_epw6tph,/r/lua/comments/bw1apm/how_many_lua_users_does_it_take_to_screw_in_a/epw7naz/,0,False,2,False,bw1apm,lua,t5_2qjla
560,Code_Duchess,This is fantastic! I'm new to the language and wanted to know your thoughts on Defold.,"<div class=""md""><p>This is fantastic! I&#39;m new to the language and wanted to know your thoughts on Defold.</p>
</div>",1602438841.0,,False,g8i9m4m,False,t3_j953xf,t3_j953xf,/r/lua/comments/j953xf/learn_lua_from_scratch_and_for_free/g8i9m4m/,1,False,2,False,j953xf,lua,t5_2qjla
561,KwasiTweneboa,how does one sign up for the zoom meetings?,"<div class=""md""><p>how does one sign up for the zoom meetings?</p>
</div>",1602451089.0,,False,g8j17s4,False,t3_j953xf,t3_j953xf,/r/lua/comments/j953xf/learn_lua_from_scratch_and_for_free/g8j17s4/,1,False,2,False,j953xf,lua,t5_2qjla
562,,"Awesome,  decided to start looking into learning lua for multiple personal projects, and this is great.","<div class=""md""><p>Awesome,  decided to start looking into learning lua for multiple personal projects, and this is great.</p>
</div>",1602735087.0,,False,g8va4gv,False,t3_j953xf,t3_j953xf,/r/lua/comments/j953xf/learn_lua_from_scratch_and_for_free/g8va4gv/,1,False,2,False,j953xf,lua,t5_2qjla
563,MindTactics,"There’s a game dev engine on iOS called Codea, it runs on LUA syntax.

Here: 
https://apps.apple.com/us/app/codea/id439571171

Maybe consider adding Codea examples in your guides?

Example.. I am strictly iPad. No PC, No Laptop - don’t need em. Won’t get them. 4 years now.

That said, Codea + Lua course may entice upcoming mobile game devs or youngsters wanting to do game dev but have iPads only. 

Just my 2 cents.","<div class=""md""><p>There’s a game dev engine on iOS called Codea, it runs on LUA syntax.</p>

<p>Here: 
<a href=""https://apps.apple.com/us/app/codea/id439571171"">https://apps.apple.com/us/app/codea/id439571171</a></p>

<p>Maybe consider adding Codea examples in your guides?</p>

<p>Example.. I am strictly iPad. No PC, No Laptop - don’t need em. Won’t get them. 4 years now.</p>

<p>That said, Codea + Lua course may entice upcoming mobile game devs or youngsters wanting to do game dev but have iPads only. </p>

<p>Just my 2 cents.</p>
</div>",1602486659.0,,False,g8kl5c3,False,t3_j953xf,t3_j953xf,/r/lua/comments/j953xf/learn_lua_from_scratch_and_for_free/g8kl5c3/,2,False,1,False,j953xf,lua,t5_2qjla
564,luascriptdev,"Hi. Yeah, r/defold looks great. Be sure to check out their sub too.","<div class=""md""><p>Hi. Yeah, <a href=""/r/defold"">r/defold</a> looks great. Be sure to check out their sub too.</p>
</div>",1602440977.0,,False,g8idrht,True,t3_j953xf,t1_g8i9m4m,/r/lua/comments/j953xf/learn_lua_from_scratch_and_for_free/g8idrht/,0,False,1,False,j953xf,lua,t5_2qjla
565,luascriptdev,I'm currently setting them up. Interest today has soared so we'll definitely be running them. I'll keep your details here on Reddit and when the sessions are ready to start I'll message you.,"<div class=""md""><p>I&#39;m currently setting them up. Interest today has soared so we&#39;ll definitely be running them. I&#39;ll keep your details here on Reddit and when the sessions are ready to start I&#39;ll message you.</p>
</div>",1602451660.0,,False,g8j2g36,True,t3_j953xf,t1_g8j17s4,/r/lua/comments/j953xf/learn_lua_from_scratch_and_for_free/g8j2g36/,0,False,1,False,j953xf,lua,t5_2qjla
566,luascriptdev,Ace! Glad it can help!,"<div class=""md""><p>Ace! Glad it can help!</p>
</div>",1602735330.0,,False,g8vafys,True,t3_j953xf,t1_g8va4gv,/r/lua/comments/j953xf/learn_lua_from_scratch_and_for_free/g8vafys/,0,False,2,False,j953xf,lua,t5_2qjla
567,AutoModerator,"Hi! It looks like you've written ""LUA"". Lua is not an acronym (or an initialism) - it is the Portuguese word for 'moon'. Fun fact: Lua was created in 1993 by Roberto Ierusalimschy, Luiz Henrique de Figueiredo and Waldemar Celes, members of the Computer Graphics Technology Group (Tecgraf) at the Pontifical Catholic University of Rio de Janeiro, in Brazil.

*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/lua) if you have any questions or concerns.*","<div class=""md""><p>Hi! It looks like you&#39;ve written &quot;LUA&quot;. Lua is not an acronym (or an initialism) - it is the Portuguese word for &#39;moon&#39;. Fun fact: Lua was created in 1993 by Roberto Ierusalimschy, Luiz Henrique de Figueiredo and Waldemar Celes, members of the Computer Graphics Technology Group (Tecgraf) at the Pontifical Catholic University of Rio de Janeiro, in Brazil.</p>

<p><em>I am a bot, and this action was performed automatically. Please <a href=""/message/compose/?to=/r/lua"">contact the moderators of this subreddit</a> if you have any questions or concerns.</em></p>
</div>",1602486659.0,moderator,False,g8kl5cd,False,t3_j953xf,t1_g8kl5c3,/r/lua/comments/j953xf/learn_lua_from_scratch_and_for_free/g8kl5cd/,0,False,2,False,j953xf,lua,t5_2qjla
568,luascriptdev,"Funny you mention that, I know about the guys at Codea, their project looks cool. If you look at the start coding page however on my website, we have a web based Lua editor which is just about to be released. We'll definitely be updating the examples to have a ""run it yourself"" ability with our LuaScript editor :) keep your eyes peeled! We'll publish on this sub Reddit when the editor has been launched. By the way, the editor will soon come with a debugger and already has static type checking with our background compiler. If you want to embed LuaScript into your own project, that's not a problem either :)","<div class=""md""><p>Funny you mention that, I know about the guys at Codea, their project looks cool. If you look at the start coding page however on my website, we have a web based Lua editor which is just about to be released. We&#39;ll definitely be updating the examples to have a &quot;run it yourself&quot; ability with our LuaScript editor :) keep your eyes peeled! We&#39;ll publish on this sub Reddit when the editor has been launched. By the way, the editor will soon come with a debugger and already has static type checking with our background compiler. If you want to embed LuaScript into your own project, that&#39;s not a problem either :)</p>
</div>",1602486877.0,,False,g8klcva,True,t3_j953xf,t1_g8kl5c3,/r/lua/comments/j953xf/learn_lua_from_scratch_and_for_free/g8klcva/,1,False,2,False,j953xf,lua,t5_2qjla
569,MindTactics,Sounds good. I most definitely shall! Appreciate the reply.,"<div class=""md""><p>Sounds good. I most definitely shall! Appreciate the reply.</p>
</div>",1602486957.0,,False,g8klfpn,False,t3_j953xf,t1_g8klcva,/r/lua/comments/j953xf/learn_lua_from_scratch_and_for_free/g8klfpn/,0,False,1,False,j953xf,lua,t5_2qjla
570,ggchappell,"A nice read. I must say that I disagree about 1-based indexing.

> It would be great if people spent more time thinking about why use a 0-based index instead. C uses such indexes because the value is actually a multiplier that you can use to find the memory offset for the location of the data. 

That's one reason. But there are others. See [Dijkstra](https://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF), who explained an important one well.

BTW, I see three -- and only three -- flaws in the design of Lua:

* 1-based indexing.

* Variables default to global.

* No separate integer type.","<div class=""md""><p>A nice read. I must say that I disagree about 1-based indexing.</p>

<blockquote>
<p>It would be great if people spent more time thinking about why use a 0-based index instead. C uses such indexes because the value is actually a multiplier that you can use to find the memory offset for the location of the data. </p>
</blockquote>

<p>That&#39;s one reason. But there are others. See <a href=""https://www.cs.utexas.edu/users/EWD/ewd08xx/EWD831.PDF"">Dijkstra</a>, who explained an important one well.</p>

<p>BTW, I see three -- and only three -- flaws in the design of Lua:</p>

<ul>
<li><p>1-based indexing.</p></li>
<li><p>Variables default to global.</p></li>
<li><p>No separate integer type.</p></li>
</ul>
</div>",1610766917.0,,False,gjf0lth,False,t3_ky8ts3,t3_ky8ts3,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjf0lth/,8,False,14,False,ky8ts3,lua,t5_2qjla
571,Planebagels1,Good read 👍,"<div class=""md""><p>Good read 👍</p>
</div>",1610765496.0,,False,gjey5ks,False,t3_ky8ts3,t3_ky8ts3,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjey5ks/,0,False,4,False,ky8ts3,lua,t5_2qjla
572,mad_poet_navarth,"Not mentioned in the article I think is problems with [pyramid of doom](https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)). I work for a group that uses lua for CGI, and IMHO the lua code is nearly unmaintainable because of pyramid of doom code. So my question is: is this problem a result of the original engineer who wrote the code, or is this more an intrinsic problem with the language?","<div class=""md""><p>Not mentioned in the article I think is problems with <a href=""https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming"">pyramid of doom</a>). I work for a group that uses lua for CGI, and IMHO the lua code is nearly unmaintainable because of pyramid of doom code. So my question is: is this problem a result of the original engineer who wrote the code, or is this more an intrinsic problem with the language?</p>
</div>",1610815802.0,,False,gjh5yto,False,t3_ky8ts3,t3_ky8ts3,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjh5yto/,1,False,4,False,ky8ts3,lua,t5_2qjla
573,Kom4r,"For someone who's just started learning Lua, this post has been eye-opening. Especially the part *""Approach it like you approach a LEGO set. Lua offers you bricks, you provide the imagination, design, and in the end, you build the product.""*

Thanks for sharing!","<div class=""md""><p>For someone who&#39;s just started learning Lua, this post has been eye-opening. Especially the part <em>&quot;Approach it like you approach a LEGO set. Lua offers you bricks, you provide the imagination, design, and in the end, you build the product.&quot;</em></p>

<p>Thanks for sharing!</p>
</div>",1611170802.0,,False,gjz6tj3,False,t3_ky8ts3,t3_ky8ts3,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjz6tj3/,0,False,3,False,ky8ts3,lua,t5_2qjla
574,Cultural_Two_4964,I love global variables and the 1-based numbering - it's a good way to find python slicing bloomers in other people's work ;-0,"<div class=""md""><p>I love global variables and the 1-based numbering - it&#39;s a good way to find python slicing bloomers in other people&#39;s work ;-0</p>
</div>",1610771530.0,,False,gjf85o8,False,t3_ky8ts3,t3_ky8ts3,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjf85o8/,0,False,2,False,ky8ts3,lua,t5_2qjla
575,TomatoCo,5.3 fixed the third issue and added a bunch of bitwise operators.,"<div class=""md""><p>5.3 fixed the third issue and added a bunch of bitwise operators.</p>
</div>",1610777943.0,,False,gjfh7aw,False,t3_ky8ts3,t1_gjf0lth,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjfh7aw/,0,False,12,False,ky8ts3,lua,t5_2qjla
576,BOOGIEMAN-pN,"about #2, I read somewhere that Matz (creator of Ruby) regrets he did the opposite. In Ruby, variables are local by default. Personally, I also find Lua's way more readable.","<div class=""md""><p>about #2, I read somewhere that Matz (creator of Ruby) regrets he did the opposite. In Ruby, variables are local by default. Personally, I also find Lua&#39;s way more readable.</p>
</div>",1610798465.0,,False,gjg5f3r,False,t3_ky8ts3,t1_gjf0lth,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjg5f3r/,0,False,8,False,ky8ts3,lua,t5_2qjla
577,appgurueu,"Regarding #2: Variables default to the current environment, which can be quite useful and is used way too rarely. Use `setfenv` (Lua 5.1) or `_ENV` (Lua 5.2+) to change the environment.","<div class=""md""><p>Regarding #2: Variables default to the current environment, which can be quite useful and is used way too rarely. Use <code>setfenv</code> (Lua 5.1) or <code>_ENV</code> (Lua 5.2+) to change the environment.</p>
</div>",1611070494.0,,False,gju786i,False,t3_ky8ts3,t1_gjf0lth,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gju786i/,0,False,3,False,ky8ts3,lua,t5_2qjla
578,ws-ilazki,"> BTW, I see three -- and only three -- flaws in the design of Lua:

I'm indifferent on 1-based indexing so I don't really consider it a flaw either way and would take that off.  You didn't mention what I'd probably consider Lua's second biggest problem (beaten by global-by-default variables):  nils.

Actually, it's more like two problems, but they're both connected.  See, Lua treats nil as a special sort of thing: it lets you pretend it's a primitive type but it has special semantics that aren't obvious (or even particularly discoverable).  Specifically, variable assignment with `nil` results in that variable being deleted, so that when you write `x = nil` in Lua it looks like you're binding the symbol `x` to n`nil`, what is really happening is you're removing `x` from Lua's lookup table.  

The first problem with this behaviour is it's not obvious it's happening at all because any attempt to access a variable name that doesn't exist returns `nil`, so `x=nil; print(x)` (or any code like `if x == nil then ...`) looks and acts like `x` exists even though Lua did something different under the hood.  Assignment should not become deletion in special circumstances; a separate keyword should be provided to un-assign variables instead of relying on magic behaviour.

The second, more serious issue with this behaviour is how it interacts with tables.  `t.x = nil` removes the key from the table.  This is, again, not obvious because Lua pretends nothing weird happens by returning `nil` when you attempt to access a key that doesn't exist.  Now, what makes this really bad is what happens when it occurs in indexed tables (arrays).  ""Arrays"" are just tables with numeric keys, possibly in addition to string keys since Lua allows both to coexist, which leads to a weird situation where Lua tracks ""array"" length by counting indices from 1 upward until it reaches an index that doesn't exist.  So, for example, if you have `t = {1,2,3,4,5}` and then do `t[3] = nil`, `for i,v in ipairs(t)` will stop at `t[2]`.  It also causes weird issues with using `#t` to get the array length:  it will accurately return length `5` here at first, but additional manipulations of the array, adding and removing other entries, will eventually cause it to return a length of `2`.

This whole situation sucks.  In situations where it might make sense to return nil you shouldn't because of potentially unwanted ""magic"", and if you're dealing with indexed tables you have to be on guard for nils because they can make chunks of your table effectively disappear. (An impressive magic trick, I suppose.)

If Lua had a separate keyword to delete a symbol instead of a special-case overloading of assignment the entire problem would go away.  Or, if nil magic is considered preferable to having a `delete` keyword, then another fix could be to have a way to flag a table as indexed-only so that it could handle the table differently and not ""lose"" parts of it.  Define your array as `a = [1,2,3,4,5]` and Lua would disallow string keys and could keep track of length properly for iteration; nil magic would still exist but be transparent to the user again.

I think global-by-default is the biggest flaw in Lua's design, but this is easily my #2 choice.  It's a mess that can cause strange things to happen when you don't expect it, and once you know what's going on you end up having to overcomplicate things to fix it.","<div class=""md""><blockquote>
<p>BTW, I see three -- and only three -- flaws in the design of Lua:</p>
</blockquote>

<p>I&#39;m indifferent on 1-based indexing so I don&#39;t really consider it a flaw either way and would take that off.  You didn&#39;t mention what I&#39;d probably consider Lua&#39;s second biggest problem (beaten by global-by-default variables):  nils.</p>

<p>Actually, it&#39;s more like two problems, but they&#39;re both connected.  See, Lua treats nil as a special sort of thing: it lets you pretend it&#39;s a primitive type but it has special semantics that aren&#39;t obvious (or even particularly discoverable).  Specifically, variable assignment with <code>nil</code> results in that variable being deleted, so that when you write <code>x = nil</code> in Lua it looks like you&#39;re binding the symbol <code>x</code> to n<code>nil</code>, what is really happening is you&#39;re removing <code>x</code> from Lua&#39;s lookup table.  </p>

<p>The first problem with this behaviour is it&#39;s not obvious it&#39;s happening at all because any attempt to access a variable name that doesn&#39;t exist returns <code>nil</code>, so <code>x=nil; print(x)</code> (or any code like <code>if x == nil then ...</code>) looks and acts like <code>x</code> exists even though Lua did something different under the hood.  Assignment should not become deletion in special circumstances; a separate keyword should be provided to un-assign variables instead of relying on magic behaviour.</p>

<p>The second, more serious issue with this behaviour is how it interacts with tables.  <code>t.x = nil</code> removes the key from the table.  This is, again, not obvious because Lua pretends nothing weird happens by returning <code>nil</code> when you attempt to access a key that doesn&#39;t exist.  Now, what makes this really bad is what happens when it occurs in indexed tables (arrays).  &quot;Arrays&quot; are just tables with numeric keys, possibly in addition to string keys since Lua allows both to coexist, which leads to a weird situation where Lua tracks &quot;array&quot; length by counting indices from 1 upward until it reaches an index that doesn&#39;t exist.  So, for example, if you have <code>t = {1,2,3,4,5}</code> and then do <code>t[3] = nil</code>, <code>for i,v in ipairs(t)</code> will stop at <code>t[2]</code>.  It also causes weird issues with using <code>#t</code> to get the array length:  it will accurately return length <code>5</code> here at first, but additional manipulations of the array, adding and removing other entries, will eventually cause it to return a length of <code>2</code>.</p>

<p>This whole situation sucks.  In situations where it might make sense to return nil you shouldn&#39;t because of potentially unwanted &quot;magic&quot;, and if you&#39;re dealing with indexed tables you have to be on guard for nils because they can make chunks of your table effectively disappear. (An impressive magic trick, I suppose.)</p>

<p>If Lua had a separate keyword to delete a symbol instead of a special-case overloading of assignment the entire problem would go away.  Or, if nil magic is considered preferable to having a <code>delete</code> keyword, then another fix could be to have a way to flag a table as indexed-only so that it could handle the table differently and not &quot;lose&quot; parts of it.  Define your array as <code>a = [1,2,3,4,5]</code> and Lua would disallow string keys and could keep track of length properly for iteration; nil magic would still exist but be transparent to the user again.</p>

<p>I think global-by-default is the biggest flaw in Lua&#39;s design, but this is easily my #2 choice.  It&#39;s a mess that can cause strange things to happen when you don&#39;t expect it, and once you know what&#39;s going on you end up having to overcomplicate things to fix it.</p>
</div>",1610796537.0,,False,gjg224v,False,t3_ky8ts3,t1_gjf0lth,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjg224v/,2,False,6,False,ky8ts3,lua,t5_2qjla
579,Amablue,"> See Dijkstra, who explained an important one well.

I've never found this a compelling argument. This is more about how we should notate loops, and you can completely sidestep this by having loops work differently. I can't think of a single time off the top of my head where 1 based indexing has actually been an issue that I've had to code around because I'm rarely explicitly writing start and end bounds for my loops. It's far more likely that I'm going to write something like: `for i, v in ipairs(t) do ... end`

Even in other languages, like C++, I rarely need to be aware of where indices start and stop. Loops these days are most likely to be of the form `for (auto& element : list)` where, again, the indices don't matter.","<div class=""md""><blockquote>
<p>See Dijkstra, who explained an important one well.</p>
</blockquote>

<p>I&#39;ve never found this a compelling argument. This is more about how we should notate loops, and you can completely sidestep this by having loops work differently. I can&#39;t think of a single time off the top of my head where 1 based indexing has actually been an issue that I&#39;ve had to code around because I&#39;m rarely explicitly writing start and end bounds for my loops. It&#39;s far more likely that I&#39;m going to write something like: <code>for i, v in ipairs(t) do ... end</code></p>

<p>Even in other languages, like C++, I rarely need to be aware of where indices start and stop. Loops these days are most likely to be of the form <code>for (auto&amp; element : list)</code> where, again, the indices don&#39;t matter.</p>
</div>",1610839462.0,,1610915531.0,gjineot,False,t3_ky8ts3,t1_gjf0lth,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjineot/,0,False,3,False,ky8ts3,lua,t5_2qjla
580,,"IMO, the biggest flaw by far is how functions are defined. Having curly brackets for functions would make them much more readable.","<div class=""md""><p>IMO, the biggest flaw by far is how functions are defined. Having curly brackets for functions would make them much more readable.</p>
</div>",1611253824.0,,False,gk35scf,False,t3_ky8ts3,t1_gjf0lth,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gk35scf/,0,False,2,False,ky8ts3,lua,t5_2qjla
581,bruhred,"* No ""continue""

* No ""switch""/""case""","<div class=""md""><ul>
<li><p>No &quot;continue&quot;</p></li>
<li><p>No &quot;switch&quot;/&quot;case&quot;</p></li>
</ul>
</div>",1610796910.0,,False,gjg2p4u,False,t3_ky8ts3,t1_gjf0lth,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjg2p4u/,3,False,1,False,ky8ts3,lua,t5_2qjla
582,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1610822254.0,,False,gjhmf2d,False,t3_ky8ts3,t1_gjf0lth,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjhmf2d/,1,False,1,False,ky8ts3,lua,t5_2qjla
583,ws-ilazki,"> So my question is: is this problem a result of the original engineer who wrote the code, or is this more an intrinsic problem with the language?

Mostly the former, I think. Usually Lua's being written on the side by people that are primarily using another language (often C or C++) and end up trying to write code the same way. Lua's a simple language in the same way Scheme is a simple language, and I think most programmers just don't know how to deal with that because they're accustomed to having more features and syntax.  So, when they get tasked with writing some Lua on the side they end up working against the language rather than with it because they don't spend time learning how to do things differently.

Lua, like Scheme, is a small language with a powerful foundation that lets you create things that the language doesn't natively have.  Where Scheme is built on first-class functions and lists, Lua uses first-class functions and tables.  It lacks a macro system so you can't arbitrarily define new syntax like you can in a Scheme, but it's still flexible enough that you can build and do interesting things with it.

For example, consider Lua's idea of OOP.  It doesn't actually support OOP, but the combination of first-class functions and tables lets you create it by binding table keys to functions and passing the table to its methods with an explicit `self` argument.  There's syntactic sugar to hide this, but that's what's really going on under the hood.  `function foo:bar (x) ... end` is really `function foo.bar (self,x) ... end`, which in turn is really `foo[""bar""] = function (self, x) .. end`.  The same applies to calling, and when you call `obj:bar(""baz"")` what you're really doing is `obj[""bar""](obj, ""baz"")`. Then add a metatable and you can even create inheritance and do other crazy things.

This kind of thing isn't necessarily well understood, so you end up with programmers writing a lot of boilerplate and copy/paste code.  I've told this story here before, but it's the best example I've personally encountered so it's worth mentioning again: I once forked the Lua code for the quest tracker for a AAA-tier MMORPG intending to fix some basic bugs it had, and when I started digging into it I noticed that it was OOP Lua where 90% of the code was copy/paste of the same pattern, defining similar methods for multiple objects.  While bug-fixing I decided to refactor it a bit for my own sanity, so I wrote a couple higher-order functions whose return values were functions in the form of `method(self,args)` and replaced all the copy/paste code with `obj.method = create_method(arg_here)`.  It cut out a huge amount of boilerplate and left me with a handful of functions to work with instead of dozens.

Except for the lack of common FP staples like `map` due to its minimal runtime, Lua's amenable to functional programming patterns like that, and using them can eliminate a lot of anti-pattern stuff if you're comfortable with it.  FP's been a niche thing for a long time, though, and even though there's been a lot of hype for it in the past few years, not everyone using FP will be comfortable building and using it from nothing in the way that Lua requires.  It can be worth it, though, because once you write up a few things like `map`, `reduce`, `compose`, and `partial` you can replace a lot of boilerplate and nesting with declarative code and function composition.","<div class=""md""><blockquote>
<p>So my question is: is this problem a result of the original engineer who wrote the code, or is this more an intrinsic problem with the language?</p>
</blockquote>

<p>Mostly the former, I think. Usually Lua&#39;s being written on the side by people that are primarily using another language (often C or C++) and end up trying to write code the same way. Lua&#39;s a simple language in the same way Scheme is a simple language, and I think most programmers just don&#39;t know how to deal with that because they&#39;re accustomed to having more features and syntax.  So, when they get tasked with writing some Lua on the side they end up working against the language rather than with it because they don&#39;t spend time learning how to do things differently.</p>

<p>Lua, like Scheme, is a small language with a powerful foundation that lets you create things that the language doesn&#39;t natively have.  Where Scheme is built on first-class functions and lists, Lua uses first-class functions and tables.  It lacks a macro system so you can&#39;t arbitrarily define new syntax like you can in a Scheme, but it&#39;s still flexible enough that you can build and do interesting things with it.</p>

<p>For example, consider Lua&#39;s idea of OOP.  It doesn&#39;t actually support OOP, but the combination of first-class functions and tables lets you create it by binding table keys to functions and passing the table to its methods with an explicit <code>self</code> argument.  There&#39;s syntactic sugar to hide this, but that&#39;s what&#39;s really going on under the hood.  <code>function foo:bar (x) ... end</code> is really <code>function foo.bar (self,x) ... end</code>, which in turn is really <code>foo[&quot;bar&quot;] = function (self, x) .. end</code>.  The same applies to calling, and when you call <code>obj:bar(&quot;baz&quot;)</code> what you&#39;re really doing is <code>obj[&quot;bar&quot;](obj, &quot;baz&quot;)</code>. Then add a metatable and you can even create inheritance and do other crazy things.</p>

<p>This kind of thing isn&#39;t necessarily well understood, so you end up with programmers writing a lot of boilerplate and copy/paste code.  I&#39;ve told this story here before, but it&#39;s the best example I&#39;ve personally encountered so it&#39;s worth mentioning again: I once forked the Lua code for the quest tracker for a AAA-tier MMORPG intending to fix some basic bugs it had, and when I started digging into it I noticed that it was OOP Lua where 90% of the code was copy/paste of the same pattern, defining similar methods for multiple objects.  While bug-fixing I decided to refactor it a bit for my own sanity, so I wrote a couple higher-order functions whose return values were functions in the form of <code>method(self,args)</code> and replaced all the copy/paste code with <code>obj.method = create_method(arg_here)</code>.  It cut out a huge amount of boilerplate and left me with a handful of functions to work with instead of dozens.</p>

<p>Except for the lack of common FP staples like <code>map</code> due to its minimal runtime, Lua&#39;s amenable to functional programming patterns like that, and using them can eliminate a lot of anti-pattern stuff if you&#39;re comfortable with it.  FP&#39;s been a niche thing for a long time, though, and even though there&#39;s been a lot of hype for it in the past few years, not everyone using FP will be comfortable building and using it from nothing in the way that Lua requires.  It can be worth it, though, because once you write up a few things like <code>map</code>, <code>reduce</code>, <code>compose</code>, and <code>partial</code> you can replace a lot of boilerplate and nesting with declarative code and function composition.</p>
</div>",1610840323.0,,False,gjip25i,False,t3_ky8ts3,t1_gjh5yto,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjip25i/,1,False,3,False,ky8ts3,lua,t5_2qjla
584,Malnilion,"As someone fairly new to Lua, the odd nil behavior you've described is really good to know, thank you. I suppose it would leave you potentially having to reserve a value in lieu of nil as a sentinel?","<div class=""md""><p>As someone fairly new to Lua, the odd nil behavior you&#39;ve described is really good to know, thank you. I suppose it would leave you potentially having to reserve a value in lieu of nil as a sentinel?</p>
</div>",1610807767.0,,False,gjgnj0e,False,t3_ky8ts3,t1_gjg224v,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjgnj0e/,1,False,2,False,ky8ts3,lua,t5_2qjla
585,britzl,">This whole situation sucks

If you are aware of this behaviour you will very quickly learn to not do t\[x\] = nil and instead do table.remove(t, x) in the case where the table t is acting as an array.

> another fix could be to have a way to flag a table as indexed-only so that it could handle the table differently and not ""lose"" parts of it

If you really want this it is easy to achieve through a meta-method on the table.","<div class=""md""><blockquote>
<p>This whole situation sucks</p>
</blockquote>

<p>If you are aware of this behaviour you will very quickly learn to not do t[x] = nil and instead do table.remove(t, x) in the case where the table t is acting as an array.</p>

<blockquote>
<p>another fix could be to have a way to flag a table as indexed-only so that it could handle the table differently and not &quot;lose&quot; parts of it</p>
</blockquote>

<p>If you really want this it is easy to achieve through a meta-method on the table.</p>
</div>",1611054733.0,,False,gjtipjb,False,t3_ky8ts3,t1_gjg224v,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjtipjb/,1,False,1,False,ky8ts3,lua,t5_2qjla
586,ws-ilazki,"(paging /u/Bobby_Bonsaimind on this as well)

> No ""switch""/""case""

Not having a dedicated syntax for it isn't ideal, but at least you can get the same basic behaviour using tables to dispatch named or anonymous functions.  Example of what I mean:

    switch = {foo, bar, baz}
    x = 2
    switch[x]() -- calls bar()

Or if you want something that looks vaguely like a switch statement you can make a function, like this quickie attempt:
 
    function switch (test, case, ...)
      -- The use of ... allows extra arguments to be passed on if desired.
      case[test](...) 
    end
    
    switch(
      ""c"",
      {
        a = foo,
        b = bar,
        c = function () print(""c"") end
      })

Missing switch/case isn't a big deal, but I really miss pattern matching (with guards) in languages that lack them. :(","<div class=""md""><p>(paging <a href=""/u/Bobby_Bonsaimind"">/u/Bobby_Bonsaimind</a> on this as well)</p>

<blockquote>
<p>No &quot;switch&quot;/&quot;case&quot;</p>
</blockquote>

<p>Not having a dedicated syntax for it isn&#39;t ideal, but at least you can get the same basic behaviour using tables to dispatch named or anonymous functions.  Example of what I mean:</p>

<pre><code>switch = {foo, bar, baz}
x = 2
switch[x]() -- calls bar()
</code></pre>

<p>Or if you want something that looks vaguely like a switch statement you can make a function, like this quickie attempt:</p>

<pre><code>function switch (test, case, ...)
  -- The use of ... allows extra arguments to be passed on if desired.
  case[test](...) 
end

switch(
  &quot;c&quot;,
  {
    a = foo,
    b = bar,
    c = function () print(&quot;c&quot;) end
  })
</code></pre>

<p>Missing switch/case isn&#39;t a big deal, but I really miss pattern matching (with guards) in languages that lack them. :(</p>
</div>",1610800049.0,,False,gjg87hm,False,t3_ky8ts3,t1_gjg2p4u,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjg87hm/,1,False,4,False,ky8ts3,lua,t5_2qjla
587,Bobby_Bonsaimind," > No ""continue""

I can only speak for myself, but I always try to structure my loops without `continue` to make the flow easier to follow. For example, if there are a lot of preconditions, pushing them into a function is a good idea and makes everything easier to follow.

 > No ""switch""/""case""

That one always hurts... :(","<div class=""md""><blockquote>
<p>No &quot;continue&quot;</p>
</blockquote>

<p>I can only speak for myself, but I always try to structure my loops without <code>continue</code> to make the flow easier to follow. For example, if there are a lot of preconditions, pushing them into a function is a good idea and makes everything easier to follow.</p>

<blockquote>
<p>No &quot;switch&quot;/&quot;case&quot;</p>
</blockquote>

<p>That one always hurts... :(</p>
</div>",1610798239.0,,False,gjg50kl,False,t3_ky8ts3,t1_gjg2p4u,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjg50kl/,0,False,3,False,ky8ts3,lua,t5_2qjla
588,LindTaylor,"You can emulate ""continue""  with go-to statement! I do this frequently","<div class=""md""><p>You can emulate &quot;continue&quot;  with go-to statement! I do this frequently</p>
</div>",1610830416.0,,False,gji4q9o,False,t3_ky8ts3,t1_gjg2p4u,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gji4q9o/,1,False,1,False,ky8ts3,lua,t5_2qjla
589,ggchappell,"Good point.

And now we can all have another argument about how important a feature needs to be in order to justify doing things a different way from most other PLs. :-)","<div class=""md""><p>Good point.</p>

<p>And now we can all have another argument about how important a feature needs to be in order to justify doing things a different way from most other PLs. :-)</p>
</div>",1610822393.0,,False,gjhmrsx,False,t3_ky8ts3,t1_gjhmf2d,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjhmrsx/,0,False,1,False,ky8ts3,lua,t5_2qjla
590,mad_poet_navarth,Thank you for a very thorough response. I don't believe any use of oopish syntax sugar exists at all in our code. I will look into how we might be able to reduce the if/then madness with more fp and oopishness.,"<div class=""md""><p>Thank you for a very thorough response. I don&#39;t believe any use of oopish syntax sugar exists at all in our code. I will look into how we might be able to reduce the if/then madness with more fp and oopishness.</p>
</div>",1610841170.0,,False,gjiqnwp,False,t3_ky8ts3,t1_gjip25i,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjiqnwp/,1,False,1,False,ky8ts3,lua,t5_2qjla
591,ws-ilazki,"That's one option, possibly your only one depending on the code.  To be fair, Lua libraries and APIs don't typically use nil a lot so it's normally not something you need to worry about too much, so the usual pattern is pervasive nil checking.  You see the same pattern with table accesses, since `foo.bar` is a runtime error if `foo` returns nil, which is why Lua code often does things like `if foo and foo.bar then return foo.bar.baz end`:  test `foo` and short-circuit on nil; test `foo.bar` and short-circuit on nil; return `foo.bar.baz` if foo and bar both exist.

It's also primarily a problem only if using indexed tables, so most code won't care and you can pretend nil works sanely most of the time.  If you're using them like arrays, though, you have to watch out.  I ran into it originally because I was implementing FP staples like `map` and in one of them I was joining two indexed tables together.  Worked great until I used it with a function that returned nil and ended up with a fragmented table.

I haven't gotten around to doing it because I haven't been using Lua, but my plan for dealing with it the next time it becomes relevant is going to be sentinel-based like you mention.  I have a half-made proof-of-concept already, but the idea is that I'm going to create an `Array` data type that returns a table with a modified metatable that lets it intercept array accesses and replaces `nil`s internally with `empty` (defined as `empty = {}`).  Try to save a nil to an index and it becomes `empty` internally, and accessing any index that contains `empty` will instead return the expected `nil`.  It works out because equality checks on tables are only true if they're the same table, so `{} == {}` is false and `empty == {}` is false, but `empty == empty` is true, so you can add `if t[x] == empty then return nil end` into the logic to return an array index without any undesirable side effects.","<div class=""md""><p>That&#39;s one option, possibly your only one depending on the code.  To be fair, Lua libraries and APIs don&#39;t typically use nil a lot so it&#39;s normally not something you need to worry about too much, so the usual pattern is pervasive nil checking.  You see the same pattern with table accesses, since <code>foo.bar</code> is a runtime error if <code>foo</code> returns nil, which is why Lua code often does things like <code>if foo and foo.bar then return foo.bar.baz end</code>:  test <code>foo</code> and short-circuit on nil; test <code>foo.bar</code> and short-circuit on nil; return <code>foo.bar.baz</code> if foo and bar both exist.</p>

<p>It&#39;s also primarily a problem only if using indexed tables, so most code won&#39;t care and you can pretend nil works sanely most of the time.  If you&#39;re using them like arrays, though, you have to watch out.  I ran into it originally because I was implementing FP staples like <code>map</code> and in one of them I was joining two indexed tables together.  Worked great until I used it with a function that returned nil and ended up with a fragmented table.</p>

<p>I haven&#39;t gotten around to doing it because I haven&#39;t been using Lua, but my plan for dealing with it the next time it becomes relevant is going to be sentinel-based like you mention.  I have a half-made proof-of-concept already, but the idea is that I&#39;m going to create an <code>Array</code> data type that returns a table with a modified metatable that lets it intercept array accesses and replaces <code>nil</code>s internally with <code>empty</code> (defined as <code>empty = {}</code>).  Try to save a nil to an index and it becomes <code>empty</code> internally, and accessing any index that contains <code>empty</code> will instead return the expected <code>nil</code>.  It works out because equality checks on tables are only true if they&#39;re the same table, so <code>{} == {}</code> is false and <code>empty == {}</code> is false, but <code>empty == empty</code> is true, so you can add <code>if t[x] == empty then return nil end</code> into the logic to return an array index without any undesirable side effects.</p>
</div>",1610841331.0,,False,gjiqz9f,False,t3_ky8ts3,t1_gjgnj0e,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjiqz9f/,0,False,2,False,ky8ts3,lua,t5_2qjla
592,ws-ilazki,"> If you are aware of this behaviour you will very quickly learn to not do t[x] = nil and instead do table.remove(t, x) in the case where the table t is acting as an array.

That only helps if you're actually trying to remove things.  The bigger issue is that nil's behaviour means you can *unintentionally break arrays*.  Here's a contrived example that illustrates the issue without needing a lot of code:

    map = function (f, t)
      local _t = {}
      for k,v in pairs(t) do
        _t[k] = f(v)
      end
      return _t
    end
    
    maybe_nil = function (x)
      if math.random(2) == 2 then return x
      else return nil 
      end
    end
    
    t = map(maybe_nil, {10,20,30,40,50})

`map` is a pretty simple higher-order function that operates on a structure (tables in this case) by applying a function to each value in the structure, returning a new structure with these applied values.  One of the most basic FP staples.  However, because the calling function can return nil, it can create what is essentially a broken array simply because Lua does strange things with nils.  

Not cool, and not as trivial to avoid as you suggest because now you have to wrap the function you want to use in a pointless wrapper that just checks nil and either raises an error or replaces it with some kind of sentinel value.  You could make it part of `map` itself but that basically breaks `map` because now you're adding your own magic behaviour to a basic higher-order function just combat Lua's magic behaviour. That's terrible and could have been avoided by having an actual `delete` keyword instead of trying to *overload assignment* to un-assign variables.

Same thing can happen with imperative programming.  You get to clutter up the logic of your loops with nil tests and errors if there's any chance the function you call might return nil.  You shouldn't need that kind of defensive programming just to protect yourself from a dumb-ass design flaw like ""hey guys, you know what would be cool? if variable assignment sometimes *unassigned variables* instead! Wouldn't that be fun?""

> If you really want this it is easy to achieve through a meta-method on the table.

I already said exactly that two days ago in my reply to the other comment asking about how to deal with the issue.  One option is to make your own internal sentinel (e.g. `empty = {}`), catch table accesses with metamethods, and swap nil for empty on assignment and vice-versa on accessing.  I've already done that, but it creates its own issues because the reliable way to do that is keep an empty table and store actual data in a proxy table, which messes with length calculations and pairs/ipairs in LuaJIT since it lacks metamethods to manipulate their behaviour.  I initially tried it without the proxy table but __index and __newindex fail to catch all access attempts in that case, so pairs and ipairs worked but nils slipped in.  Other options have their own, different issues as well; like another obvious idea would be to just keep track of the highest integer key accessed internally and tweak `ipairs` behaviour slightly, except again, can't use the __ipairs metamethod in LuaJIT, which limits the usefulness of that approach as well.

Turns out that while you can work around the behaviour, it's not quite as easy to do as you imply. And all because Lua was made with one very stupid design decision.","<div class=""md""><blockquote>
<p>If you are aware of this behaviour you will very quickly learn to not do t[x] = nil and instead do table.remove(t, x) in the case where the table t is acting as an array.</p>
</blockquote>

<p>That only helps if you&#39;re actually trying to remove things.  The bigger issue is that nil&#39;s behaviour means you can <em>unintentionally break arrays</em>.  Here&#39;s a contrived example that illustrates the issue without needing a lot of code:</p>

<pre><code>map = function (f, t)
  local _t = {}
  for k,v in pairs(t) do
    _t[k] = f(v)
  end
  return _t
end

maybe_nil = function (x)
  if math.random(2) == 2 then return x
  else return nil 
  end
end

t = map(maybe_nil, {10,20,30,40,50})
</code></pre>

<p><code>map</code> is a pretty simple higher-order function that operates on a structure (tables in this case) by applying a function to each value in the structure, returning a new structure with these applied values.  One of the most basic FP staples.  However, because the calling function can return nil, it can create what is essentially a broken array simply because Lua does strange things with nils.  </p>

<p>Not cool, and not as trivial to avoid as you suggest because now you have to wrap the function you want to use in a pointless wrapper that just checks nil and either raises an error or replaces it with some kind of sentinel value.  You could make it part of <code>map</code> itself but that basically breaks <code>map</code> because now you&#39;re adding your own magic behaviour to a basic higher-order function just combat Lua&#39;s magic behaviour. That&#39;s terrible and could have been avoided by having an actual <code>delete</code> keyword instead of trying to <em>overload assignment</em> to un-assign variables.</p>

<p>Same thing can happen with imperative programming.  You get to clutter up the logic of your loops with nil tests and errors if there&#39;s any chance the function you call might return nil.  You shouldn&#39;t need that kind of defensive programming just to protect yourself from a dumb-ass design flaw like &quot;hey guys, you know what would be cool? if variable assignment sometimes <em>unassigned variables</em> instead! Wouldn&#39;t that be fun?&quot;</p>

<blockquote>
<p>If you really want this it is easy to achieve through a meta-method on the table.</p>
</blockquote>

<p>I already said exactly that two days ago in my reply to the other comment asking about how to deal with the issue.  One option is to make your own internal sentinel (e.g. <code>empty = {}</code>), catch table accesses with metamethods, and swap nil for empty on assignment and vice-versa on accessing.  I&#39;ve already done that, but it creates its own issues because the reliable way to do that is keep an empty table and store actual data in a proxy table, which messes with length calculations and pairs/ipairs in LuaJIT since it lacks metamethods to manipulate their behaviour.  I initially tried it without the proxy table but __index and __newindex fail to catch all access attempts in that case, so pairs and ipairs worked but nils slipped in.  Other options have their own, different issues as well; like another obvious idea would be to just keep track of the highest integer key accessed internally and tweak <code>ipairs</code> behaviour slightly, except again, can&#39;t use the __ipairs metamethod in LuaJIT, which limits the usefulness of that approach as well.</p>

<p>Turns out that while you can work around the behaviour, it&#39;s not quite as easy to do as you imply. And all because Lua was made with one very stupid design decision.</p>
</div>",1611060527.0,,False,gjtpmuw,False,t3_ky8ts3,t1_gjtipjb,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjtpmuw/,1,False,2,False,ky8ts3,lua,t5_2qjla
593,britzl,"Like you said, a switch expression is easy to create if needed. You can even have the switch expression return a value like in Java 12 switch expressions.

This is one of the nice things about Lua. It's usually pretty easy to expand and add additional functionality to the existing (and somewhat limited but easy to learn) set of language features and APIs.","<div class=""md""><p>Like you said, a switch expression is easy to create if needed. You can even have the switch expression return a value like in Java 12 switch expressions.</p>

<p>This is one of the nice things about Lua. It&#39;s usually pretty easy to expand and add additional functionality to the existing (and somewhat limited but easy to learn) set of language features and APIs.</p>
</div>",1611056026.0,,False,gjtk4dx,False,t3_ky8ts3,t1_gjg87hm,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjtk4dx/,0,False,1,False,ky8ts3,lua,t5_2qjla
594,wh1t3_rabbit,"I totally forgot about this.
You can write loops without using for or while by using goto. Why you would ever do that I don't know, but you can.","<div class=""md""><p>I totally forgot about this.
You can write loops without using for or while by using goto. Why you would ever do that I don&#39;t know, but you can.</p>
</div>",1611365173.0,,False,gk9tw0h,False,t3_ky8ts3,t1_gji4q9o,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gk9tw0h/,0,False,1,False,ky8ts3,lua,t5_2qjla
595,ws-ilazki,"Yeah it's hard to say what would help and what wouldn't without access to the code base.  The OOP thing was just an example of how Lua is more flexible than it seems at a glance and how that can change the code when you know how to (ab)use it.  The person (people?) writing the original code in my example probably primarily worked in C or C++ and only used Lua just enough to get things done, so they resorted to copy/paste instead of taking advantage of language features that wouldn't be familiar to them.  A little extra knowledge and a different background and I was able to write it in a very different and much shorter way.

OOP aside, the point is there's often something you can do in a refactor to get rid of the heavy nesting, even if it's just writing more and smaller functions (another FP thing).  Moving loops out into `map(fun,list)` gets rid of one level of indentation *and* cuts out some `for k,v in pairs(t) do ... end` boilerplate, for one example.  Using predicate functions for tests like `filter(predicate,list)` can get rid of some, too, and you can use tricks like `map(compose({fun1, fun2, fun3}), list)` to squash things further.  Lua's lack of additional syntax makes it verbose if you write everything out like normal, but higher-order functions are perfect for removing (or at least abstracting away) some of that verbosity.

Even if you don't go heavy into FP, just pulling out a bit of deeply nested code into its own single-use function can be a big win for readability.  Usually deep nesting is a sign that you're trying to do too much in one place and should probably split things up for readability and testability.

You can also make use of Lua's first-class functions in less FP-ish seeming ways, like [my other comment about switch/case](https://www.reddit.com/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjg87hm/), which lets you make a table with functions to call and then `t[case]()` instead of a bunch of if/then/else logic.  You don't have to go hard on the FP concepts to make use of first-class functions, though it does help you get more out of it.  I did stuff like this in Perl for years with subroutine references without even knowing what FP was.

One suggestion, though:  make liberal use of `local` functions.  There's a temptation to use anoymous functions heavily when doing FP because naming things sucks, but it's almost always more readable to make a named function with limited scope instead.  An example, assuming you already have a `map` function defined:

    -- Instead of doing this
    double_all = function (t)
      return map(function (x) return x * 2 end, t)
    end
    
    -- write this
    double_all = function (t)
      local double = function (x) 
        return x * 2
      end
      return map(double, t)
    end

My argument for the latter is that it separates the logic more neatly into individual components.  You can write and test `double` independently on a single value and be sure it works, and it makes the `map(double,t)` line standalone and more declarative: you can understand what it's going to do even without looking at the implementation details of `double`.  On the other hand, throwing an anonymous function in the middle of it forces you to stop reading and comprehending one expression (the map call) to figure out what the other does (the anonymous function).  It's not as big a deal in something short like that, but breaking the functions out in that way helps with more complex logic.  Especially since Lua's anonymous function syntax is so verbose.  And again, even if you don't write particularly FP-style code otherwise, you can still use the same idea (local named functions) to flatten some of those pyramids a bit, you just have to find the right balance.

**Edit:**  I forgot to also mention tables and metatables a bit more in how they can change the structure of your program in interesting ways. Since metatables let you change the behaviour of a table, you can do more than just implement traditional OOP with them.  You can make them behave differently and even emulate other data types with a mix of tables, metatables, and first-class functions.  

I gave an example of doing this to [make tables comparable, tuple-like data types](https://www.reddit.com/r/lua/comments/k28jgc/line_30_then_expected/gdtkusx/) a few weeks ago.  Using that, you could do direct equality comparisons like `if coords == tuple(10,20)` instead of writing things like `if coords.x == 10 and coords.y == 20`.  And they're deeply comparable by nature: `square = tuple(tuple(10,10), tuple(20,20)); if shape == square ...` becomes possible.

This isn't necessarily directly relatable to your problem, but the *idea* is:  approaching the problem from a different angle that exploits Lua's strengths can change how you write code and cut out a lot of boilerplate.  Change how Lua tests table equality to make a new ""type"" and you can remove a bunch of conditional logic.  Doing other things of the sort with table/metatable magic, like making point or shape ""types"" out of tables, can save you a lot of trouble in places you don't even realise you're having trouble.","<div class=""md""><p>Yeah it&#39;s hard to say what would help and what wouldn&#39;t without access to the code base.  The OOP thing was just an example of how Lua is more flexible than it seems at a glance and how that can change the code when you know how to (ab)use it.  The person (people?) writing the original code in my example probably primarily worked in C or C++ and only used Lua just enough to get things done, so they resorted to copy/paste instead of taking advantage of language features that wouldn&#39;t be familiar to them.  A little extra knowledge and a different background and I was able to write it in a very different and much shorter way.</p>

<p>OOP aside, the point is there&#39;s often something you can do in a refactor to get rid of the heavy nesting, even if it&#39;s just writing more and smaller functions (another FP thing).  Moving loops out into <code>map(fun,list)</code> gets rid of one level of indentation <em>and</em> cuts out some <code>for k,v in pairs(t) do ... end</code> boilerplate, for one example.  Using predicate functions for tests like <code>filter(predicate,list)</code> can get rid of some, too, and you can use tricks like <code>map(compose({fun1, fun2, fun3}), list)</code> to squash things further.  Lua&#39;s lack of additional syntax makes it verbose if you write everything out like normal, but higher-order functions are perfect for removing (or at least abstracting away) some of that verbosity.</p>

<p>Even if you don&#39;t go heavy into FP, just pulling out a bit of deeply nested code into its own single-use function can be a big win for readability.  Usually deep nesting is a sign that you&#39;re trying to do too much in one place and should probably split things up for readability and testability.</p>

<p>You can also make use of Lua&#39;s first-class functions in less FP-ish seeming ways, like <a href=""https://www.reddit.com/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjg87hm/"">my other comment about switch/case</a>, which lets you make a table with functions to call and then <code>t[case]()</code> instead of a bunch of if/then/else logic.  You don&#39;t have to go hard on the FP concepts to make use of first-class functions, though it does help you get more out of it.  I did stuff like this in Perl for years with subroutine references without even knowing what FP was.</p>

<p>One suggestion, though:  make liberal use of <code>local</code> functions.  There&#39;s a temptation to use anoymous functions heavily when doing FP because naming things sucks, but it&#39;s almost always more readable to make a named function with limited scope instead.  An example, assuming you already have a <code>map</code> function defined:</p>

<pre><code>-- Instead of doing this
double_all = function (t)
  return map(function (x) return x * 2 end, t)
end

-- write this
double_all = function (t)
  local double = function (x) 
    return x * 2
  end
  return map(double, t)
end
</code></pre>

<p>My argument for the latter is that it separates the logic more neatly into individual components.  You can write and test <code>double</code> independently on a single value and be sure it works, and it makes the <code>map(double,t)</code> line standalone and more declarative: you can understand what it&#39;s going to do even without looking at the implementation details of <code>double</code>.  On the other hand, throwing an anonymous function in the middle of it forces you to stop reading and comprehending one expression (the map call) to figure out what the other does (the anonymous function).  It&#39;s not as big a deal in something short like that, but breaking the functions out in that way helps with more complex logic.  Especially since Lua&#39;s anonymous function syntax is so verbose.  And again, even if you don&#39;t write particularly FP-style code otherwise, you can still use the same idea (local named functions) to flatten some of those pyramids a bit, you just have to find the right balance.</p>

<p><strong>Edit:</strong>  I forgot to also mention tables and metatables a bit more in how they can change the structure of your program in interesting ways. Since metatables let you change the behaviour of a table, you can do more than just implement traditional OOP with them.  You can make them behave differently and even emulate other data types with a mix of tables, metatables, and first-class functions.  </p>

<p>I gave an example of doing this to <a href=""https://www.reddit.com/r/lua/comments/k28jgc/line_30_then_expected/gdtkusx/"">make tables comparable, tuple-like data types</a> a few weeks ago.  Using that, you could do direct equality comparisons like <code>if coords == tuple(10,20)</code> instead of writing things like <code>if coords.x == 10 and coords.y == 20</code>.  And they&#39;re deeply comparable by nature: <code>square = tuple(tuple(10,10), tuple(20,20)); if shape == square ...</code> becomes possible.</p>

<p>This isn&#39;t necessarily directly relatable to your problem, but the <em>idea</em> is:  approaching the problem from a different angle that exploits Lua&#39;s strengths can change how you write code and cut out a lot of boilerplate.  Change how Lua tests table equality to make a new &quot;type&quot; and you can remove a bunch of conditional logic.  Doing other things of the sort with table/metatable magic, like making point or shape &quot;types&quot; out of tables, can save you a lot of trouble in places you don&#39;t even realise you&#39;re having trouble.</p>
</div>",1610843293.0,,1610846051.0,gjius4f,False,t3_ky8ts3,t1_gjiqnwp,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjius4f/,1,False,2,False,ky8ts3,lua,t5_2qjla
596,britzl,"Fair enough. You're arguments are valid and in your case there are probably other and better options.

In my case, working on games and game engines, I find Lua to work really well and it allows me to solve problems efficiently.","<div class=""md""><p>Fair enough. You&#39;re arguments are valid and in your case there are probably other and better options.</p>

<p>In my case, working on games and game engines, I find Lua to work really well and it allows me to solve problems efficiently.</p>
</div>",1611146730.0,,False,gjxtbo6,False,t3_ky8ts3,t1_gjtpmuw,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjxtbo6/,1,False,1,False,ky8ts3,lua,t5_2qjla
597,mad_poet_navarth,"Wow. Thanks again for the detailed response. I'm actually not the primary (or even secondary) lua maintainer, but I will pass this info on and make use of it when it is my turn to write a web page (coming soon). Clearly the first order of business is to write some simple fp routines like map and see where that takes us. And the switch/case idea ... really good.","<div class=""md""><p>Wow. Thanks again for the detailed response. I&#39;m actually not the primary (or even secondary) lua maintainer, but I will pass this info on and make use of it when it is my turn to write a web page (coming soon). Clearly the first order of business is to write some simple fp routines like map and see where that takes us. And the switch/case idea ... really good.</p>
</div>",1610887407.0,,False,gjku1i0,False,t3_ky8ts3,t1_gjius4f,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjku1i0/,1,False,1,False,ky8ts3,lua,t5_2qjla
598,ws-ilazki,"Oh, I *generally* agree with you about Lua; I like the language overall and find it to be a nice mix of easy and pleasant to use.  That's what makes those two decisions (how nils are handled and global-by-default) so frustrating, they're a couple giant ""WTF were you thinking?!"" decisions in an otherwise nice language.  Language defaults should help users avoid mistakes, not make them easier to make, and those two things are basically programmer booby traps.

No matter how nice a language is there's always *something* to complain about, and those (plus some lesser stuff like wishing for a shorter anonymous function syntax) are my gripes.  I mostly bring up the nil thing in discussions because, unlike global-by-default, it's a relatively unknown foot-gun.  Plus I think it's a bit more relevant to ""what's wrong with Lua?"" types of discussions than the usual ""oh no, arrays start at one :("" griping.","<div class=""md""><p>Oh, I <em>generally</em> agree with you about Lua; I like the language overall and find it to be a nice mix of easy and pleasant to use.  That&#39;s what makes those two decisions (how nils are handled and global-by-default) so frustrating, they&#39;re a couple giant &quot;WTF were you thinking?!&quot; decisions in an otherwise nice language.  Language defaults should help users avoid mistakes, not make them easier to make, and those two things are basically programmer booby traps.</p>

<p>No matter how nice a language is there&#39;s always <em>something</em> to complain about, and those (plus some lesser stuff like wishing for a shorter anonymous function syntax) are my gripes.  I mostly bring up the nil thing in discussions because, unlike global-by-default, it&#39;s a relatively unknown foot-gun.  Plus I think it&#39;s a bit more relevant to &quot;what&#39;s wrong with Lua?&quot; types of discussions than the usual &quot;oh no, arrays start at one :(&quot; griping.</p>
</div>",1611148551.0,,False,gjxvwcw,False,t3_ky8ts3,t1_gjxtbo6,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjxvwcw/,0,False,1,False,ky8ts3,lua,t5_2qjla
599,ws-ilazki,"No problem, I like discussing stuff like this.  It's interesting how well Lua and FP go together despite the maintainers having zero interest in supporting its use as an FP language; lots of OOP syntactic sugar in the parser, but no syntactic sugar for anonymous functions (I'd love either an OCaml-style `fun x y -> ...` or JS-style `(x y) => ...` shorthand) and none of the fundamental FP staples (map, reduce, compose).  All you really need are first-class functions and you can build the rest, though. :)

> Clearly the first order of business is to write some simple fp routines like map and see where that takes us.

Good luck with it.  There are FP libraries out there already, though I can't suggest any because I've never bothered; I just implement what I need when I need it.  I started doing it in Lua as practice, to confirm I understood FP well enough to build it from basics, and started keeping the stuff I made in a file for use.  

Even if you end up using another library it's still a good idea to do that yourself, just as an exercise.  No need for recursion, you can write them in typical imperative style internally, and it'll help you understand the logic of how higher-order functions let you abstract away writing loops.  Making your own `map` is simple enough, and then once you have that done the experience translates pretty directly to creating `fold_left` (often called `reduce`).

Going off on a bit of tangent here, but that's the way I went with it (make map, make fold), and it gave me this ""ah-ha!"" moment where I realised that, yes, a fold always takes a list and reduces it down to a single value, but that ""single value"" can be a complex structure like a list (or table in Lua's case), which means reduce can actually build new lists.  That means map is really just a specific implementation of the more general concept: folds.  Once I had that epiphany I started seeing what else I could create with my Lua `reduce` function, and the answer was ""basically everything"".  Map? It's a fold. Filter? Yep.  Function composition via a `compose` function? Still a fold. 

Fold (reduce) is the brick that builds the FP house.  For readability or optimisation purposes it's usually better to write the various FP staples as their own things rather than building them from folds, but in the end you're just writing special-purpose versions of the more generic fold.  Making the journey to that realisation helped me a lot with understanding FP.

> And the switch/case idea ... really good.

Thanks.  Been using the basic idea of using tables for function dispatch for ages because it seemed obvious and natural when I was using Perl, but the idea to make a fake `switch` construct was just an off-the-cuff dumb idea I thought of while writing that comment.  I kind of like the idea too, think I'll save it with my random Lua snippets just in case. I wish Lua had Scheme-like macros in some form for properly defining new syntax, but tricks like that help a bit.

Now for some off-topic rambling about Lua compilers:

Depending on how you're doing things, something else you guys might want to consider is using another language entirely.  There are a bunch of [languages that compile to Lua source code](https://github.com/hengestone/lua-languages), and many (perhaps most) are made to output Lua source in a way that is amenable to use in embedded contexts.  They let you declare API functions as ""native"" functions so the compiler won't error and emit code that you can feed to a program's embedded Lua, it's cool.  This lets you work in a more batteries-included language with additional syntax in places where Lua would normally be the only option, at the cost of adding another tool into the workflow.

Moonscript's probably the most well-known and popular one, Python-ish syntax and produces pretty good human-readable Lua.  There's also Teal, which is basically just ""Lua, but with static types and type checking"".  I'm odd, though; I'm partial to two more obscure ones:  Urn and Amulet.  

Urn is a lisp dialect with a mix of ideas from Scheme, Common Lisp, and Clojure; what makes it interesting, though, is that it supports macros.  Due to this, it has a pretty sizeable standard library implemented in its own macro system and it's possible to add new syntax of your own.  The Lua files it outputs aren't particularly human-readable, but it does dead-code elimination so the output file you get only includes your code and the stdlib parts you absolutely need, so you get a single standalone file that's good for embedding.

Amulet, on the other hand, is an ML-family language with a lot of inspiration from OCaml and Haskell. Harder to get started with but has an amazing type system, also produces standalone source files, and has a cool bonus feature: the ability to create native binaries by combining the compiled Lua file, an embedded Lua interpreter, and a small native-code shim into a single file. I mostly just like Amulet because I like ML-family languages and their expressive, powerful type systems, but the native code thing is a cool trick. :)","<div class=""md""><p>No problem, I like discussing stuff like this.  It&#39;s interesting how well Lua and FP go together despite the maintainers having zero interest in supporting its use as an FP language; lots of OOP syntactic sugar in the parser, but no syntactic sugar for anonymous functions (I&#39;d love either an OCaml-style <code>fun x y -&gt; ...</code> or JS-style <code>(x y) =&gt; ...</code> shorthand) and none of the fundamental FP staples (map, reduce, compose).  All you really need are first-class functions and you can build the rest, though. :)</p>

<blockquote>
<p>Clearly the first order of business is to write some simple fp routines like map and see where that takes us.</p>
</blockquote>

<p>Good luck with it.  There are FP libraries out there already, though I can&#39;t suggest any because I&#39;ve never bothered; I just implement what I need when I need it.  I started doing it in Lua as practice, to confirm I understood FP well enough to build it from basics, and started keeping the stuff I made in a file for use.  </p>

<p>Even if you end up using another library it&#39;s still a good idea to do that yourself, just as an exercise.  No need for recursion, you can write them in typical imperative style internally, and it&#39;ll help you understand the logic of how higher-order functions let you abstract away writing loops.  Making your own <code>map</code> is simple enough, and then once you have that done the experience translates pretty directly to creating <code>fold_left</code> (often called <code>reduce</code>).</p>

<p>Going off on a bit of tangent here, but that&#39;s the way I went with it (make map, make fold), and it gave me this &quot;ah-ha!&quot; moment where I realised that, yes, a fold always takes a list and reduces it down to a single value, but that &quot;single value&quot; can be a complex structure like a list (or table in Lua&#39;s case), which means reduce can actually build new lists.  That means map is really just a specific implementation of the more general concept: folds.  Once I had that epiphany I started seeing what else I could create with my Lua <code>reduce</code> function, and the answer was &quot;basically everything&quot;.  Map? It&#39;s a fold. Filter? Yep.  Function composition via a <code>compose</code> function? Still a fold. </p>

<p>Fold (reduce) is the brick that builds the FP house.  For readability or optimisation purposes it&#39;s usually better to write the various FP staples as their own things rather than building them from folds, but in the end you&#39;re just writing special-purpose versions of the more generic fold.  Making the journey to that realisation helped me a lot with understanding FP.</p>

<blockquote>
<p>And the switch/case idea ... really good.</p>
</blockquote>

<p>Thanks.  Been using the basic idea of using tables for function dispatch for ages because it seemed obvious and natural when I was using Perl, but the idea to make a fake <code>switch</code> construct was just an off-the-cuff dumb idea I thought of while writing that comment.  I kind of like the idea too, think I&#39;ll save it with my random Lua snippets just in case. I wish Lua had Scheme-like macros in some form for properly defining new syntax, but tricks like that help a bit.</p>

<p>Now for some off-topic rambling about Lua compilers:</p>

<p>Depending on how you&#39;re doing things, something else you guys might want to consider is using another language entirely.  There are a bunch of <a href=""https://github.com/hengestone/lua-languages"">languages that compile to Lua source code</a>, and many (perhaps most) are made to output Lua source in a way that is amenable to use in embedded contexts.  They let you declare API functions as &quot;native&quot; functions so the compiler won&#39;t error and emit code that you can feed to a program&#39;s embedded Lua, it&#39;s cool.  This lets you work in a more batteries-included language with additional syntax in places where Lua would normally be the only option, at the cost of adding another tool into the workflow.</p>

<p>Moonscript&#39;s probably the most well-known and popular one, Python-ish syntax and produces pretty good human-readable Lua.  There&#39;s also Teal, which is basically just &quot;Lua, but with static types and type checking&quot;.  I&#39;m odd, though; I&#39;m partial to two more obscure ones:  Urn and Amulet.  </p>

<p>Urn is a lisp dialect with a mix of ideas from Scheme, Common Lisp, and Clojure; what makes it interesting, though, is that it supports macros.  Due to this, it has a pretty sizeable standard library implemented in its own macro system and it&#39;s possible to add new syntax of your own.  The Lua files it outputs aren&#39;t particularly human-readable, but it does dead-code elimination so the output file you get only includes your code and the stdlib parts you absolutely need, so you get a single standalone file that&#39;s good for embedding.</p>

<p>Amulet, on the other hand, is an ML-family language with a lot of inspiration from OCaml and Haskell. Harder to get started with but has an amazing type system, also produces standalone source files, and has a cool bonus feature: the ability to create native binaries by combining the compiled Lua file, an embedded Lua interpreter, and a small native-code shim into a single file. I mostly just like Amulet because I like ML-family languages and their expressive, powerful type systems, but the native code thing is a cool trick. :)</p>
</div>",1610892784.0,,False,gjl7sld,False,t3_ky8ts3,t1_gjku1i0,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjl7sld/,1,False,3,False,ky8ts3,lua,t5_2qjla
600,mad_poet_navarth,"Yes I have enough FP (via Swift) to grok that reduce (fold) is the swiss army knife of FP. And I will indeed roll my own. We have to have a learning goal at our company every year; I will make FP lua my 2021 goal. 

However, I'm not the primary, or even secondary, lua engineer. I won't be making the big long-term decisions; most of what I can accomplish will be one web page at a time (+ some lib functions). Most of our lua code is in mixed html/lua files, parsed using I think it's called haserl. That probably makes Moonscript/teal/Um/Amulet a no-go, but maybe you have some ideas on that front.","<div class=""md""><p>Yes I have enough FP (via Swift) to grok that reduce (fold) is the swiss army knife of FP. And I will indeed roll my own. We have to have a learning goal at our company every year; I will make FP lua my 2021 goal. </p>

<p>However, I&#39;m not the primary, or even secondary, lua engineer. I won&#39;t be making the big long-term decisions; most of what I can accomplish will be one web page at a time (+ some lib functions). Most of our lua code is in mixed html/lua files, parsed using I think it&#39;s called haserl. That probably makes Moonscript/teal/Um/Amulet a no-go, but maybe you have some ideas on that front.</p>
</div>",1610903351.0,,False,gjm8z6h,False,t3_ky8ts3,t1_gjl7sld,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjm8z6h/,1,False,2,False,ky8ts3,lua,t5_2qjla
601,ws-ilazki,"> Yes I have enough FP (via Swift) to grok that reduce (fold) is the swiss army knife of FP. And I will indeed roll my own. 

Awesome, that seems to be where FP understanding really hits.  At least, that was the moment that things really started to make sense for me and I went from ""I can use HOFs other people make pretty competently"" to ""I now think in terms of writing HOFs to solve problems"".

> We have to have a learning goal at our company every year; I will make FP lua my 2021 goal.

Nice. Maybe it'll have some positive effects on others as well, since it'll have to be pragmatic FP due to the language.  There's some ""purity or bust!"" cargo culting with the academic crowd and overly enthusiastic users that can be off-putting, but FP's not all-or-nothing and a lot of its idioms and the style it encourages (the basic and intermediate FP stuff) can be beneficial when used appropriately. Even just the most basic stuff, like ""make as much code as possible pure functions with args in, return values out, no side effects; keep functions small, testable, and composable"" can make code better without ever touching a single HOF.

> Most of our lua code is in mixed html/lua files, parsed using I think it's called haserl. That probably makes Moonscript/teal/Um/Amulet a no-go, but maybe you have some ideas on that front.

Just looked and that seems to do things PHP-style ""code inside tags inside HTML"" so I don't know of a sane way to use anything but Lua.  I mean, there are definitely ways to do it, but nothing you'd want to maintain and wouldn't make your coworkers want to kill you. :P  

Sure, it'd probably be a fun project to write a pre-preprocessor that extracts code from <% %> tags, runs it through the Lua transpiler of your choice, and then re-inserts the Lua output back into the haserl-friendly file, but I don't see any scenario where that goes well with the coworkers. :)","<div class=""md""><blockquote>
<p>Yes I have enough FP (via Swift) to grok that reduce (fold) is the swiss army knife of FP. And I will indeed roll my own. </p>
</blockquote>

<p>Awesome, that seems to be where FP understanding really hits.  At least, that was the moment that things really started to make sense for me and I went from &quot;I can use HOFs other people make pretty competently&quot; to &quot;I now think in terms of writing HOFs to solve problems&quot;.</p>

<blockquote>
<p>We have to have a learning goal at our company every year; I will make FP lua my 2021 goal.</p>
</blockquote>

<p>Nice. Maybe it&#39;ll have some positive effects on others as well, since it&#39;ll have to be pragmatic FP due to the language.  There&#39;s some &quot;purity or bust!&quot; cargo culting with the academic crowd and overly enthusiastic users that can be off-putting, but FP&#39;s not all-or-nothing and a lot of its idioms and the style it encourages (the basic and intermediate FP stuff) can be beneficial when used appropriately. Even just the most basic stuff, like &quot;make as much code as possible pure functions with args in, return values out, no side effects; keep functions small, testable, and composable&quot; can make code better without ever touching a single HOF.</p>

<blockquote>
<p>Most of our lua code is in mixed html/lua files, parsed using I think it&#39;s called haserl. That probably makes Moonscript/teal/Um/Amulet a no-go, but maybe you have some ideas on that front.</p>
</blockquote>

<p>Just looked and that seems to do things PHP-style &quot;code inside tags inside HTML&quot; so I don&#39;t know of a sane way to use anything but Lua.  I mean, there are definitely ways to do it, but nothing you&#39;d want to maintain and wouldn&#39;t make your coworkers want to kill you. :P  </p>

<p>Sure, it&#39;d probably be a fun project to write a pre-preprocessor that extracts code from &lt;% %&gt; tags, runs it through the Lua transpiler of your choice, and then re-inserts the Lua output back into the haserl-friendly file, but I don&#39;t see any scenario where that goes well with the coworkers. :)</p>
</div>",1610931969.0,,False,gjo6sfg,False,t3_ky8ts3,t1_gjm8z6h,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjo6sfg/,1,False,2,False,ky8ts3,lua,t5_2qjla
602,mad_poet_navarth,Thank you very much for all of your advice and info. It will definitely come in handy soon. I'm going to have add a web page or two for a feature I'm working on. Looking forward to possibly turning some heads....,"<div class=""md""><p>Thank you very much for all of your advice and info. It will definitely come in handy soon. I&#39;m going to have add a web page or two for a feature I&#39;m working on. Looking forward to possibly turning some heads....</p>
</div>",1610978712.0,,False,gjpy187,False,t3_ky8ts3,t1_gjo6sfg,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjpy187/,1,False,1,False,ky8ts3,lua,t5_2qjla
603,ws-ilazki,"> Looking forward to possibly turning some heads....

Good luck with that! Let me know how it goes :)","<div class=""md""><blockquote>
<p>Looking forward to possibly turning some heads....</p>
</blockquote>

<p>Good luck with that! Let me know how it goes :)</p>
</div>",1610982737.0,,False,gjq4qdm,False,t3_ky8ts3,t1_gjpy187,/r/lua/comments/ky8ts3/lua_a_misunderstood_language/gjq4qdm/,0,False,2,False,ky8ts3,lua,t5_2qjla
604,suhcoR,"Note that you can either set the JIT parameters by command line option (see http://luajit.org/running.html -Oparam=value) or from within the Lua code (see http://luajit.org/ext_jit.html jit.opt.start(""param=value"") ). Don't be put off by the fact that the documentation says it is intended for debugging LuaJIT; that's definitely an understatement.

The brave ones can also directly change the default values in lj_jit.h and recompile LuaJIT. According to my measurements the application runs about 4% faster when the parameters are set this way.","<div class=""md""><p>Note that you can either set the JIT parameters by command line option (see <a href=""http://luajit.org/running.html"">http://luajit.org/running.html</a> -Oparam=value) or from within the Lua code (see <a href=""http://luajit.org/ext_jit.html"">http://luajit.org/ext_jit.html</a> jit.opt.start(&quot;param=value&quot;) ). Don&#39;t be put off by the fact that the documentation says it is intended for debugging LuaJIT; that&#39;s definitely an understatement.</p>

<p>The brave ones can also directly change the default values in lj_jit.h and recompile LuaJIT. According to my measurements the application runs about 4% faster when the parameters are set this way.</p>
</div>",1595152316.0,,False,fyjnkjp,True,t3_htqn0t,t3_htqn0t,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fyjnkjp/,0,False,6,False,htqn0t,lua,t5_2qjla
605,padraig_oh,mike is just a beast of a programmer,"<div class=""md""><p>mike is just a beast of a programmer</p>
</div>",1595150440.0,,False,fyjlvlk,False,t3_htqn0t,t3_htqn0t,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fyjlvlk/,2,False,3,False,htqn0t,lua,t5_2qjla
606,lacethespace,"Wow, what a gem of a project! 

In readme you say ""There are many similarities between Lua and Smalltalk, even though the syntax is very different.”  I heard similar comparison between Lua and Lisp. Can you expand on what makes them similar?","<div class=""md""><p>Wow, what a gem of a project! </p>

<p>In readme you say &quot;There are many similarities between Lua and Smalltalk, even though the syntax is very different.”  I heard similar comparison between Lua and Lisp. Can you expand on what makes them similar?</p>
</div>",1595245455.0,,False,fynf1u2,False,t3_htqn0t,t3_htqn0t,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fynf1u2/,1,False,3,False,htqn0t,lua,t5_2qjla
607,,That looks super interesting. Would you mind explaining for a newcomer like me whats the difference between the LuaJIT compiler and the regular lua compiler that comes with any linux distro? Should I be using LuaJIT?,"<div class=""md""><p>That looks super interesting. Would you mind explaining for a newcomer like me whats the difference between the LuaJIT compiler and the regular lua compiler that comes with any linux distro? Should I be using LuaJIT?</p>
</div>",1595963679.0,,False,fzjjhh0,False,t3_htqn0t,t3_htqn0t,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fzjjhh0/,1,False,1,False,htqn0t,lua,t5_2qjla
608,matusaleeem,Where is our savior Mike now?,"<div class=""md""><p>Where is our savior Mike now?</p>
</div>",1595162780.0,,False,fyjy68q,False,t3_htqn0t,t1_fyjlvlk,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fyjy68q/,1,False,3,False,htqn0t,lua,t5_2qjla
609,lambda_abstraction,"""LuaJIT with the JIT enabled is much faster than all of the other languages benchmarked, including Wren, because Mike Pall is a robot from the future.""","<div class=""md""><p>&quot;LuaJIT with the JIT enabled is much faster than all of the other languages benchmarked, including Wren, because Mike Pall is a robot from the future.&quot;</p>
</div>",1595650113.0,,False,fz5z96w,False,t3_htqn0t,t1_fyjlvlk,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fz5z96w/,1,False,2,False,htqn0t,lua,t5_2qjla
610,suhcoR,"Thanks. 

> Can you expand on what makes them similar?

E.g. Lua chunks are very similar to Smalltalk blocks; both are dynamic and weakly typed; meta classes and dynamic dispatch can easily be implemented by meta tables; just to name a few. There are also differences which make it difficult to directly run a Smalltalk image in Lua; the Smalltalk image includes everything: the compiler, the scheduler, the method contexts and call stack, and a lot of methods directly depend on the implementation details of the memory model (i.e. you can directly read and write each byte of an object). If the therefore want to replace the Bluebook interpreter by the Lua VM, you must live with a subset of the Smalltalk bytecodes or modify the virtual image.","<div class=""md""><p>Thanks. </p>

<blockquote>
<p>Can you expand on what makes them similar?</p>
</blockquote>

<p>E.g. Lua chunks are very similar to Smalltalk blocks; both are dynamic and weakly typed; meta classes and dynamic dispatch can easily be implemented by meta tables; just to name a few. There are also differences which make it difficult to directly run a Smalltalk image in Lua; the Smalltalk image includes everything: the compiler, the scheduler, the method contexts and call stack, and a lot of methods directly depend on the implementation details of the memory model (i.e. you can directly read and write each byte of an object). If the therefore want to replace the Bluebook interpreter by the Lua VM, you must live with a subset of the Smalltalk bytecodes or modify the virtual image.</p>
</div>",1595247029.0,,False,fyngy84,True,t3_htqn0t,t1_fynf1u2,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fyngy84/,0,False,4,False,htqn0t,lua,t5_2qjla
611,suhcoR,"LuaJIT is an implementation of Lua 5.1; it has identical behaviour to the PUC Rio VM (see https://en.wikipedia.org/wiki/Lua_(programming_language)), but it also includes a Just-In-Time Compiler (JIT) for Lua (see https://luajit.org/luajit.html). This means that a Lua application runs on LuaJIT about 27 times faster in average than on the PUC Rio VM. If you need that much performance and can cope with the fact it doesn't support the most recent Lua language version, then you should have a look at LuaJIT.","<div class=""md""><p>LuaJIT is an implementation of Lua 5.1; it has identical behaviour to the PUC Rio VM (see <a href=""https://en.wikipedia.org/wiki/Lua_(programming_language)"">https://en.wikipedia.org/wiki/Lua_(programming_language)</a>), but it also includes a Just-In-Time Compiler (JIT) for Lua (see <a href=""https://luajit.org/luajit.html"">https://luajit.org/luajit.html</a>). This means that a Lua application runs on LuaJIT about 27 times faster in average than on the PUC Rio VM. If you need that much performance and can cope with the fact it doesn&#39;t support the most recent Lua language version, then you should have a look at LuaJIT.</p>
</div>",1595968948.0,,False,fzjuhpc,True,t3_htqn0t,t1_fzjjhh0,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fzjuhpc/,1,False,2,False,htqn0t,lua,t5_2qjla
612,suhcoR,"Here: https://github.com/LuaJIT/LuaJIT/commits/v2.1

And here: https://www.freelists.org/archive/luajit/06-2020

Just to name a few places ;-)","<div class=""md""><p>Here: <a href=""https://github.com/LuaJIT/LuaJIT/commits/v2.1"">https://github.com/LuaJIT/LuaJIT/commits/v2.1</a></p>

<p>And here: <a href=""https://www.freelists.org/archive/luajit/06-2020"">https://www.freelists.org/archive/luajit/06-2020</a></p>

<p>Just to name a few places ;-)</p>
</div>",1595164033.0,,False,fyjzsca,True,t3_htqn0t,t1_fyjy68q,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fyjzsca/,1,False,4,False,htqn0t,lua,t5_2qjla
613,padraig_oh,you should not quote something without a source. (even though the quote is rather well known among people who have heard of luajit),"<div class=""md""><p>you should not quote something without a source. (even though the quote is rather well known among people who have heard of luajit)</p>
</div>",1595709097.0,,False,fz8dsa4,False,t3_htqn0t,t1_fz5z96w,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fz8dsa4/,1,False,2,False,htqn0t,lua,t5_2qjla
614,,Thanks so much for the reply. Ill look into it a little further. Its so crazy that there is such an awesome significant community behind Lua. I actually studied in PUC-RIO for some years and I love the fact that people are behind a “project” of theirs until today.,"<div class=""md""><p>Thanks so much for the reply. Ill look into it a little further. Its so crazy that there is such an awesome significant community behind Lua. I actually studied in PUC-RIO for some years and I love the fact that people are behind a “project” of theirs until today.</p>
</div>",1595970262.0,,False,fzjx66z,False,t3_htqn0t,t1_fzjuhpc,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fzjx66z/,0,False,1,False,htqn0t,lua,t5_2qjla
615,matusaleeem,He's back!!!!!!!!!,"<div class=""md""><p>He&#39;s back!!!!!!!!!</p>
</div>",1595164614.0,,False,fyk0jz9,False,t3_htqn0t,t1_fyjzsca,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fyk0jz9/,0,False,2,False,htqn0t,lua,t5_2qjla
616,lambda_abstraction,"I would, except that there is no real name to pair with it.  I looked for a proper attribution at the source site, but none was to be found.  Thus, spare me the lecture.","<div class=""md""><p>I would, except that there is no real name to pair with it.  I looked for a proper attribution at the source site, but none was to be found.  Thus, spare me the lecture.</p>
</div>",1595712405.0,,1595712963.0,fz8n8d7,False,t3_htqn0t,t1_fz8dsa4,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fz8n8d7/,1,False,1,False,htqn0t,lua,t5_2qjla
617,padraig_oh,"took me three minutes to google the source, which is [wrens performance comparison](https://wren.io/performance.html). the context is really important when you make a statement like ""faster than all other languages benchmarked"" (luajit is comparable to c++ etc. in some contexts as well, really depends on the use case though).","<div class=""md""><p>took me three minutes to google the source, which is <a href=""https://wren.io/performance.html"">wrens performance comparison</a>. the context is really important when you make a statement like &quot;faster than all other languages benchmarked&quot; (luajit is comparable to c++ etc. in some contexts as well, really depends on the use case though).</p>
</div>",1595714350.0,,False,fz8qrzx,False,t3_htqn0t,t1_fz8n8d7,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fz8qrzx/,2,False,2,False,htqn0t,lua,t5_2qjla
618,suhcoR,"> which is wrens performance comparison.

Thanks for the link. I had a look at it and don't think it is generally interesting. The benchmark is run with LuaJIT in interpreted mode (not in JIT mode). The LuaJIT interpreter is obviously still much faster than Python or PUC Lua, but the speed-up of the JIT is yet another factor 6.7 in average.

EDIT: corrected the figure; factor 27 in average is the comparison with PUC Lua 5.1.","<div class=""md""><blockquote>
<p>which is wrens performance comparison.</p>
</blockquote>

<p>Thanks for the link. I had a look at it and don&#39;t think it is generally interesting. The benchmark is run with LuaJIT in interpreted mode (not in JIT mode). The LuaJIT interpreter is obviously still much faster than Python or PUC Lua, but the speed-up of the JIT is yet another factor 6.7 in average.</p>

<p>EDIT: corrected the figure; factor 27 in average is the comparison with PUC Lua 5.1.</p>
</div>",1595969544.0,,1595971818.0,fzjvpkz,True,t3_htqn0t,t1_fz8qrzx,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fzjvpkz/,0,False,2,False,htqn0t,lua,t5_2qjla
619,lambda_abstraction,"A proper source identifies the *author* by proper name, but in these days of dox-phobia, I can't readily determine who that is.  I always cite the *author* where one is available.   I've written enough papers with bibs to know what a proper citation is.  I can't make one here.  And beside, I made a cited the remark for merely for some humor and not scholarship.  The quotation marks show that I'm not taking credit for the line.  Please don't be *that guy;* I really do not have the patience to put up with the bull crap.","<div class=""md""><p>A proper source identifies the <em>author</em> by proper name, but in these days of dox-phobia, I can&#39;t readily determine who that is.  I always cite the <em>author</em> where one is available.   I&#39;ve written enough papers with bibs to know what a proper citation is.  I can&#39;t make one here.  And beside, I made a cited the remark for merely for some humor and not scholarship.  The quotation marks show that I&#39;m not taking credit for the line.  Please don&#39;t be <em>that guy;</em> I really do not have the patience to put up with the bull crap.</p>
</div>",1595720693.0,,1595798052.0,fz925f4,False,t3_htqn0t,t1_fz8qrzx,/r/lua/comments/htqn0t/luajit_once_again_nearly_as_fast_as_the/fz925f4/,0,False,1,False,htqn0t,lua,t5_2qjla
620,Minkzilla,TL;DR of any big changes?,"<div class=""md""><p>TL;DR of any big changes?</p>
</div>",1414172613.0,,False,clioqpd,False,t3_2k63rx,t3_2k63rx,/r/lua/comments/2k63rx/lua_530_beta_now_available/clioqpd/,1,False,2,False,2k63rx,lua,t5_2qjla
621,,[removed],"<div class=""md""><p>[removed]</p>
</div>",1414180479.0,,False,clit1pi,False,t3_2k63rx,t3_2k63rx,/r/lua/comments/2k63rx/lua_530_beta_now_available/clit1pi/,1,False,-4,False,2k63rx,lua,t5_2qjla
622,SimonJ57,">The main change in Lua 5.3.0 is the introduction of integers.
___
>Another change, new in beta, is the introduction of string.pack and
string.unpack, which replace and extend string.dump* and string.undump*.","<div class=""md""><blockquote>
<p>The main change in Lua 5.3.0 is the introduction of integers.</p>

<hr/>

<p>Another change, new in beta, is the introduction of string.pack and
string.unpack, which replace and extend string.dump* and string.undump*.</p>
</blockquote>
</div>",1414175269.0,,False,cliq7cq,False,t3_2k63rx,t1_clioqpd,/r/lua/comments/2k63rx/lua_530_beta_now_available/cliq7cq/,2,False,4,False,2k63rx,lua,t5_2qjla
623,,[removed],"<div class=""md""><p>[removed]</p>
</div>",1414187283.0,,False,cliwguc,False,t3_2k63rx,t1_clit1pi,/r/lua/comments/2k63rx/lua_530_beta_now_available/cliwguc/,1,False,4,False,2k63rx,lua,t5_2qjla
624,EricTboneJackson,"The bitwise operators are worth mentioning, too. Lua 5.2 had a bit manipulation *library*, but doing bit operations via function calls is very unwieldy. Integers, bitwise operators, and pack/unpack go together to give Lua a level of binary data manipulation facility it's always lacked. Very welcome changes.","<div class=""md""><p>The bitwise operators are worth mentioning, too. Lua 5.2 had a bit manipulation <em>library</em>, but doing bit operations via function calls is very unwieldy. Integers, bitwise operators, and pack/unpack go together to give Lua a level of binary data manipulation facility it&#39;s always lacked. Very welcome changes.</p>
</div>",1414717556.0,,False,clor0dz,False,t3_2k63rx,t1_cliq7cq,/r/lua/comments/2k63rx/lua_530_beta_now_available/clor0dz/,0,False,3,False,2k63rx,lua,t5_2qjla
625,davethecomposer,I seem to be having troubles with `loadstring` but haven't been able to figure what has changed about it in 5.3 (so far it seems to be the only thing preventing my code from running in 5.3). Is it no longer available?,"<div class=""md""><p>I seem to be having troubles with <code>loadstring</code> but haven&#39;t been able to figure what has changed about it in 5.3 (so far it seems to be the only thing preventing my code from running in 5.3). Is it no longer available?</p>
</div>",1414178782.0,,False,clis4fq,False,t3_2k63rx,t1_cliq7cq,/r/lua/comments/2k63rx/lua_530_beta_now_available/clis4fq/,2,False,1,False,2k63rx,lua,t5_2qjla
626,,[removed],"<div class=""md""><p>[removed]</p>
</div>",1414254909.0,,False,cljgbca,False,t3_2k63rx,t1_cliwguc,/r/lua/comments/2k63rx/lua_530_beta_now_available/cljgbca/,1,False,0,False,2k63rx,lua,t5_2qjla
627,SimonJ57,"I'm unable to wrap my head around basic Lua syntax, I don't feel at all qualified to answer that.

I think the best thing to do is message the Lua devs and ask them directly.

But there is http://www.lua.org/work/doc/#changes that should tell you of any changes. But I can't see anything about loadstring myself.

Edit: Try Here: http://www.lua.org/work/diffs-lua-5.3.0-alpha-beta.txt","<div class=""md""><p>I&#39;m unable to wrap my head around basic Lua syntax, I don&#39;t feel at all qualified to answer that.</p>

<p>I think the best thing to do is message the Lua devs and ask them directly.</p>

<p>But there is <a href=""http://www.lua.org/work/doc/#changes"">http://www.lua.org/work/doc/#changes</a> that should tell you of any changes. But I can&#39;t see anything about loadstring myself.</p>

<p>Edit: Try Here: <a href=""http://www.lua.org/work/diffs-lua-5.3.0-alpha-beta.txt"">http://www.lua.org/work/diffs-lua-5.3.0-alpha-beta.txt</a></p>
</div>",1414186018.0,,False,clivvjq,False,t3_2k63rx,t1_clis4fq,/r/lua/comments/2k63rx/lua_530_beta_now_available/clivvjq/,0,False,1,False,2k63rx,lua,t5_2qjla
628,AdvertSlaxxor,"How are you using `loadstring` (Show us some code!)? What error message do you get?

Try using `load`:


    -- local loadedFunc = loadstring(""print('Hello, world!')"")
    local loadedFunc = load(""print('Hello, world!')"")
    
    loadedFunc()

> Hello, world!

[Changes from 5.1 to 5.2](http://www.lua.org/manual/5.2/manual.html#8.1):

- Function loadstring is deprecated. Use load instead; it now accepts string arguments and are exactly equivalent to loadstring.

There's no mention of `loadstring` in the [5.3 beta short documentation](http://www.lua.org/work/doc/), but seeing as it was depreciated in 5.2, it's safe to assume it has been removed.","<div class=""md""><p>How are you using <code>loadstring</code> (Show us some code!)? What error message do you get?</p>

<p>Try using <code>load</code>:</p>

<pre><code>-- local loadedFunc = loadstring(&quot;print(&#39;Hello, world!&#39;)&quot;)
local loadedFunc = load(&quot;print(&#39;Hello, world!&#39;)&quot;)

loadedFunc()
</code></pre>

<blockquote>
<p>Hello, world!</p>
</blockquote>

<p><a href=""http://www.lua.org/manual/5.2/manual.html#8.1"">Changes from 5.1 to 5.2</a>:</p>

<ul>
<li>Function loadstring is deprecated. Use load instead; it now accepts string arguments and are exactly equivalent to loadstring.</li>
</ul>

<p>There&#39;s no mention of <code>loadstring</code> in the <a href=""http://www.lua.org/work/doc/"">5.3 beta short documentation</a>, but seeing as it was depreciated in 5.2, it&#39;s safe to assume it has been removed.</p>
</div>",1414188228.0,,False,cliwwkg,False,t3_2k63rx,t1_clis4fq,/r/lua/comments/2k63rx/lua_530_beta_now_available/cliwwkg/,1,False,1,False,2k63rx,lua,t5_2qjla
629,,[removed],"<div class=""md""><p>[removed]</p>
</div>",1414257107.0,,False,cljh8x8,False,t3_2k63rx,t1_cljgbca,/r/lua/comments/2k63rx/lua_530_beta_now_available/cljh8x8/,1,False,1,False,2k63rx,lua,t5_2qjla
630,davethecomposer,"Sorry for the delay in the response, partly I didn't want to hijack the thread.

I did figure out the issue. `loadstring` has been removed but `load` works as a drop-in replacement (as best as I can tell so far). The problem I was having is that some of my tables use keys in the form of `[""0""]`, `[""1""]`, etc (for reasons that made a lot of sense when I first set them up, I'm hoping). But the numbers being used to call those keys are being represented as integers by Lua (""1.0"") which when converted to strings (via `tostring`) now are unable to look up the values. I did a quick test removing the quotes and one `tostring` command and the change seemed to work but I would have to change like 5 more tables to know for sure.

The upshot is that I'm not ready to switch all the way yet but at least I now what what the problem is (pretty sure that's the only problem). I'm thinking that I can get rid of the `tostring` command and switch out the tables and it will work in Lua 5.2 and then it's just a simple matter of changing `load` for `loadstring` for 5.3, but I will have a lot of testing to do first. Ugh. (I wonder why I thought I had to do it as [""0""] in the first place ...)","<div class=""md""><p>Sorry for the delay in the response, partly I didn&#39;t want to hijack the thread.</p>

<p>I did figure out the issue. <code>loadstring</code> has been removed but <code>load</code> works as a drop-in replacement (as best as I can tell so far). The problem I was having is that some of my tables use keys in the form of <code>[&quot;0&quot;]</code>, <code>[&quot;1&quot;]</code>, etc (for reasons that made a lot of sense when I first set them up, I&#39;m hoping). But the numbers being used to call those keys are being represented as integers by Lua (&quot;1.0&quot;) which when converted to strings (via <code>tostring</code>) now are unable to look up the values. I did a quick test removing the quotes and one <code>tostring</code> command and the change seemed to work but I would have to change like 5 more tables to know for sure.</p>

<p>The upshot is that I&#39;m not ready to switch all the way yet but at least I now what what the problem is (pretty sure that&#39;s the only problem). I&#39;m thinking that I can get rid of the <code>tostring</code> command and switch out the tables and it will work in Lua 5.2 and then it&#39;s just a simple matter of changing <code>load</code> for <code>loadstring</code> for 5.3, but I will have a lot of testing to do first. Ugh. (I wonder why I thought I had to do it as [&quot;0&quot;] in the first place ...)</p>
</div>",1414454798.0,,False,cllnh48,False,t3_2k63rx,t1_cliwwkg,/r/lua/comments/2k63rx/lua_530_beta_now_available/cllnh48/,1,False,1,False,2k63rx,lua,t5_2qjla
631,,[removed],"<div class=""md""><p>[removed]</p>
</div>",1414272859.0,,False,cljnw4u,False,t3_2k63rx,t1_cljh8x8,/r/lua/comments/2k63rx/lua_530_beta_now_available/cljnw4u/,1,False,-1,False,2k63rx,lua,t5_2qjla
632,AdvertSlaxxor,"I wouldn't say that you were hijacking this thread, since the int/float thing is new :)

If you don't like posting here, you could always create your own thread, too.

I think you've confused integers and floats in your post, but `1.0` should be a float, and `1` should be an integer.

Anyway, here's what I've found when looking at your problem:


Take a look at page 26 of this: http://www.lua.org/wshop14/Ierusalimschy.pdf

> Other Aspects

> Nuerals: decimal point or exponent makes a float; otherwise number is integer

> - `0.0 1e1 0xFFF.0`

> - `0 234 0xFFF`

> `print` distinguishes between floats and integers (!)

> Table keys: float keys with integer values are converted to integers

> - `a[1.0] = 0; print(next(a))  --> 1    0`

I *think* your problem is something along these lines:

    local tbl = {
     [""0""] = ""value"",
     [""1""] = ""value"",
     ...
    }
    
    local number = 1.0 -- This is a float
    local key = tostring(number) -- ""1.0""

I haven't played around with 5.3 yet, but I think this should fix your issue:

    local number = 1.0 -- Still a float.
    local key = tostring(math.floor(number)) -- This should be ""1"", but large values that can't be represented as an int will still be floating.

If you remove the quotes from the values in your table (as you tried), you shouldn't need to convert a float at all, as long as it has an integer representation.

Hope that helped :)","<div class=""md""><p>I wouldn&#39;t say that you were hijacking this thread, since the int/float thing is new :)</p>

<p>If you don&#39;t like posting here, you could always create your own thread, too.</p>

<p>I think you&#39;ve confused integers and floats in your post, but <code>1.0</code> should be a float, and <code>1</code> should be an integer.</p>

<p>Anyway, here&#39;s what I&#39;ve found when looking at your problem:</p>

<p>Take a look at page 26 of this: <a href=""http://www.lua.org/wshop14/Ierusalimschy.pdf"">http://www.lua.org/wshop14/Ierusalimschy.pdf</a></p>

<blockquote>
<p>Other Aspects</p>

<p>Nuerals: decimal point or exponent makes a float; otherwise number is integer</p>

<ul>
<li><p><code>0.0 1e1 0xFFF.0</code></p></li>
<li><p><code>0 234 0xFFF</code></p></li>
</ul>

<p><code>print</code> distinguishes between floats and integers (!)</p>

<p>Table keys: float keys with integer values are converted to integers</p>

<ul>
<li><code>a[1.0] = 0; print(next(a))  --&gt; 1    0</code></li>
</ul>
</blockquote>

<p>I <em>think</em> your problem is something along these lines:</p>

<pre><code>local tbl = {
 [&quot;0&quot;] = &quot;value&quot;,
 [&quot;1&quot;] = &quot;value&quot;,
 ...
}

local number = 1.0 -- This is a float
local key = tostring(number) -- &quot;1.0&quot;
</code></pre>

<p>I haven&#39;t played around with 5.3 yet, but I think this should fix your issue:</p>

<pre><code>local number = 1.0 -- Still a float.
local key = tostring(math.floor(number)) -- This should be &quot;1&quot;, but large values that can&#39;t be represented as an int will still be floating.
</code></pre>

<p>If you remove the quotes from the values in your table (as you tried), you shouldn&#39;t need to convert a float at all, as long as it has an integer representation.</p>

<p>Hope that helped :)</p>
</div>",1414457889.0,,False,cllp5t7,False,t3_2k63rx,t1_cllnh48,/r/lua/comments/2k63rx/lua_530_beta_now_available/cllp5t7/,1,False,1,False,2k63rx,lua,t5_2qjla
633,,[removed],"<div class=""md""><p>[removed]</p>
</div>",1414276254.0,,False,cljpb3m,False,t3_2k63rx,t1_cljnw4u,/r/lua/comments/2k63rx/lua_530_beta_now_available/cljpb3m/,1,False,1,False,2k63rx,lua,t5_2qjla
634,davethecomposer,"> I think you've confused integers and floats in your post, but 1.0 should be a float, and 1 should be an integer.

I took my chances ...

> I haven't played around with 5.3 yet, but I think this should fix your issue:

That does look like it will work. I think I'm probably better off just changing the tables. This is my first ever program and I'm sure there are things I did early on I did just because I didn't know any better. It's funny, there's a table just underneath that group of tables that I created a few weeks ago and it uses the `[0] = ""foo"" ; [1] = ""bar""` approach so somewhere in this journey I figured something out but didn't remember that I had done things differently before.

> Hope that helped :)

Definitely, I still learn something significant every day.","<div class=""md""><blockquote>
<p>I think you&#39;ve confused integers and floats in your post, but 1.0 should be a float, and 1 should be an integer.</p>
</blockquote>

<p>I took my chances ...</p>

<blockquote>
<p>I haven&#39;t played around with 5.3 yet, but I think this should fix your issue:</p>
</blockquote>

<p>That does look like it will work. I think I&#39;m probably better off just changing the tables. This is my first ever program and I&#39;m sure there are things I did early on I did just because I didn&#39;t know any better. It&#39;s funny, there&#39;s a table just underneath that group of tables that I created a few weeks ago and it uses the <code>[0] = &quot;foo&quot; ; [1] = &quot;bar&quot;</code> approach so somewhere in this journey I figured something out but didn&#39;t remember that I had done things differently before.</p>

<blockquote>
<p>Hope that helped :)</p>
</blockquote>

<p>Definitely, I still learn something significant every day.</p>
</div>",1414506378.0,,False,clm5146,False,t3_2k63rx,t1_cllp5t7,/r/lua/comments/2k63rx/lua_530_beta_now_available/clm5146/,0,False,1,False,2k63rx,lua,t5_2qjla
635,,[removed],"<div class=""md""><p>[removed]</p>
</div>",1414277309.0,,False,cljpqyp,False,t3_2k63rx,t1_cljpb3m,/r/lua/comments/2k63rx/lua_530_beta_now_available/cljpqyp/,0,False,-1,False,2k63rx,lua,t5_2qjla
636,joshir,"Congratulations!!, Performance is fantastic!!","<div class=""md""><p>Congratulations!!, Performance is fantastic!!</p>
</div>",1352829793.0,,False,c70s702,False,t3_1334lt,t3_1334lt,/r/lua/comments/1334lt/luajit_20_released/c70s702/,0,False,2,False,1334lt,lua,t5_2qjla
637,8E4F787A43D3807E9EA2,From the name I first thought it was going to be a moonscript JIT compiler.,"<div class=""md""><p>From the name I first thought it was going to be a moonscript JIT compiler.</p>
</div>",1579044186.0,,False,feeys3p,False,t3_eor8mf,t3_eor8mf,/r/lua/comments/eor8mf/moonjit_220_release_luajit_fork/feeys3p/,1,False,3,False,eor8mf,lua,t5_2qjla
638,dddbbb,"Looks like MoonJIT is focused on adding support for newer versions of Lua (5.2).

There's also [luavela](https://github.com/iponweb/luavela) which is focused on [64 bit and some perf improvements](https://eliasdaler.github.io/luavela/) but [not newer Lua](https://github.com/iponweb/luavela/issues/11) (and not Windows). And there's [raptorjit](https://github.com/raptorjit/raptorjit) which is also focused on performance (and not Windows).","<div class=""md""><p>Looks like MoonJIT is focused on adding support for newer versions of Lua (5.2).</p>

<p>There&#39;s also <a href=""https://github.com/iponweb/luavela"">luavela</a> which is focused on <a href=""https://eliasdaler.github.io/luavela/"">64 bit and some perf improvements</a> but <a href=""https://github.com/iponweb/luavela/issues/11"">not newer Lua</a> (and not Windows). And there&#39;s <a href=""https://github.com/raptorjit/raptorjit"">raptorjit</a> which is also focused on performance (and not Windows).</p>
</div>",1579070281.0,,False,fefz7j7,False,t3_eor8mf,t3_eor8mf,/r/lua/comments/eor8mf/moonjit_220_release_luajit_fork/fefz7j7/,1,False,5,False,eor8mf,lua,t5_2qjla
639,BadBoy6767,There isn't really a reason to make such a thing.,"<div class=""md""><p>There isn&#39;t really a reason to make such a thing.</p>
</div>",1579044907.0,,False,feezw0c,False,t3_eor8mf,t1_feeys3p,/r/lua/comments/eor8mf/moonjit_220_release_luajit_fork/feezw0c/,0,False,2,False,eor8mf,lua,t5_2qjla
640,DarkWiiPlayer,"I assume that it just inherits the 5.2 compatibility features from LuaJIT, not that it actually tries to be compatible with Lua 5.2; there's a few features in 5.2 that would break 5.1, like the `_ENV` variable replacing the old `setgenv()` and `getfenv()` mechanism.

(EDIT: That being said, I sure would love to see a fork of LuaJIT that implements 5.2 instead of 5.1)","<div class=""md""><p>I assume that it just inherits the 5.2 compatibility features from LuaJIT, not that it actually tries to be compatible with Lua 5.2; there&#39;s a few features in 5.2 that would break 5.1, like the <code>_ENV</code> variable replacing the old <code>setgenv()</code> and <code>getfenv()</code> mechanism.</p>

<p>(EDIT: That being said, I sure would love to see a fork of LuaJIT that implements 5.2 instead of 5.1)</p>
</div>",1579082075.0,,False,feg8hem,False,t3_eor8mf,t1_fefz7j7,/r/lua/comments/eor8mf/moonjit_220_release_luajit_fork/feg8hem/,1,False,3,False,eor8mf,lua,t5_2qjla
641,dddbbb,"Looks like they're adding new 5.2 support to me:

> The following Lua 5.2 functions and behaviours are now implemented in moonjit.
> 
> * lua_len
> * lua_rawlen
> * lua_absindex
> * lua_pushglobal
> * luaL_len
> * luaL_getsubtable
> * luaL_pushresultsize
> * luaL_tolstring
> * String matching patterns may contain \0 as a regular character.

From the readme:

> the backward compatible elements are built in by default whereas features that break compatibility have to be enabled using the `-DLUAJIT_ENABLE_LUA52COMPAT` flag

(That flag existed in LuaJIT, but it seems they're expanding what it does.)","<div class=""md""><p>Looks like they&#39;re adding new 5.2 support to me:</p>

<blockquote>
<p>The following Lua 5.2 functions and behaviours are now implemented in moonjit.</p>

<ul>
<li>lua_len</li>
<li>lua_rawlen</li>
<li>lua_absindex</li>
<li>lua_pushglobal</li>
<li>luaL_len</li>
<li>luaL_getsubtable</li>
<li>luaL_pushresultsize</li>
<li>luaL_tolstring</li>
<li>String matching patterns may contain \0 as a regular character.</li>
</ul>
</blockquote>

<p>From the readme:</p>

<blockquote>
<p>the backward compatible elements are built in by default whereas features that break compatibility have to be enabled using the <code>-DLUAJIT_ENABLE_LUA52COMPAT</code> flag</p>
</blockquote>

<p>(That flag existed in LuaJIT, but it seems they&#39;re expanding what it does.)</p>
</div>",1579210150.0,,False,fekycut,False,t3_eor8mf,t1_feg8hem,/r/lua/comments/eor8mf/moonjit_220_release_luajit_fork/fekycut/,1,False,1,False,eor8mf,lua,t5_2qjla
642,DarkWiiPlayer,"That's very nice to see, but it still doesn't mean there will be any additions from 5.2 that break 5.1 compatibility, like `_ENV`; you can't possibly have 5.1 and 5.2 compatibility at the same time.

What *would* be really cool, is have an extra flag to switch between 5.2 and 5.1 at compile-time, but I suspect that'd be a huge leap in complexity","<div class=""md""><p>That&#39;s very nice to see, but it still doesn&#39;t mean there will be any additions from 5.2 that break 5.1 compatibility, like <code>_ENV</code>; you can&#39;t possibly have 5.1 and 5.2 compatibility at the same time.</p>

<p>What <em>would</em> be really cool, is have an extra flag to switch between 5.2 and 5.1 at compile-time, but I suspect that&#39;d be a huge leap in complexity</p>
</div>",1579245660.0,,False,fema89l,False,t3_eor8mf,t1_fekycut,/r/lua/comments/eor8mf/moonjit_220_release_luajit_fork/fema89l/,0,False,1,False,eor8mf,lua,t5_2qjla
643,,"Yea this one is ok, considering this subreddit is relatively small","<div class=""md""><p>Yea this one is ok, considering this subreddit is relatively small</p>
</div>",1476536111.0,,False,d8t03gf,False,t3_57lg91,t3_57lg91,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8t03gf/,0,False,3,False,57lg91,lua,t5_2qjla
644,ftoys,"Tables, mon.","<div class=""md""><p>Tables, mon.</p>
</div>",1476536764.0,,False,d8t0cpk,False,t3_57lg91,t3_57lg91,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8t0cpk/,0,False,2,False,57lg91,lua,t5_2qjla
645,errantsignal,"Well, I laughed, so I guess that's worth an upvote.","<div class=""md""><p>Well, I laughed, so I guess that&#39;s worth an upvote.</p>
</div>",1476530944.0,,False,d8sydb5,False,t3_57lg91,t3_57lg91,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8sydb5/,0,False,1,False,57lg91,lua,t5_2qjla
646,marcotrosi,up vote for u sir. took me at least 3 seconds to get the connection. Damn pictures.,"<div class=""md""><p>up vote for u sir. took me at least 3 seconds to get the connection. Damn pictures.</p>
</div>",1476536382.0,,False,d8t076z,False,t3_57lg91,t3_57lg91,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8t076z/,1,False,1,False,57lg91,lua,t5_2qjla
647,Yidyokud,"heh ""weird countries"" says the ad from USA lol... ok.


Anyways, got carried away, carry on dudes.","<div class=""md""><p>heh &quot;weird countries&quot; says the ad from USA lol... ok.</p>

<p>Anyways, got carried away, carry on dudes.</p>
</div>",1476543696.0,,False,d8t3qqp,False,t3_57lg91,t3_57lg91,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8t3qqp/,1,False,1,False,57lg91,lua,t5_2qjla
648,edalcol,Hahahahaha this cracked me up! thanks xD,"<div class=""md""><p>Hahahahaha this cracked me up! thanks xD</p>
</div>",1476800997.0,,False,d8x8cqe,False,t3_57lg91,t3_57lg91,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8x8cqe/,0,False,1,False,57lg91,lua,t5_2qjla
649,ragingrabbit69,Yep it had tables but also made me vomit a little in my mouth. You should warn people before exposing them to such puke inducing material :D,"<div class=""md""><p>Yep it had tables but also made me vomit a little in my mouth. You should warn people before exposing them to such puke inducing material :D</p>
</div>",1476559936.0,,False,d8te5qm,False,t3_57lg91,t3_57lg91,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8te5qm/,0,False,0,False,57lg91,lua,t5_2qjla
650,smog_alado,I still don't get it.,"<div class=""md""><p>I still don&#39;t get it.</p>
</div>",1476556240.0,,False,d8tbsmz,False,t3_57lg91,t1_d8t076z,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8tbsmz/,1,False,1,False,57lg91,lua,t5_2qjla
651,pfp-disciple,"I noticed that, and I'm from the USA. I grits guess ""weird"" is relative.","<div class=""md""><p>I noticed that, and I&#39;m from the USA. I grits guess &quot;weird&quot; is relative.</p>
</div>",1476566445.0,,False,d8tijlm,False,t3_57lg91,t1_d8t3qqp,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8tijlm/,0,False,1,False,57lg91,lua,t5_2qjla
652,pfp-disciple,Video is all about tables (physical). The table  (virtual) is used extensively in Lua.,"<div class=""md""><p>Video is all about tables (physical). The table  (virtual) is used extensively in Lua.</p>
</div>",1476566388.0,,False,d8tii6x,False,t3_57lg91,t1_d8tbsmz,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8tii6x/,1,False,2,False,57lg91,lua,t5_2qjla
653,smog_alado,"Ah, that makes sense. I think I didn't get it at first because the pun doesn't work in Portuguese.","<div class=""md""><p>Ah, that makes sense. I think I didn&#39;t get it at first because the pun doesn&#39;t work in Portuguese.</p>
</div>",1476568017.0,,False,d8tjl6n,False,t3_57lg91,t1_d8tii6x,/r/lua/comments/57lg91/have_you_guys_seen_the_new_lua_commercial/d8tjl6n/,0,False,2,False,57lg91,lua,t5_2qjla
654,gul666,Thanks for the heads up.,"<div class=""md""><p>Thanks for the heads up.</p>
</div>",1386559923.0,,False,cdx4q1h,False,t3_1sditb,t3_1sditb,/r/lua/comments/1sditb/ann_lua_523_now_available/cdx4q1h/,0,False,1,False,1sditb,lua,t5_2qjla
655,,"Why is 5.2.3 avail on this site (which was avail since 2013-11-11) but ""*LuaBinaries 5.2.1 - Release 1*"" is the latest on the main site?","<div class=""md""><p>Why is 5.2.3 avail on this site (which was avail since 2013-11-11) but &quot;<em>LuaBinaries 5.2.1 - Release 1</em>&quot; is the latest on the main site?</p>
</div>",1387392202.0,,False,ce4uxa0,False,t3_1sditb,t3_1sditb,/r/lua/comments/1sditb/ann_lua_523_now_available/ce4uxa0/,1,False,1,False,1sditb,lua,t5_2qjla
656,fkaginstrom,The source available from [lua.org](http://lua.org/) is at version 5.2.3. The compiled binaries are a bit behind. ,"<div class=""md""><p>The source available from <a href=""http://lua.org/"">lua.org</a> is at version 5.2.3. The compiled binaries are a bit behind. </p>
</div>",1387425712.0,,False,ce5a30f,True,t3_1sditb,t1_ce4uxa0,/r/lua/comments/1sditb/ann_lua_523_now_available/ce5a30f/,0,False,1,False,1sditb,lua,t5_2qjla
657,whoopdedo,May the ~~force~~ metatables be with you.,"<div class=""md""><p>May the <del>force</del> metatables be with you.</p>
</div>",1615527336.0,,False,gqntvsv,False,t3_m3a2x3,t3_m3a2x3,/r/lua/comments/m3a2x3/from_rprequelmemes/gqntvsv/,0,False,8,False,m3a2x3,lua,t5_2qjla
658,Unhappy-Thanks-7565,40% of Lua and 60% of C++,"<div class=""md""><p>40% of Lua and 60% of C++</p>
</div>",1615529120.0,,False,gqnwbr6,False,t3_m3a2x3,t3_m3a2x3,/r/lua/comments/m3a2x3/from_rprequelmemes/gqnwbr6/,1,False,6,False,m3a2x3,lua,t5_2qjla
659,MetaEatsTinyAnts,e p i c,"<div class=""md""><p>e p i c</p>
</div>",1615529028.0,,False,gqnw7gc,False,t3_m3a2x3,t3_m3a2x3,/r/lua/comments/m3a2x3/from_rprequelmemes/gqnw7gc/,0,False,2,False,m3a2x3,lua,t5_2qjla
660,GPhykos,Cool,"<div class=""md""><p>Cool</p>
</div>",1615532425.0,,False,gqo0i08,False,t3_m3a2x3,t3_m3a2x3,/r/lua/comments/m3a2x3/from_rprequelmemes/gqo0i08/,0,False,1,False,m3a2x3,lua,t5_2qjla
661,TheWeekProgram,I’m dying from this joke and I don’t know why,"<div class=""md""><p>I’m dying from this joke and I don’t know why</p>
</div>",1615550068.0,,False,gqoj5gs,False,t3_m3a2x3,t3_m3a2x3,/r/lua/comments/m3a2x3/from_rprequelmemes/gqoj5gs/,0,False,1,False,m3a2x3,lua,t5_2qjla
662,,The reddit upvote system is running on lua.,"<div class=""md""><p>The reddit upvote system is running on lua.</p>
</div>",1617124823.0,,False,gstktcj,False,t3_m3a2x3,t3_m3a2x3,/r/lua/comments/m3a2x3/from_rprequelmemes/gstktcj/,1,False,1,False,m3a2x3,lua,t5_2qjla
663,SiebeYolo,That’s hilarious,"<div class=""md""><p>That’s hilarious</p>
</div>",1617484360.0,,False,gta8agc,False,t3_m3a2x3,t3_m3a2x3,/r/lua/comments/m3a2x3/from_rprequelmemes/gta8agc/,0,False,1,False,m3a2x3,lua,t5_2qjla
664,EdwardPavkki,"The sequels (7-9, made by Disney) are 100% Python, because they are shit

*This joke was made by JavaScript gang*

(/S,)","<div class=""md""><p>The sequels (7-9, made by Disney) are 100% Python, because they are shit</p>

<p><em>This joke was made by JavaScript gang</em></p>

<p>(/S,)</p>
</div>",1615534093.0,,False,gqo2hkq,True,t3_m3a2x3,t1_gqnwbr6,/r/lua/comments/m3a2x3/from_rprequelmemes/gqo2hkq/,2,False,6,False,m3a2x3,lua,t5_2qjla
665,EdwardPavkki,What if I told you the senate was run by a Darth lord of the Sith,"<div class=""md""><p>What if I told you the senate was run by a Darth lord of the Sith</p>
</div>",1617131039.0,,False,gstynhm,True,t3_m3a2x3,t1_gstktcj,/r/lua/comments/m3a2x3/from_rprequelmemes/gstynhm/,0,False,1,False,m3a2x3,lua,t5_2qjla
666,oderjunks,"imagine using untyped frameworkless js

this joke was made by the tsx gang","<div class=""md""><p>imagine using untyped frameworkless js</p>

<p>this joke was made by the tsx gang</p>
</div>",1615541715.0,,False,gqoai47,False,t3_m3a2x3,t1_gqo2hkq,/r/lua/comments/m3a2x3/from_rprequelmemes/gqoai47/,0,False,1,False,m3a2x3,lua,t5_2qjla
667,,">shit
>j*vascript

Checks out","<div class=""md""><blockquote>
<p>shit
j*vascript</p>
</blockquote>

<p>Checks out</p>
</div>",1615619998.0,,False,gqs28v9,False,t3_m3a2x3,t1_gqo2hkq,/r/lua/comments/m3a2x3/from_rprequelmemes/gqs28v9/,1,False,1,False,m3a2x3,lua,t5_2qjla
668,EdwardPavkki,"*Angry variable declaring noises*

*Cranking up RegExp*

*Shit it returned true*

*Wait why did I but brackets around it?*

*There we go*

I never said that in that order *console.log(function() {
string = "":(""
for (i = 0; i < 200000) {
string += ""(""
}
return string
})*","<div class=""md""><p><em>Angry variable declaring noises</em></p>

<p><em>Cranking up RegExp</em></p>

<p><em>Shit it returned true</em></p>

<p><em>Wait why did I but brackets around it?</em></p>

<p><em>There we go</em></p>

<p>I never said that in that order <em>console.log(function() {
string = &quot;:(&quot;
for (i = 0; i &lt; 200000) {
string += &quot;(&quot;
}
return string
})</em></p>
</div>",1615620232.0,,False,gqs2hv6,True,t3_m3a2x3,t1_gqs28v9,/r/lua/comments/m3a2x3/from_rprequelmemes/gqs2hv6/,1,False,1,False,m3a2x3,lua,t5_2qjla
669,,"this. 
😂😂😂","<div class=""md""><p>this. 
😂😂😂</p>
</div>",1615620310.0,,False,gqs2kxz,False,t3_m3a2x3,t1_gqs2hv6,/r/lua/comments/m3a2x3/from_rprequelmemes/gqs2kxz/,0,False,1,False,m3a2x3,lua,t5_2qjla
670,Zireael07,No link?,"<div class=""md""><p>No link?</p>
</div>",1596287464.0,,False,fzzbdgq,False,t3_i1rymg,t3_i1rymg,/r/lua/comments/i1rymg/a_logo_drawing_with_my_drawing_library_source/fzzbdgq/,1,False,3,False,i1rymg,lua,t5_2qjla
671,__arthure,Source code : [https://github.com/arthurealike/turtle.lua](https://github.com/arthurealike/turtle.lua),"<div class=""md""><p>Source code : <a href=""https://github.com/arthurealike/turtle.lua"">https://github.com/arthurealike/turtle.lua</a></p>
</div>",1596288052.0,,False,fzzc632,True,t3_i1rymg,t3_i1rymg,/r/lua/comments/i1rymg/a_logo_drawing_with_my_drawing_library_source/fzzc632/,0,False,3,False,i1rymg,lua,t5_2qjla
672,BotOfWar,Opa opa adidas lets go drink some kvas,"<div class=""md""><p>Opa opa adidas lets go drink some kvas</p>
</div>",1596299375.0,,False,fzzwvcv,False,t3_i1rymg,t3_i1rymg,/r/lua/comments/i1rymg/a_logo_drawing_with_my_drawing_library_source/fzzwvcv/,0,False,1,False,i1rymg,lua,t5_2qjla
673,__arthure,"Thanks for warning, check again!","<div class=""md""><p>Thanks for warning, check again!</p>
</div>",1596288083.0,,False,fzzc7n1,True,t3_i1rymg,t1_fzzbdgq,/r/lua/comments/i1rymg/a_logo_drawing_with_my_drawing_library_source/fzzc7n1/,0,False,1,False,i1rymg,lua,t5_2qjla
674,Saldor010,I'll give an upvote since I thought it was legit for a few seconds :P,"<div class=""md""><p>I&#39;ll give an upvote since I thought it was legit for a few seconds :P</p>
</div>",1522604797.0,,False,dwmwmrz,False,t3_88sgte,t3_88sgte,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwmwmrz/,1,False,24,False,88sgte,lua,t5_2qjla
675,progfix,They also add 'continue' and nested comment blocks! ^Haha^^no,"<div class=""md""><p>They also add &#39;continue&#39; and nested comment blocks! <sup>Haha<sup><sup>no</sup></sup></sup></p>
</div>",1522604678.0,,False,dwmwir9,False,t3_88sgte,t3_88sgte,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwmwir9/,2,False,12,False,88sgte,lua,t5_2qjla
676,casd82,lol u got me,"<div class=""md""><p>lol u got me</p>
</div>",1522635930.0,,False,dwnniq1,False,t3_88sgte,t3_88sgte,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwnniq1/,0,False,2,False,88sgte,lua,t5_2qjla
677,zeValkyrie,"Me too...

Although now that I think about it that's the mother of all ways to break backwards compatibility. Maybe build some automated migration scripts and try to adjust the index of tables everywhere? Fun fun... And what if I (for whatever terrible) reason *already* use arrays with keys of int 0? That is, although not advisable, completely possible. Should we just make those -1? Fuck whoever has to maintain that code :) This is gonna be super fun.","<div class=""md""><p>Me too...</p>

<p>Although now that I think about it that&#39;s the mother of all ways to break backwards compatibility. Maybe build some automated migration scripts and try to adjust the index of tables everywhere? Fun fun... And what if I (for whatever terrible) reason <em>already</em> use arrays with keys of int 0? That is, although not advisable, completely possible. Should we just make those -1? Fuck whoever has to maintain that code :) This is gonna be super fun.</p>
</div>",1522634897.0,,False,dwnmnkb,False,t3_88sgte,t1_dwmwmrz,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwnmnkb/,1,False,6,False,88sgte,lua,t5_2qjla
678,fuxoft,"Lua already has nested comments, using --[[, --[=[, --[==[ etc...","<div class=""md""><p>Lua already has nested comments, using --[[, --[=[, --[==[ etc...</p>
</div>",1522609115.0,,False,dwn0l40,False,t3_88sgte,t1_dwmwir9,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwn0l40/,2,False,6,False,88sgte,lua,t5_2qjla
679,DeathProgramming,`continue` can actually be easily implemented using `repeat until true`. I'd post an example but I'm on my phone and lazy,"<div class=""md""><p><code>continue</code> can actually be easily implemented using <code>repeat until true</code>. I&#39;d post an example but I&#39;m on my phone and lazy</p>
</div>",1522604775.0,,False,dwmwm0h,True,t3_88sgte,t1_dwmwir9,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwmwm0h/,2,False,2,False,88sgte,lua,t5_2qjla
680,Saldor010,"Which is why no one in their right mind would make such a huge change to such a widely used language. Though to be fair, it does sound like a fun challenge to create a migration script like that.","<div class=""md""><p>Which is why no one in their right mind would make such a huge change to such a widely used language. Though to be fair, it does sound like a fun challenge to create a migration script like that.</p>
</div>",1522635303.0,,False,dwnmznx,False,t3_88sgte,t1_dwnmnkb,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwnmznx/,1,False,4,False,88sgte,lua,t5_2qjla
681,coverslide,You can also use --[==[====> to banish Ganon and save Hyrule,"<div class=""md""><p>You can also use --[==[====&gt; to banish Ganon and save Hyrule</p>
</div>",1522630682.0,,False,dwnj610,False,t3_88sgte,t1_dwn0l40,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwnj610/,0,False,31,False,88sgte,lua,t5_2qjla
682,progfix,"Oh, I forgot about that.","<div class=""md""><p>Oh, I forgot about that.</p>
</div>",1522611250.0,,False,dwn2h8h,False,t3_88sgte,t1_dwn0l40,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwn2h8h/,0,False,1,False,88sgte,lua,t5_2qjla
683,lambda_abstraction,Won't continue in full generality require goto and labels.  (LuaJIT >= 2.0 or Lua >= 5.2) ?,"<div class=""md""><p>Won&#39;t continue in full generality require goto and labels.  (LuaJIT &gt;= 2.0 or Lua &gt;= 5.2) ?</p>
</div>",1522999431.0,,False,dwwgxbj,False,t3_88sgte,t1_dwmwm0h,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwwgxbj/,1,False,1,False,88sgte,lua,t5_2qjla
684,progfix,I know that,"<div class=""md""><p>I know that</p>
</div>",1522604845.0,,False,dwmwog3,False,t3_88sgte,t1_dwmwm0h,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwmwog3/,0,False,0,False,88sgte,lua,t5_2qjla
685,zeValkyrie,"I'm not entirely sure it's even theoretically possible given that Lua keys are not inherently ints, they're just... anything. So depending on how the keys are *added* to the table they may now start at 0. Or not, they could just be int's from some external source (indexs of responses in a API call to something, for instance) so those shouldn't be shifted down by one.

Edit: this is making my head hurt","<div class=""md""><p>I&#39;m not entirely sure it&#39;s even theoretically possible given that Lua keys are not inherently ints, they&#39;re just... anything. So depending on how the keys are <em>added</em> to the table they may now start at 0. Or not, they could just be int&#39;s from some external source (indexs of responses in a API call to something, for instance) so those shouldn&#39;t be shifted down by one.</p>

<p>Edit: this is making my head hurt</p>
</div>",1522635568.0,,False,dwnn7tm,False,t3_88sgte,t1_dwnmznx,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwnn7tm/,0,False,3,False,88sgte,lua,t5_2qjla
686,DeathProgramming,"    i = 0
    while true do
      repeat -- continue guard
        i = i + 1
        if i % 2 == 0 then
          break -- continue
        end
        print(i)
      until true -- continue guard
    end
    -- this works on 5.1 :D","<div class=""md""><pre><code>i = 0
while true do
  repeat -- continue guard
    i = i + 1
    if i % 2 == 0 then
      break -- continue
    end
    print(i)
  until true -- continue guard
end
-- this works on 5.1 :D
</code></pre>
</div>",1523024823.0,,False,dwwx6fz,True,t3_88sgte,t1_dwwgxbj,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwwx6fz/,1,False,1,False,88sgte,lua,t5_2qjla
687,lambda_abstraction,"This isn't full generality.  How do you break the while in this context without hacks like a flag var and second test?   Break has already been co-opted by the nested ""loop"".  When used judiciously (very rarely), goto can yield clearer code.","<div class=""md""><p>This isn&#39;t full generality.  How do you break the while in this context without hacks like a flag var and second test?   Break has already been co-opted by the nested &quot;loop&quot;.  When used judiciously (very rarely), goto can yield clearer code.</p>
</div>",1523028793.0,,1523029807.0,dwx1ohd,False,t3_88sgte,t1_dwwx6fz,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwx1ohd/,1,False,1,False,88sgte,lua,t5_2qjla
688,DeathProgramming,"Set a variable and assign it to false. If, after the `until true`, that variable is set to 'true', _then_ break the while loop. You could also add it as a condition to the `while` loop but that's a bit more ugly.

Check out how MoonScript does it: https://moonscript.org/compiler","<div class=""md""><p>Set a variable and assign it to false. If, after the <code>until true</code>, that variable is set to &#39;true&#39;, <em>then</em> break the while loop. You could also add it as a condition to the <code>while</code> loop but that&#39;s a bit more ugly.</p>

<p>Check out how MoonScript does it: <a href=""https://moonscript.org/compiler"">https://moonscript.org/compiler</a></p>
</div>",1523029110.0,,False,dwx21se,True,t3_88sgte,t1_dwx1ohd,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwx21se/,1,False,1,False,88sgte,lua,t5_2qjla
689,lambda_abstraction,"That's what I meant by hack.  Is that really clearer than this?

    while true do
        stuff()
        if conda then goto continue end
        more_stuff()
        if condb then break end
        even_more_stuff()
    ::continue::
     end

I've lived through the anti-goto hysteria, and I don't propose to repeat it.  The goal is clarity, not operator avoidance.
","<div class=""md""><p>That&#39;s what I meant by hack.  Is that really clearer than this?</p>

<pre><code>while true do
    stuff()
    if conda then goto continue end
    more_stuff()
    if condb then break end
    even_more_stuff()
::continue::
 end
</code></pre>

<p>I&#39;ve lived through the anti-goto hysteria, and I don&#39;t propose to repeat it.  The goal is clarity, not operator avoidance.</p>
</div>",1523030008.0,,1524261036.0,dwx347f,False,t3_88sgte,t1_dwx21se,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwx347f/,1,False,1,False,88sgte,lua,t5_2qjla
690,DeathProgramming,"Nah. It's not. And to be honest, 5.1 is ancient. I'd really only support it if I really needed to. So do whatever IMO, but I'm not going to recommend something that isn't 5.1 compatible *just in case*.","<div class=""md""><p>Nah. It&#39;s not. And to be honest, 5.1 is ancient. I&#39;d really only support it if I really needed to. So do whatever IMO, but I&#39;m not going to recommend something that isn&#39;t 5.1 compatible <em>just in case</em>.</p>
</div>",1523031575.0,,False,dwx4y3l,True,t3_88sgte,t1_dwx347f,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwx4y3l/,1,False,1,False,88sgte,lua,t5_2qjla
691,lambda_abstraction,"That's cool.  At work, we're more or less standardized on LuaJIT, so many 5.1-isms are still relevant for me, and I understand that audience members may not have liberty to run the lua compiler of their choosing; thus I am chastened.","<div class=""md""><p>That&#39;s cool.  At work, we&#39;re more or less standardized on LuaJIT, so many 5.1-isms are still relevant for me, and I understand that audience members may not have liberty to run the lua compiler of their choosing; thus I am chastened.</p>
</div>",1523032295.0,,1523032583.0,dwx5sjh,False,t3_88sgte,t1_dwx4y3l,/r/lua/comments/88sgte/lua_54_has_decided_to_move_to_0based_indexes/dwx5sjh/,0,False,1,False,88sgte,lua,t5_2qjla
692,inmatarian,"Very interesting slides. I have a few thoughts:

Integers, in other languages I've come to like the idea that they call their numbers something like ""atoms"" or just ""numbers"", to keep the idea that it's a unified type and there are no worries about using the correct type when working with interfaces. So, assuming they could get the performance right and assure correctness, I would like to see an optimization where the numbers are internally stored as integers and converted to the appropriate floating type when necessary. We've done fine with math.floor and math.ceil as is, so I see no reason to rock that boat.

LPEG support becoming standard is something they should take a deep consideration of. They might not have to adopt it as is, but they really need to figure out how to get Lua's patterns to meet up with the rest of the world in terms of regular expression parsing.

And I'm a little disappointed that this is it, as far as what they're looking toward for future expansion. I would personally love it if the core development team started to think about blessing 3rdparty libraries as official (or at least ""officially blessed""). Lua sells itself as being small and tight, but it has the potential to become a much more popular language with even the slightest push towards having an official library of features. It doesn't have to be python-sized, but it'd be good to start playing catchup with perl/ruby/php/tcl.","<div class=""md""><p>Very interesting slides. I have a few thoughts:</p>

<p>Integers, in other languages I&#39;ve come to like the idea that they call their numbers something like &quot;atoms&quot; or just &quot;numbers&quot;, to keep the idea that it&#39;s a unified type and there are no worries about using the correct type when working with interfaces. So, assuming they could get the performance right and assure correctness, I would like to see an optimization where the numbers are internally stored as integers and converted to the appropriate floating type when necessary. We&#39;ve done fine with math.floor and math.ceil as is, so I see no reason to rock that boat.</p>

<p>LPEG support becoming standard is something they should take a deep consideration of. They might not have to adopt it as is, but they really need to figure out how to get Lua&#39;s patterns to meet up with the rest of the world in terms of regular expression parsing.</p>

<p>And I&#39;m a little disappointed that this is it, as far as what they&#39;re looking toward for future expansion. I would personally love it if the core development team started to think about blessing 3rdparty libraries as official (or at least &quot;officially blessed&quot;). Lua sells itself as being small and tight, but it has the potential to become a much more popular language with even the slightest push towards having an official library of features. It doesn&#39;t have to be python-sized, but it&#39;d be good to start playing catchup with perl/ruby/php/tcl.</p>
</div>",1354244712.0,,1354252793.0,c78xsc5,False,t3_1411f6,t3_1411f6,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c78xsc5/,1,False,9,False,1411f6,lua,t5_2qjla
693,bo1024,"I wonder if they have gotten enough requests/clamor for native large-integer support to justify the added complexity and (I worry) potential inconsistencies of adding an integer type.


LPEG seems interesting, but I don't see why it couldn't be a third-party library rather than part of the core. As inmatarian said Lua could benefit from promoting or recognizing good third-party libraries. Seems hard to argue that LPEG is worth increasing the code footprint 50% as part of the core. Same argument for UTF-8 although I assume it takes far less code to implement.","<div class=""md""><p>I wonder if they have gotten enough requests/clamor for native large-integer support to justify the added complexity and (I worry) potential inconsistencies of adding an integer type.</p>

<p>LPEG seems interesting, but I don&#39;t see why it couldn&#39;t be a third-party library rather than part of the core. As inmatarian said Lua could benefit from promoting or recognizing good third-party libraries. Seems hard to argue that LPEG is worth increasing the code footprint 50% as part of the core. Same argument for UTF-8 although I assume it takes far less code to implement.</p>
</div>",1354310753.0,,False,c79ay4h,False,t3_1411f6,t3_1411f6,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c79ay4h/,1,False,2,False,1411f6,lua,t5_2qjla
694,snarfy,"Lua's balance between small footprint and language features has not kept up with Moore's law.  My cell phone today is more powerful than my desktop PC from 10 years ago.  There is no point it in holding back language features to save footprint as you'll never keep up with Moore.  

","<div class=""md""><p>Lua&#39;s balance between small footprint and language features has not kept up with Moore&#39;s law.  My cell phone today is more powerful than my desktop PC from 10 years ago.  There is no point it in holding back language features to save footprint as you&#39;ll never keep up with Moore.  </p>
</div>",1354320635.0,,False,c79dgwv,False,t3_1411f6,t3_1411f6,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c79dgwv/,2,False,0,False,1411f6,lua,t5_2qjla
695,rude_sarcastic_fuck,"This is literaly the opposite of where I want Lua to go next. 

It needs to become it's own language, it has the power and potential. I can't stand this attitude what insists the libraries be small, there's no need for that in this day in age. 

I switched to Lisp from Lua becase Lua wasn't meeting my needs, and it looks like I won't be switching back. 

</3","<div class=""md""><p>This is literaly the opposite of where I want Lua to go next. </p>

<p>It needs to become it&#39;s own language, it has the power and potential. I can&#39;t stand this attitude what insists the libraries be small, there&#39;s no need for that in this day in age. </p>

<p>I switched to Lisp from Lua becase Lua wasn&#39;t meeting my needs, and it looks like I won&#39;t be switching back. </p>

<p>&lt;/3</p>
</div>",1354301152.0,,False,c7986sb,False,t3_1411f6,t3_1411f6,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c7986sb/,2,False,-5,False,1411f6,lua,t5_2qjla
696,,"The one thing I really wish would've been here was a standard concurrency interface. Lua has been good for multithreading for over a decade now; it's one of its major advantages over Python and Ruby, and there are a number of competing concurrency libraries that could use unification.

On the plus side, Unicode!","<div class=""md""><p>The one thing I really wish would&#39;ve been here was a standard concurrency interface. Lua has been good for multithreading for over a decade now; it&#39;s one of its major advantages over Python and Ruby, and there are a number of competing concurrency libraries that could use unification.</p>

<p>On the plus side, Unicode!</p>
</div>",1354566531.0,,False,c7amiis,False,t3_1411f6,t1_c78xsc5,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c7amiis/,1,False,1,False,1411f6,lua,t5_2qjla
697,inmatarian,"LPEG is written by PUC-Rio, so what they're essentially asking is to merge their two codebases together. Since there's probably no shared code between the two, it's a dubious request. On the other hand, LPEG would be the perfect jumping off point to do some community organization. Granted, a few people on lua-ml might be a bit toxic toward that end, but there is a noticeable fragmentation between the various Lua communities, and that could stand some pulling back together. And like I said, at least in the form of starting to bless some things. They wouldn't even have to invent anything, we have tools in place already (like luarocks) and models to follow (like Perl's CPAN).","<div class=""md""><p>LPEG is written by PUC-Rio, so what they&#39;re essentially asking is to merge their two codebases together. Since there&#39;s probably no shared code between the two, it&#39;s a dubious request. On the other hand, LPEG would be the perfect jumping off point to do some community organization. Granted, a few people on lua-ml might be a bit toxic toward that end, but there is a noticeable fragmentation between the various Lua communities, and that could stand some pulling back together. And like I said, at least in the form of starting to bless some things. They wouldn&#39;t even have to invent anything, we have tools in place already (like luarocks) and models to follow (like Perl&#39;s CPAN).</p>
</div>",1354346753.0,,False,c79inri,False,t3_1411f6,t1_c79ay4h,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c79inri/,0,False,3,False,1411f6,lua,t5_2qjla
698,,Lua suceededs because of its light footprint. It fills a niche.  If you want a feature in lua you can use a module,"<div class=""md""><p>Lua suceededs because of its light footprint. It fills a niche.  If you want a feature in lua you can use a module</p>
</div>",1354399190.0,,False,c79qudo,False,t3_1411f6,t1_c79dgwv,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c79qudo/,1,False,3,False,1411f6,lua,t5_2qjla
699,ansible,"However, with virtualization, it is possible to slice up a large machine into very small pieces for different users.  For instance, the [smallest Amazon EC2 instance](http://aws.amazon.com/ec2/instance-types/) has about half a gigabyte of RAM.  Processor companies in general are putting more and more cores onto the same die, and while each has some cache, main memory bandwidth is a major constraint.  So keeping a small execution footprint is still desirable.

What _language features_ (which can't be solved by a library) do you need, anyway?","<div class=""md""><p>However, with virtualization, it is possible to slice up a large machine into very small pieces for different users.  For instance, the <a href=""http://aws.amazon.com/ec2/instance-types/"">smallest Amazon EC2 instance</a> has about half a gigabyte of RAM.  Processor companies in general are putting more and more cores onto the same die, and while each has some cache, main memory bandwidth is a major constraint.  So keeping a small execution footprint is still desirable.</p>

<p>What <em>language features</em> (which can&#39;t be solved by a library) do you need, anyway?</p>
</div>",1354443641.0,,False,c79z5sk,False,t3_1411f6,t1_c79dgwv,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c79z5sk/,1,False,1,False,1411f6,lua,t5_2qjla
700,EricTboneJackson,"> I can't stand this attitude what insists the libraries be small, there's no need for that in this day in age.

Wait... what? The small size of Lua's codebase and runtime footprint is one of its primary distinguishing characteristics, which is why it's so popular for games and mobile/embedded devices.

I would love to see Lua's authors create/sanction a greatly expanded standard library, and given the ease with which modules can be included or excluded from Lua, this would have little impact for embedded devices. 

However, for *core*, essential libraries, like the string library, being reluctant to quadruple in size is admirable, something we see far too little of these days.

If you want a kitchen-sink language, they are a dime a dozen. Languages like Lua, where size and efficiency of the implementation have remained in the forefront of the authors and maintainers minds for decades, are far rarer.
","<div class=""md""><blockquote>
<p>I can&#39;t stand this attitude what insists the libraries be small, there&#39;s no need for that in this day in age.</p>
</blockquote>

<p>Wait... what? The small size of Lua&#39;s codebase and runtime footprint is one of its primary distinguishing characteristics, which is why it&#39;s so popular for games and mobile/embedded devices.</p>

<p>I would love to see Lua&#39;s authors create/sanction a greatly expanded standard library, and given the ease with which modules can be included or excluded from Lua, this would have little impact for embedded devices. </p>

<p>However, for <em>core</em>, essential libraries, like the string library, being reluctant to quadruple in size is admirable, something we see far too little of these days.</p>

<p>If you want a kitchen-sink language, they are a dime a dozen. Languages like Lua, where size and efficiency of the implementation have remained in the forefront of the authors and maintainers minds for decades, are far rarer.</p>
</div>",1354307240.0,,False,c799xxl,False,t3_1411f6,t1_c7986sb,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c799xxl/,1,False,8,False,1411f6,lua,t5_2qjla
701,bo1024,"Sounds like Lua's general approach/philosophy doesn't fit your needs/preferences, but it's probably better to use another language than hope this one changes radically.","<div class=""md""><p>Sounds like Lua&#39;s general approach/philosophy doesn&#39;t fit your needs/preferences, but it&#39;s probably better to use another language than hope this one changes radically.</p>
</div>",1354315184.0,,False,c79c561,False,t3_1411f6,t1_c7986sb,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c79c561/,0,False,2,False,1411f6,lua,t5_2qjla
702,smog_alado,"IIRC, the big problem with multithreading is that it is not portable or codedable in ansi C so any standard would have to be outside the Lua implementation.","<div class=""md""><p>IIRC, the big problem with multithreading is that it is not portable or codedable in ansi C so any standard would have to be outside the Lua implementation.</p>
</div>",1355065803.0,,False,c7dol8a,False,t3_1411f6,t1_c7amiis,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c7dol8a/,0,False,1,False,1411f6,lua,t5_2qjla
703,snarfy,"I was thinking about this, and I believe it's more because it's efficient than  because it has a light footprint.  It's footprint could be twice it's current size without affecting any system that currently runs it, but if it were twice as slow it would be a different story.  Small footprint is still important, and it's good that it's a design goal of Lua (most languages do not care), but it could be moved further down the list.  IMO the priority should be:

- Efficiency
- Language Features
- Footprint


This means it may still take a long time to develop lua as it can be hard to develop an efficient design, but features should not be constrained by footprint.  They should only be constrained by development effort.  ","<div class=""md""><p>I was thinking about this, and I believe it&#39;s more because it&#39;s efficient than  because it has a light footprint.  It&#39;s footprint could be twice it&#39;s current size without affecting any system that currently runs it, but if it were twice as slow it would be a different story.  Small footprint is still important, and it&#39;s good that it&#39;s a design goal of Lua (most languages do not care), but it could be moved further down the list.  IMO the priority should be:</p>

<ul>
<li>Efficiency</li>
<li>Language Features</li>
<li>Footprint</li>
</ul>

<p>This means it may still take a long time to develop lua as it can be hard to develop an efficient design, but features should not be constrained by footprint.  They should only be constrained by development effort.  </p>
</div>",1354418605.0,,False,c79v214,False,t3_1411f6,t1_c79qudo,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c79v214/,0,False,2,False,1411f6,lua,t5_2qjla
704,snarfy,"I'm fine with a feature being a library vs baked into the language.  Where a feature should go really depends on the function it provides.  One of Roberto's cons against LPeg was footprint, and I say he should just go ahead and include it.","<div class=""md""><p>I&#39;m fine with a feature being a library vs baked into the language.  Where a feature should go really depends on the function it provides.  One of Roberto&#39;s cons against LPeg was footprint, and I say he should just go ahead and include it.</p>
</div>",1354462685.0,,False,c7a1e7m,False,t3_1411f6,t1_c79z5sk,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c7a1e7m/,0,False,1,False,1411f6,lua,t5_2qjla
705,rude_sarcastic_fuck,">Languages like Lua, where size and efficiency of the implementation have remained in the forefront of the authors and maintainers minds for decades, are far rarer.

As are people willing to use them. ;) 

When Lua decides to grow up past embedding, I'll take a look, until then, Scheme suits me just fine.","<div class=""md""><blockquote>
<p>Languages like Lua, where size and efficiency of the implementation have remained in the forefront of the authors and maintainers minds for decades, are far rarer.</p>
</blockquote>

<p>As are people willing to use them. ;) </p>

<p>When Lua decides to grow up past embedding, I&#39;ll take a look, until then, Scheme suits me just fine.</p>
</div>",1354310627.0,,False,c79awsl,False,t3_1411f6,t1_c799xxl,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c79awsl/,1,False,-6,False,1411f6,lua,t5_2qjla
706,EricTboneJackson,"> When Lua decides to grow up past embedding

""grow up""? ""past""? As if embedding represent some kind of immaturity? As if there is some universal, objective metric for ""better"" and being embeddable is lower on that scale than having rich built-in libraries?

That reminds me of people who view Evolution as a ladder, with Man on top, so they can't understand why chimps still exist (of course, it never occurs to them to wonder why amoeba and starfish still exist).

[Lua was designed for embedding](http://queue.acm.org/detail.cfm?id=1983083), it is *used* as an embedded language, and it as done quite a bit of ""growing up"" over the years to make it better for that purpose. For instance, the mark and sweep garbage collector was replaced with an incremental collector in 5.1 to make Lua better for realtime use.

What kind of collector does Scheme use? Python? Ruby? In those languages they don't specify, and you don't care, it's an implementation detail. With Lua, the implementation is part of the appeal, Lua is a *library* as much as a language, so size and [implementation details](http://www.lua.org/manual/5.1/manual.html#2.10) matter. That's why you see Roberto carefully deliberating changes that will increase Lua's size and/or complexity.
","<div class=""md""><blockquote>
<p>When Lua decides to grow up past embedding</p>
</blockquote>

<p>&quot;grow up&quot;? &quot;past&quot;? As if embedding represent some kind of immaturity? As if there is some universal, objective metric for &quot;better&quot; and being embeddable is lower on that scale than having rich built-in libraries?</p>

<p>That reminds me of people who view Evolution as a ladder, with Man on top, so they can&#39;t understand why chimps still exist (of course, it never occurs to them to wonder why amoeba and starfish still exist).</p>

<p><a href=""http://queue.acm.org/detail.cfm?id=1983083"">Lua was designed for embedding</a>, it is <em>used</em> as an embedded language, and it as done quite a bit of &quot;growing up&quot; over the years to make it better for that purpose. For instance, the mark and sweep garbage collector was replaced with an incremental collector in 5.1 to make Lua better for realtime use.</p>

<p>What kind of collector does Scheme use? Python? Ruby? In those languages they don&#39;t specify, and you don&#39;t care, it&#39;s an implementation detail. With Lua, the implementation is part of the appeal, Lua is a <em>library</em> as much as a language, so size and <a href=""http://www.lua.org/manual/5.1/manual.html#2.10"">implementation details</a> matter. That&#39;s why you see Roberto carefully deliberating changes that will increase Lua&#39;s size and/or complexity.</p>
</div>",1354312761.0,,1354566286.0,c79bi3a,False,t3_1411f6,t1_c79awsl,/r/lua/comments/1411f6/what_is_next_for_lua_a_personal_perspective/c79bi3a/,0,False,7,False,1411f6,lua,t5_2qjla
707,DavidDrake_,"Yeah, this is so normal here, that ppl don't even bother comment on your post. Like...""all is fine ppl, nothing new to see here, move along"" ;)

Anyway, glad that you like it, ppl here are really friendly and helping each other. Nice that you appreciate it.

Keep it up!","<div class=""md""><p>Yeah, this is so normal here, that ppl don&#39;t even bother comment on your post. Like...&quot;all is fine ppl, nothing new to see here, move along&quot; ;)</p>

<p>Anyway, glad that you like it, ppl here are really friendly and helping each other. Nice that you appreciate it.</p>

<p>Keep it up!</p>
</div>",1595799124.0,,False,fzcau5a,False,t3_hyb970,t3_hyb970,/r/lua/comments/hyb970/got_to_say_this_is_the_best_sub_im_on/fzcau5a/,0,False,9,False,hyb970,lua,t5_2qjla
708,BittyTang,Slime has been hard at work! This really seems like an incredible addition. I might have to consider using Love2D for my next project.,"<div class=""md""><p>Slime has been hard at work! This really seems like an incredible addition. I might have to consider using Love2D for my next project.</p>
</div>",1387009228.0,,False,ce1gju9,False,t3_1su1fz,t3_1su1fz,/r/lua/comments/1su1fz/löve_090_baby_inspector_released/ce1gju9/,2,False,1,False,1su1fz,lua,t5_2qjla
709,nunodonato,Awesome! just came to Love a few days ago and started my first game. So cool to have this released in just a short time :D I'm excited!,"<div class=""md""><p>Awesome! just came to Love a few days ago and started my first game. So cool to have this released in just a short time :D I&#39;m excited!</p>
</div>",1387014522.0,,False,ce1hd14,False,t3_1su1fz,t3_1su1fz,/r/lua/comments/1su1fz/löve_090_baby_inspector_released/ce1hd14/,0,False,1,False,1su1fz,lua,t5_2qjla
710,slime73,"> Slime has been hard at work!

There are other LÖVE developers too! :)","<div class=""md""><blockquote>
<p>Slime has been hard at work!</p>
</blockquote>

<p>There are other LÖVE developers too! :)</p>
</div>",1387054999.0,,False,ce1rdyl,False,t3_1su1fz,t1_ce1gju9,/r/lua/comments/1su1fz/löve_090_baby_inspector_released/ce1rdyl/,1,False,6,False,1su1fz,lua,t5_2qjla
711,Karai17,"""might""? DO IT!","<div class=""md""><p>&quot;might&quot;? DO IT!</p>
</div>",1387009864.0,,False,ce1gnsc,False,t3_1su1fz,t1_ce1gju9,/r/lua/comments/1su1fz/löve_090_baby_inspector_released/ce1gnsc/,1,False,2,False,1su1fz,lua,t5_2qjla
712,robin-gvx,"They're just your sock-puppets, somehow.","<div class=""md""><p>They&#39;re just your sock-puppets, somehow.</p>
</div>",1387056430.0,,False,ce1rwtp,False,t3_1su1fz,t1_ce1rdyl,/r/lua/comments/1su1fz/löve_090_baby_inspector_released/ce1rwtp/,0,False,1,False,1su1fz,lua,t5_2qjla
713,BittyTang,"Well I'm currently working on my own game engine with OpenGL and SDL2, so I guess I'm doing extra work this time around. I just like to know how all this stuff works while only using lower level APIs.","<div class=""md""><p>Well I&#39;m currently working on my own game engine with OpenGL and SDL2, so I guess I&#39;m doing extra work this time around. I just like to know how all this stuff works while only using lower level APIs.</p>
</div>",1387010215.0,,False,ce1gprn,False,t3_1su1fz,t1_ce1gnsc,/r/lua/comments/1su1fz/löve_090_baby_inspector_released/ce1gprn/,0,False,1,False,1su1fz,lua,t5_2qjla
714,IKnowATonOfStuffAMA,Dude the guy behind LuaJIT is a glowing brain genius.,"<div class=""md""><p>Dude the guy behind LuaJIT is a glowing brain genius.</p>
</div>",1573787396.0,,False,f7jvb0o,False,t3_dwikts,t3_dwikts,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f7jvb0o/,3,False,7,False,dwikts,lua,t5_2qjla
715,Gunslinging_Gamer,"Interesting and surprising. What causes the performance issues with C++, I wonder.","<div class=""md""><p>Interesting and surprising. What causes the performance issues with C++, I wonder.</p>
</div>",1573800535.0,,False,f7kaf81,False,t3_dwikts,t3_dwikts,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f7kaf81/,1,False,2,False,dwikts,lua,t5_2qjla
716,malkia,"Mike Pall is awesome, though LuaJIT maybe full of surprises, like edge case bugs, etc. TBH, I haven't used it a lot since few years, things might've improved for the better (main reasoning was the limit of lua memory that can be allocated in 64-bit process, and some other shenanigans around where the memory should be - like in the low 4GB or something like this)","<div class=""md""><p>Mike Pall is awesome, though LuaJIT maybe full of surprises, like edge case bugs, etc. TBH, I haven&#39;t used it a lot since few years, things might&#39;ve improved for the better (main reasoning was the limit of lua memory that can be allocated in 64-bit process, and some other shenanigans around where the memory should be - like in the low 4GB or something like this)</p>
</div>",1573787878.0,,False,f7jvxsi,False,t3_dwikts,t1_f7jvb0o,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f7jvxsi/,2,False,5,False,dwikts,lua,t5_2qjla
717,suhcoR,"Yes, Turing Price level.","<div class=""md""><p>Yes, Turing Price level.</p>
</div>",1573808666.0,,False,f7kg9xq,True,t3_dwikts,t1_f7jvb0o,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f7kg9xq/,0,False,3,False,dwikts,lua,t5_2qjla
718,lambda_abstraction,"In the words of u/munificent:

""LuaJIT with the JIT enabled is much faster than all of the other languages benchmarked, including Wren, because Mike Pall is a robot from the future.""","<div class=""md""><p>In the words of <a href=""/u/munificent"">u/munificent</a>:</p>

<p>&quot;LuaJIT with the JIT enabled is much faster than all of the other languages benchmarked, including Wren, because Mike Pall is a robot from the future.&quot;</p>
</div>",1573844539.0,,False,f7lnvod,False,t3_dwikts,t1_f7jvb0o,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f7lnvod/,0,False,3,False,dwikts,lua,t5_2qjla
719,suhcoR,"Deniau explains it in his talk. It's due to the tracing JIT compiler which has more and better optimization possibilities than an AOT compiler (such as C++) because the optimization is based on real-time measurements of the running algorightm. Here is an interesting discussion about the topic: [http://lambda-the-ultimate.org/node/3851](http://lambda-the-ultimate.org/node/3851).

EDIT: also have a look at this thesis which analyzes in detail how the LuaJIT tracing compiler works: [http://cds.cern.ch/record/2692915/files/CERN-THESIS-2019-152.pdf?version=1](http://cds.cern.ch/record/2692915/files/CERN-THESIS-2019-152.pdf?version=1).","<div class=""md""><p>Deniau explains it in his talk. It&#39;s due to the tracing JIT compiler which has more and better optimization possibilities than an AOT compiler (such as C++) because the optimization is based on real-time measurements of the running algorightm. Here is an interesting discussion about the topic: <a href=""http://lambda-the-ultimate.org/node/3851"">http://lambda-the-ultimate.org/node/3851</a>.</p>

<p>EDIT: also have a look at this thesis which analyzes in detail how the LuaJIT tracing compiler works: <a href=""http://cds.cern.ch/record/2692915/files/CERN-THESIS-2019-152.pdf?version=1"">http://cds.cern.ch/record/2692915/files/CERN-THESIS-2019-152.pdf?version=1</a>.</p>
</div>",1573809645.0,,1573816506.0,f7kgw59,True,t3_dwikts,t1_f7kaf81,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f7kgw59/,1,False,6,False,dwikts,lua,t5_2qjla
720,IKnowATonOfStuffAMA,"I've used it for love2d for a couple years and I haven't found any yet. Not exactly looking for them, but this should illustrate how subtle the limitations are.","<div class=""md""><p>I&#39;ve used it for love2d for a couple years and I haven&#39;t found any yet. Not exactly looking for them, but this should illustrate how subtle the limitations are.</p>
</div>",1573788027.0,,False,f7jw52c,False,t3_dwikts,t1_f7jvxsi,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f7jw52c/,0,False,6,False,dwikts,lua,t5_2qjla
721,lambda_abstraction,"Outside of the 32bit mmap, what other warts have you run into?  So far, the only thing that's bitten me is that one must flush the JIT cache prior to dumping bytecode for a function that's been JITted.","<div class=""md""><p>Outside of the 32bit mmap, what other warts have you run into?  So far, the only thing that&#39;s bitten me is that one must flush the JIT cache prior to dumping bytecode for a function that&#39;s been JITted.</p>
</div>",1573847670.0,,False,f7lt86k,False,t3_dwikts,t1_f7jvxsi,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f7lt86k/,0,False,2,False,dwikts,lua,t5_2qjla
722,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1574328370.0,,1588860670.0,f87dz3y,False,t3_dwikts,t1_f7kgw59,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f87dz3y/,1,False,1,False,dwikts,lua,t5_2qjla
723,suhcoR,No. The generated machine code would be incomplete and not do the intended function if parts were left out. But you can create optimized LuaJIT bytecode which doesn't hit NYI commands with a tool like [https://github.com/rochus-keller/ljtools](https://github.com/rochus-keller/ljtools).,"<div class=""md""><p>No. The generated machine code would be incomplete and not do the intended function if parts were left out. But you can create optimized LuaJIT bytecode which doesn&#39;t hit NYI commands with a tool like <a href=""https://github.com/rochus-keller/ljtools"">https://github.com/rochus-keller/ljtools</a>.</p>
</div>",1574328819.0,,False,f87e8tx,True,t3_dwikts,t1_f87dz3y,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f87e8tx/,1,False,1,False,dwikts,lua,t5_2qjla
724,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1574331909.0,,1588860669.0,f87ggw3,False,t3_dwikts,t1_f87e8tx,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f87ggw3/,1,False,1,False,dwikts,lua,t5_2qjla
725,suhcoR,"Are you talking about an ahead-of-time (AOT) compiler instead? It wouldn't likely be as fast as the tracing JIT because it had less information to support optimization. But of course, in principle it would be possible to develop an AOT compiler for Lua, e.g. using LLVM as a backend. Have a look at these projects where it has been done:

[https://github.com/dibyendumajumdar/ravi](https://github.com/dibyendumajumdar/ravi)

[https://github.com/Leonardo2718/lua-vermelha](https://github.com/Leonardo2718/lua-vermelha)

There are also Lua to C backends like [https://github.com/pallene-lang/pallene](https://github.com/pallene-lang/pallene) or [https://github.com/hugomg/lua-aot](https://github.com/hugomg/lua-aot)","<div class=""md""><p>Are you talking about an ahead-of-time (AOT) compiler instead? It wouldn&#39;t likely be as fast as the tracing JIT because it had less information to support optimization. But of course, in principle it would be possible to develop an AOT compiler for Lua, e.g. using LLVM as a backend. Have a look at these projects where it has been done:</p>

<p><a href=""https://github.com/dibyendumajumdar/ravi"">https://github.com/dibyendumajumdar/ravi</a></p>

<p><a href=""https://github.com/Leonardo2718/lua-vermelha"">https://github.com/Leonardo2718/lua-vermelha</a></p>

<p>There are also Lua to C backends like <a href=""https://github.com/pallene-lang/pallene"">https://github.com/pallene-lang/pallene</a> or <a href=""https://github.com/hugomg/lua-aot"">https://github.com/hugomg/lua-aot</a></p>
</div>",1574334419.0,,False,f87j6l6,True,t3_dwikts,t1_f87ggw3,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f87j6l6/,1,False,1,False,dwikts,lua,t5_2qjla
726,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1574334707.0,,1588860668.0,f87jifk,False,t3_dwikts,t1_f87j6l6,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f87jifk/,1,False,1,False,dwikts,lua,t5_2qjla
727,suhcoR,"Well, maybe you can try to implement an alternative version of the JIT and do some tests with it. Maybe it would be the same amount of work like implementing some more of the NYI. I havn't tried yet.","<div class=""md""><p>Well, maybe you can try to implement an alternative version of the JIT and do some tests with it. Maybe it would be the same amount of work like implementing some more of the NYI. I havn&#39;t tried yet.</p>
</div>",1574335148.0,,False,f87k0d7,True,t3_dwikts,t1_f87jifk,/r/lua/comments/dwikts/luajit_for_computing_accelerator_beam_physics/f87k0d7/,0,False,1,False,dwikts,lua,t5_2qjla
728,BadBoy6767,Any program not made with Electron gets an upvote from me.,"<div class=""md""><p>Any program not made with Electron gets an upvote from me.</p>
</div>",1587244834.0,,1587245296.0,fntmujf,False,t3_g3pnd4,t3_g3pnd4,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fntmujf/,1,False,40,False,g3pnd4,lua,t5_2qjla
729,curtisf,"This looks really cool.

Unfortunately, I can't run it because I don't have Python 2 installed, and don't really want to install it since it's no longer supported. Any chance you can update the build files to work in Python 3 also? (Or maybe Lua? :) )

Also, a .clang-format that matches the style of the project would be nice, so that my editor can help autoformat without making changes to every line when I save.","<div class=""md""><p>This looks really cool.</p>

<p>Unfortunately, I can&#39;t run it because I don&#39;t have Python 2 installed, and don&#39;t really want to install it since it&#39;s no longer supported. Any chance you can update the build files to work in Python 3 also? (Or maybe Lua? :) )</p>

<p>Also, a .clang-format that matches the style of the project would be nice, so that my editor can help autoformat without making changes to every line when I save.</p>
</div>",1587315248.0,,False,fnwbl7b,False,t3_g3pnd4,t3_g3pnd4,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fnwbl7b/,1,False,4,False,g3pnd4,lua,t5_2qjla
730,luveti,"Hey u/rxi! This is awesome! I'm a huge fan of lume and flux and am using them in a commercial product (embedded Linux project using pure LuaJIT).

I've been looking for an editor to replace vscode (Onivim2, 4coder and Howl to name some) and feel shitty I didn't notice this! :D Guess that's what I get for not looking at your other projects!

I've also been wanting to write something like this, but haven't had the time. I planned on using Terra, SDL2, Cairo, and Pango. Then basically creating a single binary with all those libraries built into it and access them via FFI. But sounds like I no longer need to since this exists :)

Have you thought about using LuaJIT and just accessing the C libraries via FFI? It probably would create a huge speed up, and would remove the need to rebuild the binary every time you want access to another C function.

Anyways thank you for this!","<div class=""md""><p>Hey <a href=""/u/rxi"">u/rxi</a>! This is awesome! I&#39;m a huge fan of lume and flux and am using them in a commercial product (embedded Linux project using pure LuaJIT).</p>

<p>I&#39;ve been looking for an editor to replace vscode (Onivim2, 4coder and Howl to name some) and feel shitty I didn&#39;t notice this! :D Guess that&#39;s what I get for not looking at your other projects!</p>

<p>I&#39;ve also been wanting to write something like this, but haven&#39;t had the time. I planned on using Terra, SDL2, Cairo, and Pango. Then basically creating a single binary with all those libraries built into it and access them via FFI. But sounds like I no longer need to since this exists :)</p>

<p>Have you thought about using LuaJIT and just accessing the C libraries via FFI? It probably would create a huge speed up, and would remove the need to rebuild the binary every time you want access to another C function.</p>

<p>Anyways thank you for this!</p>
</div>",1587326577.0,,False,fnww29x,False,t3_g3pnd4,t3_g3pnd4,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fnww29x/,1,False,3,False,g3pnd4,lua,t5_2qjla
731,,Hello! Nice work on the project! Does It work with raspberry pi/Raspbian?,"<div class=""md""><p>Hello! Nice work on the project! Does It work with raspberry pi/Raspbian?</p>
</div>",1588927497.0,,False,fpuxs73,False,t3_g3pnd4,t3_g3pnd4,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fpuxs73/,1,False,1,False,g3pnd4,lua,t5_2qjla
732,phaazon_,"Why build.sh though? That doesn’t seem like a good way to compile a program in 2020, especially in terms of parallelism and TU (re)compiling.

However, I’m very interested in any attempt at making native editors that don’t use shitty web technologies. Kudos for this!","<div class=""md""><p>Why build.sh though? That doesn’t seem like a good way to compile a program in 2020, especially in terms of parallelism and TU (re)compiling.</p>

<p>However, I’m very interested in any attempt at making native editors that don’t use shitty web technologies. Kudos for this!</p>
</div>",1590871820.0,,False,fsco5wn,False,t3_g3pnd4,t3_g3pnd4,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fsco5wn/,0,False,1,False,g3pnd4,lua,t5_2qjla
733,,what's wrong with electron? (never programmed with it before),"<div class=""md""><p>what&#39;s wrong with electron? (never programmed with it before)</p>
</div>",1587310535.0,,False,fnw38k2,False,t3_g3pnd4,t1_fntmujf,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fnw38k2/,2,False,2,False,g3pnd4,lua,t5_2qjla
734,rxi,What platform are you on? There are builds for 64bit Windows and Linux on the [releases page](https://github.com/rxi/lite/releases),"<div class=""md""><p>What platform are you on? There are builds for 64bit Windows and Linux on the <a href=""https://github.com/rxi/lite/releases"">releases page</a></p>
</div>",1587319791.0,,False,fnwjwm5,True,t3_g3pnd4,t1_fnwbl7b,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fnwjwm5/,1,False,2,False,g3pnd4,lua,t5_2qjla
735,rxi,"Thanks for the kind words! Glad you found some use in the libraries too.

My thoughts when building it were that if I can get it running smoothly on PUC lua then switching to the JIT later on would provide a nice speed boost. I never found the latter part necessary though, there's a certain simplicity and niceness of using PUC lua, which I have at least some understanding to the inner workings of, as opposed to the JIT which seems to be the construct of some kind of magic.

That being said if someone wanted to fork and switch to the JIT that would be trivial, and given the size of the project the FFI approach you mentioned wouldn't be too much work either. The advantages you listed do sound nice but I wouldn't want this specific project to depend on the JIT, again, simplicity being one of its key goals

There's also a bit of a trap surrounding the JIT which I don't see brought up often: the fact that it *can be fast* makes you want to optimise for it, but since it's impossible to predict exactly *how* it will optimise your lua, writing the most performant code is tedious, and often the readability suffers for it. Taking the approach of using PUC lua assures worse but predictable performance; anything that needs to be fast (eg. the fuzzy string matching in `lite` was too slow in pure lua) can be written in readable idiomatic C with good, predictable performance.","<div class=""md""><p>Thanks for the kind words! Glad you found some use in the libraries too.</p>

<p>My thoughts when building it were that if I can get it running smoothly on PUC lua then switching to the JIT later on would provide a nice speed boost. I never found the latter part necessary though, there&#39;s a certain simplicity and niceness of using PUC lua, which I have at least some understanding to the inner workings of, as opposed to the JIT which seems to be the construct of some kind of magic.</p>

<p>That being said if someone wanted to fork and switch to the JIT that would be trivial, and given the size of the project the FFI approach you mentioned wouldn&#39;t be too much work either. The advantages you listed do sound nice but I wouldn&#39;t want this specific project to depend on the JIT, again, simplicity being one of its key goals</p>

<p>There&#39;s also a bit of a trap surrounding the JIT which I don&#39;t see brought up often: the fact that it <em>can be fast</em> makes you want to optimise for it, but since it&#39;s impossible to predict exactly <em>how</em> it will optimise your lua, writing the most performant code is tedious, and often the readability suffers for it. Taking the approach of using PUC lua assures worse but predictable performance; anything that needs to be fast (eg. the fuzzy string matching in <code>lite</code> was too slow in pure lua) can be written in readable idiomatic C with good, predictable performance.</p>
</div>",1587377693.0,,False,fnyvxya,True,t3_g3pnd4,t1_fnww29x,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fnyvxya/,1,False,5,False,g3pnd4,lua,t5_2qjla
736,rxi,"Thanks! It should, though I've not tried it with it! You'd have to build it from source (should be easy: grab `libsdl2-dev` from the repo and run the `build.py` script). Something like a raspberry pi feels like a great use case for it given some of the heavier alternatives would really show their weight on such a platform -- let me know how you get along if you give it a try.","<div class=""md""><p>Thanks! It should, though I&#39;ve not tried it with it! You&#39;d have to build it from source (should be easy: grab <code>libsdl2-dev</code> from the repo and run the <code>build.py</code> script). Something like a raspberry pi feels like a great use case for it given some of the heavier alternatives would really show their weight on such a platform -- let me know how you get along if you give it a try.</p>
</div>",1588938579.0,,False,fpv8pss,True,t3_g3pnd4,t1_fpuxs73,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fpv8pss/,1,False,2,False,g3pnd4,lua,t5_2qjla
737,BadBoy6767,"Electron is a web browser. That's the biggest problem. The web wasn't meant for programs or ""apps"", it was meant to be a bunch of documents which link one to another, forming a ""web"". As people started getting more and more lazy to press a ""Download"" and ""Install"" button, programmers started putting more and more things into the browser, which further added bloat.

So every single Electron program you run on your computer acts as a separate web browser with its own bloat, which eats up your RAM like you would a cheeseburger.","<div class=""md""><p>Electron is a web browser. That&#39;s the biggest problem. The web wasn&#39;t meant for programs or &quot;apps&quot;, it was meant to be a bunch of documents which link one to another, forming a &quot;web&quot;. As people started getting more and more lazy to press a &quot;Download&quot; and &quot;Install&quot; button, programmers started putting more and more things into the browser, which further added bloat.</p>

<p>So every single Electron program you run on your computer acts as a separate web browser with its own bloat, which eats up your RAM like you would a cheeseburger.</p>
</div>",1587313352.0,,1587313559.0,fnw85z0,False,t3_g3pnd4,t1_fnw38k2,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fnw85z0/,1,False,8,False,g3pnd4,lua,t5_2qjla
738,Mgladiethor,ram cancer,"<div class=""md""><p>ram cancer</p>
</div>",1591042771.0,,False,fsk868k,False,t3_g3pnd4,t1_fnw38k2,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fsk868k/,0,False,2,False,g3pnd4,lua,t5_2qjla
739,curtisf,"I'm on Windows 10 (64 bit). I was hoping to build from source to be able to poke around the SDL code, not just run the binary","<div class=""md""><p>I&#39;m on Windows 10 (64 bit). I was hoping to build from source to be able to poke around the SDL code, not just run the binary</p>
</div>",1587319943.0,,False,fnwk6jj,False,t3_g3pnd4,t1_fnwjwm5,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fnwk6jj/,0,False,2,False,g3pnd4,lua,t5_2qjla
740,luveti,"Your points all make sense! My current project running LuaJIT on aarch64 is sitting at 18,853 lines of Lua (2,415 in third party libs included). The only bit that isn't in Lua is a box blur function because that was about 2.5 times faster in C and I have blurs all over the place! But Terra would definitely help in that situation.

I guess another thing you have to consider is how active those projects are since Mike Pall is no longer working on LuaJIT and Terra hasn't had a release in well over a year.","<div class=""md""><p>Your points all make sense! My current project running LuaJIT on aarch64 is sitting at 18,853 lines of Lua (2,415 in third party libs included). The only bit that isn&#39;t in Lua is a box blur function because that was about 2.5 times faster in C and I have blurs all over the place! But Terra would definitely help in that situation.</p>

<p>I guess another thing you have to consider is how active those projects are since Mike Pall is no longer working on LuaJIT and Terra hasn&#39;t had a release in well over a year.</p>
</div>",1587400759.0,,False,fnzu24d,False,t3_g3pnd4,t1_fnyvxya,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fnzu24d/,0,False,3,False,g3pnd4,lua,t5_2qjla
741,,"Alright! That's what I thought too, a lightweight editor and a Pi fits very well together. I'm gonna try it soon!","<div class=""md""><p>Alright! That&#39;s what I thought too, a lightweight editor and a Pi fits very well together. I&#39;m gonna try it soon!</p>
</div>",1588961285.0,,False,fpwd04j,False,t3_g3pnd4,t1_fpv8pss,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fpwd04j/,1,False,2,False,g3pnd4,lua,t5_2qjla
742,,oh okay thanks for explaining!,"<div class=""md""><p>oh okay thanks for explaining!</p>
</div>",1587375839.0,,False,fnyu7r8,False,t3_g3pnd4,t1_fnw85z0,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fnyu7r8/,0,False,2,False,g3pnd4,lua,t5_2qjla
743,,Hi! I installed and tested today in my Raspberry Pi 4B/4GB RAM and it worked like a charm! I'm really digging it.,"<div class=""md""><p>Hi! I installed and tested today in my Raspberry Pi 4B/4GB RAM and it worked like a charm! I&#39;m really digging it.</p>
</div>",1588976876.0,,False,fpx7093,False,t3_g3pnd4,t1_fpwd04j,/r/lua/comments/g3pnd4/lite_a_lightweight_text_editor_written_in_lua/fpx7093/,0,False,2,False,g3pnd4,lua,t5_2qjla
744,WebShaker93,"That's very usefull!
Great.","<div class=""md""><p>That&#39;s very usefull!
Great.</p>
</div>",1641059170.0,,False,hqtsxqw,False,t3_rtnfsa,t3_rtnfsa,/r/lua/comments/rtnfsa/lua_by_example_small_site_to_keep_lua_in_one_place/hqtsxqw/,0,False,2,False,rtnfsa,lua,t5_2qjla
745,Planebagels1,This is very useful and helpful ty,"<div class=""md""><p>This is very useful and helpful ty</p>
</div>",1641065051.0,,False,hqu7cnu,False,t3_rtnfsa,t3_rtnfsa,/r/lua/comments/rtnfsa/lua_by_example_small_site_to_keep_lua_in_one_place/hqu7cnu/,0,False,1,False,rtnfsa,lua,t5_2qjla
746,Rice7th,wtf this is so cool!,"<div class=""md""><p>wtf this is so cool!</p>
</div>",1641065306.0,,False,hqu7yzo,False,t3_rtnfsa,t3_rtnfsa,/r/lua/comments/rtnfsa/lua_by_example_small_site_to_keep_lua_in_one_place/hqu7yzo/,0,False,1,False,rtnfsa,lua,t5_2qjla
747,demontrain,Thanks for sharing - this is great.,"<div class=""md""><p>Thanks for sharing - this is great.</p>
</div>",1641068525.0,,False,hqufuk7,False,t3_rtnfsa,t3_rtnfsa,/r/lua/comments/rtnfsa/lua_by_example_small_site_to_keep_lua_in_one_place/hqufuk7/,0,False,1,False,rtnfsa,lua,t5_2qjla
748,,This is great! Well done,"<div class=""md""><p>This is great! Well done</p>
</div>",1641073402.0,,False,hqurnpm,False,t3_rtnfsa,t3_rtnfsa,/r/lua/comments/rtnfsa/lua_by_example_small_site_to_keep_lua_in_one_place/hqurnpm/,0,False,1,False,rtnfsa,lua,t5_2qjla
749,,"This is brilliant - a lot more simplistic to the newcomer than the docs, awesome work!","<div class=""md""><p>This is brilliant - a lot more simplistic to the newcomer than the docs, awesome work!</p>
</div>",1641084022.0,,False,hqvgcz0,False,t3_rtnfsa,t3_rtnfsa,/r/lua/comments/rtnfsa/lua_by_example_small_site_to_keep_lua_in_one_place/hqvgcz0/,0,False,1,False,rtnfsa,lua,t5_2qjla
750,mbeischer,Perfect for me as a beginner in Lua. Wish for the same kind of examples for wxlua.,"<div class=""md""><p>Perfect for me as a beginner in Lua. Wish for the same kind of examples for wxlua.</p>
</div>",1641307171.0,,False,hr7u41w,False,t3_rtnfsa,t3_rtnfsa,/r/lua/comments/rtnfsa/lua_by_example_small_site_to_keep_lua_in_one_place/hr7u41w/,0,False,1,False,rtnfsa,lua,t5_2qjla
751,ScottAstatine,Really awesome reference for lua.,"<div class=""md""><p>Really awesome reference for lua.</p>
</div>",1641638891.0,,False,hrrih0k,False,t3_rtnfsa,t3_rtnfsa,/r/lua/comments/rtnfsa/lua_by_example_small_site_to_keep_lua_in_one_place/hrrih0k/,0,False,1,False,rtnfsa,lua,t5_2qjla
752,Shadow-nim,thanks a lot,"<div class=""md""><p>thanks a lot</p>
</div>",1643067105.0,,False,hu35c66,False,t3_rtnfsa,t3_rtnfsa,/r/lua/comments/rtnfsa/lua_by_example_small_site_to_keep_lua_in_one_place/hu35c66/,0,False,1,False,rtnfsa,lua,t5_2qjla
753,,Congrats lua,"<div class=""md""><p>Congrats lua</p>
</div>",1655530311.0,,False,icswpp4,False,t3_vcgd0q,t3_vcgd0q,/r/lua/comments/vcgd0q/lua_breaks_into_tiobes_top_20_languages/icswpp4/,0,False,2,False,vcgd0q,lua,t5_2qjla
754,revereddesecration,Daurnimator back at it again with the cool projects,"<div class=""md""><p>Daurnimator back at it again with the cool projects</p>
</div>",1483539041.0,,False,dbzjckp,False,t3_5lz2zm,t3_5lz2zm,/r/lua/comments/5lz2zm/githubcomlua/dbzjckp/,0,False,3,False,5lz2zm,lua,t5_2qjla
755,Ferib,"Hello,   
I created my own Lua *(version 5.1)* Decompiler for the sake of education. Understanding how the Lua Bytecode works isn't really needed to program Lua, but it gives you a better understanding of how Lua itself works. Hope you guys like my article, it's not really a beginner-friendly article, but don't be ashamed to ask questions regarding the article!","<div class=""md""><p>Hello,<br/>
I created my own Lua <em>(version 5.1)</em> Decompiler for the sake of education. Understanding how the Lua Bytecode works isn&#39;t really needed to program Lua, but it gives you a better understanding of how Lua itself works. Hope you guys like my article, it&#39;s not really a beginner-friendly article, but don&#39;t be ashamed to ask questions regarding the article!</p>
</div>",1617297331.0,,False,gt1usts,True,t3_mi024d,t3_mi024d,/r/lua/comments/mi024d/creating_a_lua_decompiler_from_scratch/gt1usts/,2,False,10,False,mi024d,lua,t5_2qjla
756,slbfan33,Thank you for sharing this.,"<div class=""md""><p>Thank you for sharing this.</p>
</div>",1617307793.0,,False,gt2hozk,False,t3_mi024d,t1_gt1usts,/r/lua/comments/mi024d/creating_a_lua_decompiler_from_scratch/gt2hozk/,0,False,5,False,mi024d,lua,t5_2qjla
757,irckeyboardwarrior,Why did you choose version 5.1?,"<div class=""md""><p>Why did you choose version 5.1?</p>
</div>",1617364725.0,,False,gt4seck,False,t3_mi024d,t1_gt1usts,/r/lua/comments/mi024d/creating_a_lua_decompiler_from_scratch/gt4seck/,1,False,3,False,mi024d,lua,t5_2qjla
758,Ferib,"Because the 5.1 version of Lua has only 38 opcodes and creating a working decompiler means that I must of course support all those 38 opcodes. The project is more for educational use to give people a better understanding of decompilers and virtual programming languages, so I felt no need to make this for the last version of Lua.

Also, World of Warcraft uses a custom version of Lua 5.1.4 or something, so there may be some actual usage for the project.","<div class=""md""><p>Because the 5.1 version of Lua has only 38 opcodes and creating a working decompiler means that I must of course support all those 38 opcodes. The project is more for educational use to give people a better understanding of decompilers and virtual programming languages, so I felt no need to make this for the last version of Lua.</p>

<p>Also, World of Warcraft uses a custom version of Lua 5.1.4 or something, so there may be some actual usage for the project.</p>
</div>",1617367652.0,,False,gt4wf6p,True,t3_mi024d,t1_gt4seck,/r/lua/comments/mi024d/creating_a_lua_decompiler_from_scratch/gt4wf6p/,0,False,3,False,mi024d,lua,t5_2qjla
759,MunifTanjim,GitHub repo: https://github.com/MunifTanjim/luver,"<div class=""md""><p>GitHub repo: <a href=""https://github.com/MunifTanjim/luver"">https://github.com/MunifTanjim/luver</a></p>
</div>",1637646019.0,,False,hlqitwz,True,t3_r062sz,t3_r062sz,/r/lua/comments/r062sz/wrote_a_version_manager_for_lua_if_you_want_to/hlqitwz/,0,False,5,False,r062sz,lua,t5_2qjla
760,,"I should move to zsh.

NIce, and extra-nice because it's just done in shell.","<div class=""md""><p>I should move to zsh.</p>

<p>NIce, and extra-nice because it&#39;s just done in shell.</p>
</div>",1637666529.0,,False,hlr8cc2,False,t3_r062sz,t3_r062sz,/r/lua/comments/r062sz/wrote_a_version_manager_for_lua_if_you_want_to/hlr8cc2/,0,False,2,False,r062sz,lua,t5_2qjla
761,Jak_from_Venice,"Seriously 1Mb and running on all those platforms? A Löve for VR applications?

Maybe I’m naïve, but I’m really flabbergasted! Incredible job! 👏","<div class=""md""><p>Seriously 1Mb and running on all those platforms? A Löve for VR applications?</p>

<p>Maybe I’m naïve, but I’m really flabbergasted! Incredible job! 👏</p>
</div>",1629542357.0,,False,h9rwqmp,False,t3_p8p2h4,t3_p8p2h4,/r/lua/comments/p8p2h4/lövr_an_open_source_framework_for_rapidly/h9rwqmp/,0,False,5,False,p8p2h4,lua,t5_2qjla
762,willthewarlock23,Any good tutorials out there?,"<div class=""md""><p>Any good tutorials out there?</p>
</div>",1630139031.0,,False,hanshcu,False,t3_p8p2h4,t3_p8p2h4,/r/lua/comments/p8p2h4/lövr_an_open_source_framework_for_rapidly/hanshcu/,1,False,3,False,p8p2h4,lua,t5_2qjla
763,lacethespace,"Been using it for a year and a half, I'm a huge fan and a minor contributor. Feel free to ask questions.","<div class=""md""><p>Been using it for a year and a half, I&#39;m a huge fan and a minor contributor. Feel free to ask questions.</p>
</div>",1629625164.0,,False,h9w4z21,False,t3_p8p2h4,t3_p8p2h4,/r/lua/comments/p8p2h4/lövr_an_open_source_framework_for_rapidly/h9w4z21/,0,False,2,False,p8p2h4,lua,t5_2qjla
764,lambda_abstraction,"Not really my thing at the moment, but definitely worth a bookmark.  Who knows what the future may kick my way.  Rock on, dudez!","<div class=""md""><p>Not really my thing at the moment, but definitely worth a bookmark.  Who knows what the future may kick my way.  Rock on, dudez!</p>
</div>",1629823234.0,,False,ha6hlrh,False,t3_p8p2h4,t3_p8p2h4,/r/lua/comments/p8p2h4/lövr_an_open_source_framework_for_rapidly/ha6hlrh/,0,False,1,False,p8p2h4,lua,t5_2qjla
765,Mexlicano,"Due to lack of popularity, there aren't any good tutorials, The only option is to learn it all by yourself.","<div class=""md""><p>Due to lack of popularity, there aren&#39;t any good tutorials, The only option is to learn it all by yourself.</p>
</div>",1689483485.0,,False,js5l77y,False,t3_p8p2h4,t1_hanshcu,/r/lua/comments/p8p2h4/lövr_an_open_source_framework_for_rapidly/js5l77y/,0,False,2,False,p8p2h4,lua,t5_2qjla
766,abomb999,"Yes! After seeing all the amazing scripts the wow gamers came up with, I realized blizzard was ahead of the curve by choosing Lua as a scripting language for non programmers. ","<div class=""md""><p>Yes! After seeing all the amazing scripts the wow gamers came up with, I realized blizzard was ahead of the curve by choosing Lua as a scripting language for non programmers. </p>
</div>",1328431638.0,,False,c3o2m6b,False,t3_p57qt,t3_p57qt,/r/lua/comments/p57qt/wikipedia_chooses_lua_as_its_new_templatemacro/c3o2m6b/,0,False,1,False,p57qt,lua,t5_2qjla
767,ansible,This news prompted [a long and interesting discussion on the Lua mailing list](http://article.gmane.org/gmane.comp.lang.lua.general/88130) about Unicode and UTF-8 support.  There are a couple older threads of interest too.,"<div class=""md""><p>This news prompted <a href=""http://article.gmane.org/gmane.comp.lang.lua.general/88130"">a long and interesting discussion on the Lua mailing list</a> about Unicode and UTF-8 support.  There are a couple older threads of interest too.</p>
</div>",1329239131.0,,False,c3r5hb7,False,t3_p57qt,t3_p57qt,/r/lua/comments/p57qt/wikipedia_chooses_lua_as_its_new_templatemacro/c3r5hb7/,0,False,1,False,p57qt,lua,t5_2qjla
768,revereddesecration,There's a lot more features to this than I expected. Pretty cool!,"<div class=""md""><p>There&#39;s a lot more features to this than I expected. Pretty cool!</p>
</div>",1601123884.0,,False,g6o8q4i,False,t3_izrjcs,t3_izrjcs,/r/lua/comments/izrjcs/gifboy_create_and_share_gif_animations_by_writing/g6o8q4i/,0,False,1,False,izrjcs,lua,t5_2qjla
769,ResponsibleMirror,It is very cool 🙂,"<div class=""md""><p>It is very cool 🙂</p>
</div>",1601195737.0,,False,g6tcoav,False,t3_izrjcs,t3_izrjcs,/r/lua/comments/izrjcs/gifboy_create_and_share_gif_animations_by_writing/g6tcoav/,0,False,1,False,izrjcs,lua,t5_2qjla
770,thrakkerzog,Looks more like an add-on for figlet.  You might want to mention that figlet is required somewhere.,"<div class=""md""><p>Looks more like an add-on for figlet.  You might want to mention that figlet is required somewhere.</p>
</div>",1616160343.0,,False,grh745w,False,t3_m80yh9,t3_m80yh9,/r/lua/comments/m80yh9/i_made_a_banner_designer_or_presentation_card/grh745w/,1,False,4,False,m80yh9,lua,t5_2qjla
771,ElpersonPL,My man you didnt put the .lua extension in your github repo,"<div class=""md""><p>My man you didnt put the .lua extension in your github repo</p>
</div>",1616174284.0,,False,gri1c79,False,t3_m80yh9,t3_m80yh9,/r/lua/comments/m80yh9/i_made_a_banner_designer_or_presentation_card/gri1c79/,1,False,2,False,m80yh9,lua,t5_2qjla
772,Bowuigi06,"Whoops, forgot the link, here it is: [Here](https://github.com/Bowuigi/BannerDesigner)","<div class=""md""><p>Whoops, forgot the link, here it is: <a href=""https://github.com/Bowuigi/BannerDesigner"">Here</a></p>
</div>",1616112063.0,,False,grfb7js,True,t3_m80yh9,t3_m80yh9,/r/lua/comments/m80yh9/i_made_a_banner_designer_or_presentation_card/grfb7js/,1,False,1,False,m80yh9,lua,t5_2qjla
773,Bowuigi06,Fixed,"<div class=""md""><p>Fixed</p>
</div>",1616163119.0,,False,grhcifw,True,t3_m80yh9,t1_grh745w,/r/lua/comments/m80yh9/i_made_a_banner_designer_or_presentation_card/grhcifw/,0,False,1,False,m80yh9,lua,t5_2qjla
774,Bowuigi06,"I know, it was so you can use it as a program, that is why the first line of code is ``#!/usr/bin/luajit``, that is the *nix shebang to execute luajit when running it with ./BannerDesigner","<div class=""md""><p>I know, it was so you can use it as a program, that is why the first line of code is <code>#!/usr/bin/luajit</code>, that is the *nix shebang to execute luajit when running it with ./BannerDesigner</p>
</div>",1616174410.0,,False,gri1mke,True,t3_m80yh9,t1_gri1c79,/r/lua/comments/m80yh9/i_made_a_banner_designer_or_presentation_card/gri1mke/,0,False,5,False,m80yh9,lua,t5_2qjla
775,AtheRipper,No .lua extension...?,"<div class=""md""><p>No .lua extension...?</p>
</div>",1616234980.0,,False,grkrkkr,False,t3_m80yh9,t1_grfb7js,/r/lua/comments/m80yh9/i_made_a_banner_designer_or_presentation_card/grkrkkr/,1,False,2,False,m80yh9,lua,t5_2qjla
776,Bowuigi06,"Nope, because it is made to be usable as soon as you download it (if you have figlet), but it is a Lua file","<div class=""md""><p>Nope, because it is made to be usable as soon as you download it (if you have figlet), but it is a Lua file</p>
</div>",1616244228.0,,False,grl1kpl,True,t3_m80yh9,t1_grkrkkr,/r/lua/comments/m80yh9/i_made_a_banner_designer_or_presentation_card/grl1kpl/,0,False,4,False,m80yh9,lua,t5_2qjla
777,budswa,"Wow, great work","<div class=""md""><p>Wow, great work</p>
</div>",1670401527.0,,False,iz8r7j9,False,t3_zenjtg,t3_zenjtg,/r/lua/comments/zenjtg/introducing_lunify_a_tool_for_converting_lua/iz8r7j9/,1,False,1,False,zenjtg,lua,t5_2qjla
778,Frityet5,"Belive it or not, I literally just needed this tool, thank you so much","<div class=""md""><p>Belive it or not, I literally just needed this tool, thank you so much</p>
</div>",1670424129.0,,False,iz9o785,False,t3_zenjtg,t3_zenjtg,/r/lua/comments/zenjtg/introducing_lunify_a_tool_for_converting_lua/iz9o785/,1,False,1,False,zenjtg,lua,t5_2qjla
779,vE5li,Thank you :),"<div class=""md""><p>Thank you :)</p>
</div>",1670406082.0,,False,iz8w80n,True,t3_zenjtg,t1_iz8r7j9,/r/lua/comments/zenjtg/introducing_lunify_a_tool_for_converting_lua/iz8w80n/,0,False,1,False,zenjtg,lua,t5_2qjla
780,vE5li,I'm very happy to hear that \^\^,"<div class=""md""><p>I&#39;m very happy to hear that ^^</p>
</div>",1670430745.0,,False,iza4564,True,t3_zenjtg,t1_iz9o785,/r/lua/comments/zenjtg/introducing_lunify_a_tool_for_converting_lua/iza4564/,1,False,1,False,zenjtg,lua,t5_2qjla
781,Frityet5,Is lua 5.4 support planned,"<div class=""md""><p>Is lua 5.4 support planned</p>
</div>",1670431079.0,,False,iza4zi9,False,t3_zenjtg,t1_iza4564,/r/lua/comments/zenjtg/introducing_lunify_a_tool_for_converting_lua/iza4zi9/,1,False,1,False,zenjtg,lua,t5_2qjla
782,vE5li,"I would like to support all versions of Lua >= 5.0 but it depends heavily on if it is actually possible. I saw that in Lua 5.2 the SETGLOBAL and GETGLOBAL instructions were removed, which might mean that upcasting is not possible. I will definitely look into it though","<div class=""md""><p>I would like to support all versions of Lua &gt;= 5.0 but it depends heavily on if it is actually possible. I saw that in Lua 5.2 the SETGLOBAL and GETGLOBAL instructions were removed, which might mean that upcasting is not possible. I will definitely look into it though</p>
</div>",1670431468.0,,False,iza5yls,True,t3_zenjtg,t1_iza4zi9,/r/lua/comments/zenjtg/introducing_lunify_a_tool_for_converting_lua/iza5yls/,1,False,1,False,zenjtg,lua,t5_2qjla
783,weregod,Can't you translate them into SETTABUP _ENV and GETTABUP _ENV?,"<div class=""md""><p>Can&#39;t you translate them into SETTABUP _ENV and GETTABUP _ENV?</p>
</div>",1670512918.0,,False,izel4gh,False,t3_zenjtg,t1_iza5yls,/r/lua/comments/zenjtg/introducing_lunify_a_tool_for_converting_lua/izel4gh/,1,False,1,False,zenjtg,lua,t5_2qjla
784,vE5li,"Possible, I haven't looked into it too much yet. Where exactly is _ENV stored?","<div class=""md""><p>Possible, I haven&#39;t looked into it too much yet. Where exactly is _ENV stored?</p>
</div>",1670518559.0,,False,izez83j,True,t3_zenjtg,t1_izel4gh,/r/lua/comments/zenjtg/introducing_lunify_a_tool_for_converting_lua/izez83j/,1,False,1,False,zenjtg,lua,t5_2qjla
785,weregod,"_ENV stored in Registry at LUA_RIDX_GLOBALS.

Functions get it as first upvalue.

In 5.1 _ENV equivalent is getfenv(1)","<div class=""md""><p>_ENV stored in Registry at LUA_RIDX_GLOBALS.</p>

<p>Functions get it as first upvalue.</p>

<p>In 5.1 _ENV equivalent is getfenv(1)</p>
</div>",1670519432.0,,1670519701.0,izf1h6n,False,t3_zenjtg,t1_izez83j,/r/lua/comments/zenjtg/introducing_lunify_a_tool_for_converting_lua/izf1h6n/,1,False,1,False,zenjtg,lua,t5_2qjla
786,vE5li,"Thanks! Seems doable then, just have to shift all upvalues up by one","<div class=""md""><p>Thanks! Seems doable then, just have to shift all upvalues up by one</p>
</div>",1670520130.0,,False,izf3bvo,True,t3_zenjtg,t1_izf1h6n,/r/lua/comments/zenjtg/introducing_lunify_a_tool_for_converting_lua/izf3bvo/,0,False,1,False,zenjtg,lua,t5_2qjla
787,bwicesoldier,"Hah, I guess it's an example of the subset of C that the Lua devs let themselves use. You really can use Lua anywhere you can bring a C compiler. *Any* C compiler.","<div class=""md""><p>Hah, I guess it&#39;s an example of the subset of C that the Lua devs let themselves use. You really can use Lua anywhere you can bring a C compiler. <em>Any</em> C compiler.</p>
</div>",1391088652.0,,False,cf2nwhq,False,t3_1wjois,t3_1wjois,/r/lua/comments/1wjois/compiling_lua_52_with_turbo_c_10_1990_just_works/cf2nwhq/,0,False,7,False,1wjois,lua,t5_2qjla
788,Erendir,"From Lua FAQ:

What do I need to build Lua?

Lua is implemented in pure ANSI C and compiles unmodified in all known platforms. All you need to build Lua is an ANSI C compiler (gcc is a popular one). Lua also compiles cleanly as C++. ","<div class=""md""><p>From Lua FAQ:</p>

<p>What do I need to build Lua?</p>

<p>Lua is implemented in pure ANSI C and compiles unmodified in all known platforms. All you need to build Lua is an ANSI C compiler (gcc is a popular one). Lua also compiles cleanly as C++. </p>
</div>",1391089478.0,,False,cf2o44p,False,t3_1wjois,t3_1wjois,/r/lua/comments/1wjois/compiling_lua_52_with_turbo_c_10_1990_just_works/cf2o44p/,0,False,7,False,1wjois,lua,t5_2qjla
789,encabule,And why the hell wouldn't it? :),"<div class=""md""><p>And why the hell wouldn&#39;t it? :)</p>
</div>",1391117694.0,,False,cf312c3,False,t3_1wjois,t3_1wjois,/r/lua/comments/1wjois/compiling_lua_52_with_turbo_c_10_1990_just_works/cf312c3/,0,False,1,False,1wjois,lua,t5_2qjla
790,DarkWiiPlayer,"Isn't LuaJIT 2.1 the one that everyone uses by now? Also why not write more stuff in Lua, so it could be used without the interface?

To be honest, I was getting somewhat excited after reading the title, but after seeing it's all cpp, I am just disappointed.

EDIT: If you want to salvage it, maybe split the assembler and disassembler into a shared library and write some Lua bindings for it, so it can be used both through the GUI and from scripts.

EDIT2: Minor nitpick, but `_VERSION` should return ""Lua 5.1"", not ""TestVM""","<div class=""md""><p>Isn&#39;t LuaJIT 2.1 the one that everyone uses by now? Also why not write more stuff in Lua, so it could be used without the interface?</p>

<p>To be honest, I was getting somewhat excited after reading the title, but after seeing it&#39;s all cpp, I am just disappointed.</p>

<p>EDIT: If you want to salvage it, maybe split the assembler and disassembler into a shared library and write some Lua bindings for it, so it can be used both through the GUI and from scripts.</p>

<p>EDIT2: Minor nitpick, but <code>_VERSION</code> should return &quot;Lua 5.1&quot;, not &quot;TestVM&quot;</p>
</div>",1573327898.0,,1573328110.0,f70fqyo,False,t3_dtzxjx,t3_dtzxjx,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f70fqyo/,2,False,-1,False,dtzxjx,lua,t5_2qjla
791,suhcoR,"If you know ""what everyone uses"" then you're obviously a much wiser man than I am. [http://luajit.org/status.html](http://luajit.org/status.html) states ""LuaJIT 2.0 is the current stable branch."" I also recommend that you spend your own spare time to implement your specific requirements. That's what Open Source is all about.","<div class=""md""><p>If you know &quot;what everyone uses&quot; then you&#39;re obviously a much wiser man than I am. <a href=""http://luajit.org/status.html"">http://luajit.org/status.html</a> states &quot;LuaJIT 2.0 is the current stable branch.&quot; I also recommend that you spend your own spare time to implement your specific requirements. That&#39;s what Open Source is all about.</p>
</div>",1573383457.0,,False,f72wsy1,True,t3_dtzxjx,t1_f70fqyo,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f72wsy1/,1,False,5,False,dtzxjx,lua,t5_2qjla
792,bonfire_processor,"To my understanding the goal of his tool is to help understanding luajit Bytecode. He also is writing an Oberon to LuaJit compiler. So LjTools serve as a learning aid, and for this purpose a GUI to play with is much more useful than scriptability. You seem to have very different requirements or expectations to a LuaJit Assembler/Disassembler, but to be fair, it is not his fault to not fulfill your individual expectations.","<div class=""md""><p>To my understanding the goal of his tool is to help understanding luajit Bytecode. He also is writing an Oberon to LuaJit compiler. So LjTools serve as a learning aid, and for this purpose a GUI to play with is much more useful than scriptability. You seem to have very different requirements or expectations to a LuaJit Assembler/Disassembler, but to be fair, it is not his fault to not fulfill your individual expectations.</p>
</div>",1573632458.0,,False,f7dvsv0,False,t3_dtzxjx,t1_f70fqyo,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f7dvsv0/,1,False,3,False,dtzxjx,lua,t5_2qjla
793,DarkWiiPlayer,"Hey, you're the one that posted this on the internet.

> If you know ""what everyone uses""

Sure, that's why I wrote it as a question. Instead of getting defensive, maybe read my message before answering.

LuaJIT 2.1 is officially still in beta, but with Mike Pall basically gone, it will most likely stay like that, and 2.0 will remain as the ""stable"" version. OpenResty and Tarantool both use LuaJIT 2.1, love2d and terra use 2.0 instead. On a recent Ubuntu, running `apt install luajit` installs 2.1, but on my somewhat old (18.3) linux mint, I still get 2.0.

So yeah, it seems to be kind of balanced, but 2.1 is certainly being widely used already.

> I also recommend that you spend your own spare time to implement your specific requirements. That's what Open Source is all about.

Okay, done. I just implemented all my 0 requirements. That doesn't address my point though; I think a project like yours should have some sort of CLI API or even Lua bindings. I might even care to use it if it had those features, but I'm really saying this mostly because I expect other people to actually need something like that. Personally, I'm more than happy with `luajit -b -l <source.lua>` when I want to figure out what my code gets compiled to and the best part is, that even works for the platforms I actually care about (aka. openresty and tarantool, which both use 2.1).

EDIT: What was even the point of your reply anyway? were you upset that I don't care all that much about your project? or do you just not like it when people suggest improvements? If so, maybe you should add a message saying ""Only positive feedback welcome"" the next time you post something.

EDIT2: Oh, but maybe it helps you if I tell you your code looks absolutely horrendous. Like, seriously, what happened here?

    {
        out << ""CALL"";
        bc.d_cd--;
        if( bc.d_b >= 1 )
            bc.d_b = bc.d_b - 1;
        else if( bc.d_b == 0 ) // Operand B is zero for calls which return all results; modify to 1 return here
        {
            warning = ""original second argument is MULTRES (not supported)"";
            bc.d_b = 1;
        }
        if( bc.d_b == 0 && bc.d_cd == 0 )
        {
            bc.d_tb = JitBytecode::Instruction::Unused;
            bc.d_tcd = JitBytecode::Instruction::Unused;
        }else if( bc.d_cd == 0 )
            bc.d_tcd = JitBytecode::Instruction::Unused;
    }

Did you sneeze while typing that, or was that just before you had your morning coffee?","<div class=""md""><p>Hey, you&#39;re the one that posted this on the internet.</p>

<blockquote>
<p>If you know &quot;what everyone uses&quot;</p>
</blockquote>

<p>Sure, that&#39;s why I wrote it as a question. Instead of getting defensive, maybe read my message before answering.</p>

<p>LuaJIT 2.1 is officially still in beta, but with Mike Pall basically gone, it will most likely stay like that, and 2.0 will remain as the &quot;stable&quot; version. OpenResty and Tarantool both use LuaJIT 2.1, love2d and terra use 2.0 instead. On a recent Ubuntu, running <code>apt install luajit</code> installs 2.1, but on my somewhat old (18.3) linux mint, I still get 2.0.</p>

<p>So yeah, it seems to be kind of balanced, but 2.1 is certainly being widely used already.</p>

<blockquote>
<p>I also recommend that you spend your own spare time to implement your specific requirements. That&#39;s what Open Source is all about.</p>
</blockquote>

<p>Okay, done. I just implemented all my 0 requirements. That doesn&#39;t address my point though; I think a project like yours should have some sort of CLI API or even Lua bindings. I might even care to use it if it had those features, but I&#39;m really saying this mostly because I expect other people to actually need something like that. Personally, I&#39;m more than happy with <code>luajit -b -l &lt;source.lua&gt;</code> when I want to figure out what my code gets compiled to and the best part is, that even works for the platforms I actually care about (aka. openresty and tarantool, which both use 2.1).</p>

<p>EDIT: What was even the point of your reply anyway? were you upset that I don&#39;t care all that much about your project? or do you just not like it when people suggest improvements? If so, maybe you should add a message saying &quot;Only positive feedback welcome&quot; the next time you post something.</p>

<p>EDIT2: Oh, but maybe it helps you if I tell you your code looks absolutely horrendous. Like, seriously, what happened here?</p>

<pre><code>{
    out &lt;&lt; &quot;CALL&quot;;
    bc.d_cd--;
    if( bc.d_b &gt;= 1 )
        bc.d_b = bc.d_b - 1;
    else if( bc.d_b == 0 ) // Operand B is zero for calls which return all results; modify to 1 return here
    {
        warning = &quot;original second argument is MULTRES (not supported)&quot;;
        bc.d_b = 1;
    }
    if( bc.d_b == 0 &amp;&amp; bc.d_cd == 0 )
    {
        bc.d_tb = JitBytecode::Instruction::Unused;
        bc.d_tcd = JitBytecode::Instruction::Unused;
    }else if( bc.d_cd == 0 )
        bc.d_tcd = JitBytecode::Instruction::Unused;
}
</code></pre>

<p>Did you sneeze while typing that, or was that just before you had your morning coffee?</p>
</div>",1573490285.0,,1573490680.0,f78c49c,False,t3_dtzxjx,t1_f72wsy1,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f78c49c/,1,False,-1,False,dtzxjx,lua,t5_2qjla
794,DarkWiiPlayer,"You see, that's a very good point and I wonder why OP didn't make it.

Though, if I was to nitpick for the sake of nitpicking, I still think a command-line interface would have been beneficial because it'd allow integration into more editors and IDEs (like vim, for example).

As it stands, the project seems very much centered around one intended workflow (windows style) instead of providing the necessary tools for each user to assemble their own prefered workflow (unix style).","<div class=""md""><p>You see, that&#39;s a very good point and I wonder why OP didn&#39;t make it.</p>

<p>Though, if I was to nitpick for the sake of nitpicking, I still think a command-line interface would have been beneficial because it&#39;d allow integration into more editors and IDEs (like vim, for example).</p>

<p>As it stands, the project seems very much centered around one intended workflow (windows style) instead of providing the necessary tools for each user to assemble their own prefered workflow (unix style).</p>
</div>",1573649015.0,,False,f7e71or,False,t3_dtzxjx,t1_f7dvsv0,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f7e71or/,1,False,-2,False,dtzxjx,lua,t5_2qjla
795,suhcoR,It's C++. There are many good books in case you want to learn it. But you have to be patient. It usually takes a couple of years to master the language.,"<div class=""md""><p>It&#39;s C++. There are many good books in case you want to learn it. But you have to be patient. It usually takes a couple of years to master the language.</p>
</div>",1573509265.0,,False,f79lc51,True,t3_dtzxjx,t1_f78c49c,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f79lc51/,1,False,3,False,dtzxjx,lua,t5_2qjla
796,bonfire_processor,"Well, if you look at the other repos of Rochus (the OP...)  you can see that he has other tools in this style. So he seems to like to wrap GUIs around his tools. I think it is a refreshing alternative approach to all the cryptic command line tools out there. 

I'm happy when somebody shares his/her work, but people may stop doing it, when others criticize them for the work not fulfilling their exceptions.  It is also a difference if you ask politely (e.g. do you think it is reasonable to isolate the backend as a library?) instead of ""complaining"".

What really find absurd was the conversation of both of you about his C++ coding style.  I have noticed you as some valuable contributor in this subreddit and Rochus ( [http://rochus-keller.info/?page\_id=17](http://rochus-keller.info/?page_id=17) ) looks like an experienced software professional.  The interaction of both of you was a bit childish. 

Albeit I didn't understood it. Yes, when you look at this code snippet without context its purpose is not clear. But   this comes clearly from the lack of context. At least somebody has to look into the type declaration of variable ""bc"" to understand the data structure on which it operates.  I find also his formatting reasonable, in languages which have no elseif statement I also often write ""else if"" in one line behind the closing }.

BTW, as we are in r/lua:

I also often dig into the  PUC-Rio  lua source code. It is also often not easy to understand, dense and sparse in comments. Many of the Lua API ""functions"" are macros in reality  which does not make understanding the code easier and can also lead to very cryptic compiler error messages when you do something wrong.

There are also a few cases where the macro expansion lead to code which is ""undefined behavior"" in respect to ANSI C.","<div class=""md""><p>Well, if you look at the other repos of Rochus (the OP...)  you can see that he has other tools in this style. So he seems to like to wrap GUIs around his tools. I think it is a refreshing alternative approach to all the cryptic command line tools out there. </p>

<p>I&#39;m happy when somebody shares his/her work, but people may stop doing it, when others criticize them for the work not fulfilling their exceptions.  It is also a difference if you ask politely (e.g. do you think it is reasonable to isolate the backend as a library?) instead of &quot;complaining&quot;.</p>

<p>What really find absurd was the conversation of both of you about his C++ coding style.  I have noticed you as some valuable contributor in this subreddit and Rochus ( <a href=""http://rochus-keller.info/?page_id=17"">http://rochus-keller.info/?page_id=17</a> ) looks like an experienced software professional.  The interaction of both of you was a bit childish. </p>

<p>Albeit I didn&#39;t understood it. Yes, when you look at this code snippet without context its purpose is not clear. But   this comes clearly from the lack of context. At least somebody has to look into the type declaration of variable &quot;bc&quot; to understand the data structure on which it operates.  I find also his formatting reasonable, in languages which have no elseif statement I also often write &quot;else if&quot; in one line behind the closing }.</p>

<p>BTW, as we are in <a href=""/r/lua"">r/lua</a>:</p>

<p>I also often dig into the  PUC-Rio  lua source code. It is also often not easy to understand, dense and sparse in comments. Many of the Lua API &quot;functions&quot; are macros in reality  which does not make understanding the code easier and can also lead to very cryptic compiler error messages when you do something wrong.</p>

<p>There are also a few cases where the macro expansion lead to code which is &quot;undefined behavior&quot; in respect to ANSI C.</p>
</div>",1573660035.0,,False,f7ekzad,False,t3_dtzxjx,t1_f7e71or,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f7ekzad/,1,False,1,False,dtzxjx,lua,t5_2qjla
797,DarkWiiPlayer,"Well, it might be valid C++ syntax, but that's about as far as I'd go. Here, maybe [this](https://www.kernel.org/doc/html/v4.10/process/coding-style.html) or [this](http://suckless.org/coding_style/) helps you write more readable code.

Honestly, when your codebase looks like this

    }else if( bc.d_cd == 0 )

I don't know why anybody would want to contribute. At the very least let one of the three thousand C++ linter tools run over the code to fix the formatting.

Again, maybe stop getting defensive and take some criticism. Or keep on going believing that whatever you write is perfect and all complaints are clearly wrong. See where that takes you.","<div class=""md""><p>Well, it might be valid C++ syntax, but that&#39;s about as far as I&#39;d go. Here, maybe <a href=""https://www.kernel.org/doc/html/v4.10/process/coding-style.html"">this</a> or <a href=""http://suckless.org/coding_style/"">this</a> helps you write more readable code.</p>

<p>Honestly, when your codebase looks like this</p>

<pre><code>}else if( bc.d_cd == 0 )
</code></pre>

<p>I don&#39;t know why anybody would want to contribute. At the very least let one of the three thousand C++ linter tools run over the code to fix the formatting.</p>

<p>Again, maybe stop getting defensive and take some criticism. Or keep on going believing that whatever you write is perfect and all complaints are clearly wrong. See where that takes you.</p>
</div>",1573539528.0,,1573540090.0,f7atg1x,False,t3_dtzxjx,t1_f79lc51,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f7atg1x/,1,False,-1,False,dtzxjx,lua,t5_2qjla
798,DarkWiiPlayer,"I wasn't really complaining about the coding style; I've always considered C to be by far a better language than C++, both in terms of language design and  the typical code you find for each of them, so I'm probably too biased to criticise someone elses program logic written in C++.

However, it's a different situation with formatting, which is what I was actually complaining about. The codebase is filled with ugly constructs ranging from very odd whitespace usage to use braces, and all of those is also very inconsistent (tabs on one line, spaces on the next one, etc.).

I haven't exactly studied the PUC Lua codebase inside out, but I've searched through it quite a few times to answer questions about Luas precise behavior in certain cases, and I've always found what I was looking for rather quickly. As a system language it's obviously harder to read than Lua or Javascript code, but it's still very easy to understand (I can't say the same about OPs code base, but again, that may just be my bias as a C++ hater).","<div class=""md""><p>I wasn&#39;t really complaining about the coding style; I&#39;ve always considered C to be by far a better language than C++, both in terms of language design and  the typical code you find for each of them, so I&#39;m probably too biased to criticise someone elses program logic written in C++.</p>

<p>However, it&#39;s a different situation with formatting, which is what I was actually complaining about. The codebase is filled with ugly constructs ranging from very odd whitespace usage to use braces, and all of those is also very inconsistent (tabs on one line, spaces on the next one, etc.).</p>

<p>I haven&#39;t exactly studied the PUC Lua codebase inside out, but I&#39;ve searched through it quite a few times to answer questions about Luas precise behavior in certain cases, and I&#39;ve always found what I was looking for rather quickly. As a system language it&#39;s obviously harder to read than Lua or Javascript code, but it&#39;s still very easy to understand (I can&#39;t say the same about OPs code base, but again, that may just be my bias as a C++ hater).</p>
</div>",1573662453.0,,False,f7eopup,False,t3_dtzxjx,t1_f7ekzad,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f7eopup/,1,False,-1,False,dtzxjx,lua,t5_2qjla
799,suhcoR,There's no reason to be embarrassed if you don't immediately understand everything. We all started small once.,"<div class=""md""><p>There&#39;s no reason to be embarrassed if you don&#39;t immediately understand everything. We all started small once.</p>
</div>",1573549909.0,,False,f7b14fv,True,t3_dtzxjx,t1_f7atg1x,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f7b14fv/,2,False,5,False,dtzxjx,lua,t5_2qjla
800,bonfire_processor,">  I've always considered C to be by far a better language than C++, both in terms of language design and the typical code you find for each of them, so I'm probably too biased to criticise someone elses program logic written in C++. 

I can understand this. I have written a lot of C++ code in the past (around 1995-2003). Early C++ was a nice extension to C for object oriented programming. Since than C++ has grown a lot in complexity and the extensive use of generics in some C++ code did not increase readability. 

I have now 30 years of programming experience in a lot of languages, and my personal resume is: The language doesn't matter much regarding productivity as long as there is no severe mismatch between the type of problem and the domain of the language. I don't like languages which accumulate a lot of bloat and competing concepts (e.g. promises **and** async/await). Nevertheless it is possible to write readable code in most languages with some discipline. 

> The codebase is filled with ugly constructs ranging from very odd whitespace usage to use braces, and all of those is also very inconsistent (tabs on one line, spaces on the next one, etc.). 

Than you also would not like my code. I have also often problems with consistency. Partly because I switch to often between different languages, editors, projects. Partly because I think more about the solution and forget about conventions, etc. It also does not work well, when I try do adapt to the coding style of someones code base. 

One of the worst examples is the boot monitor of my RISC-V FPGA processor project. The boot monitor started as test program to test e.g.  the cpu core, memory, etc. Than it evolved over time into the boot monitor. Nevertheless it is neither complex nor big, so I think it can stay in this ugly state forever :-)

tabs vs. spaces and ""trailing white space"" are unfortunately often a problem of editors, I'm also often struggling with wrong formatting slipping through.","<div class=""md""><blockquote>
<p>I&#39;ve always considered C to be by far a better language than C++, both in terms of language design and the typical code you find for each of them, so I&#39;m probably too biased to criticise someone elses program logic written in C++. </p>
</blockquote>

<p>I can understand this. I have written a lot of C++ code in the past (around 1995-2003). Early C++ was a nice extension to C for object oriented programming. Since than C++ has grown a lot in complexity and the extensive use of generics in some C++ code did not increase readability. </p>

<p>I have now 30 years of programming experience in a lot of languages, and my personal resume is: The language doesn&#39;t matter much regarding productivity as long as there is no severe mismatch between the type of problem and the domain of the language. I don&#39;t like languages which accumulate a lot of bloat and competing concepts (e.g. promises <strong>and</strong> async/await). Nevertheless it is possible to write readable code in most languages with some discipline. </p>

<blockquote>
<p>The codebase is filled with ugly constructs ranging from very odd whitespace usage to use braces, and all of those is also very inconsistent (tabs on one line, spaces on the next one, etc.). </p>
</blockquote>

<p>Than you also would not like my code. I have also often problems with consistency. Partly because I switch to often between different languages, editors, projects. Partly because I think more about the solution and forget about conventions, etc. It also does not work well, when I try do adapt to the coding style of someones code base. </p>

<p>One of the worst examples is the boot monitor of my RISC-V FPGA processor project. The boot monitor started as test program to test e.g.  the cpu core, memory, etc. Than it evolved over time into the boot monitor. Nevertheless it is neither complex nor big, so I think it can stay in this ugly state forever :-)</p>

<p>tabs vs. spaces and &quot;trailing white space&quot; are unfortunately often a problem of editors, I&#39;m also often struggling with wrong formatting slipping through.</p>
</div>",1573671253.0,,False,f7f2wgb,False,t3_dtzxjx,t1_f7eopup,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f7f2wgb/,0,False,1,False,dtzxjx,lua,t5_2qjla
801,DarkWiiPlayer,"What, now you're falling back to the kind of insults you'd expect from a middle schooler? Damn, you sure deal well with people pointing out flaws in your code. Oh well, sorry for not being impressed. Come talk to me when you can either accept criticism or refute it. So far you've done neither.","<div class=""md""><p>What, now you&#39;re falling back to the kind of insults you&#39;d expect from a middle schooler? Damn, you sure deal well with people pointing out flaws in your code. Oh well, sorry for not being impressed. Come talk to me when you can either accept criticism or refute it. So far you&#39;ve done neither.</p>
</div>",1573550183.0,,False,f7b1ap0,False,t3_dtzxjx,t1_f7b14fv,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f7b1ap0/,0,False,0,False,dtzxjx,lua,t5_2qjla
802,,HAHAHAHA WHAT KIND OF RESPONSE IS THAT YOU LOOK LIKE A 5 YEAR OLD LMAO,"<div class=""md""><p>HAHAHAHA WHAT KIND OF RESPONSE IS THAT YOU LOOK LIKE A 5 YEAR OLD LMAO</p>
</div>",1573724929.0,,False,f7gyt53,False,t3_dtzxjx,t1_f7b14fv,/r/lua/comments/dtzxjx/new_luajit_assemblerassembly_language_for_direct/f7gyt53/,0,False,-2,False,dtzxjx,lua,t5_2qjla
803,,"I've gotta say, as much as proggit hates on blogs, sometimes it'd be nice to have some more lua discussion. I kinda wish the comment threads 'round these parts were more... existent. Because, in the end, even if a lot of it is people saying random stuff that doesn't matter, that stuff that doesn't matter can lead to useful discussion. Hell, that's the entire *premise* of reddit, and that's why it works despite the puns.

I think that's kind of what's missing from lua-l and Lua in general, which is kinda funny. Remember how scientists discovered that junk DNA was useful even though it didn't code anything?

'course, I'm high, so let there be grains of salt.","<div class=""md""><p>I&#39;ve gotta say, as much as proggit hates on blogs, sometimes it&#39;d be nice to have some more lua discussion. I kinda wish the comment threads &#39;round these parts were more... existent. Because, in the end, even if a lot of it is people saying random stuff that doesn&#39;t matter, that stuff that doesn&#39;t matter can lead to useful discussion. Hell, that&#39;s the entire <em>premise</em> of reddit, and that&#39;s why it works despite the puns.</p>

<p>I think that&#39;s kind of what&#39;s missing from lua-l and Lua in general, which is kinda funny. Remember how scientists discovered that junk DNA was useful even though it didn&#39;t code anything?</p>

<p>&#39;course, I&#39;m high, so let there be grains of salt.</p>
</div>",1266822197.0,,False,c0kz8pf,False,t3_b4pz6,t3_b4pz6,/r/lua/comments/b4pz6/the_first_rule_of_lua_followup_to_why_nobody/c0kz8pf/,1,False,4,False,b4pz6,lua,t5_2qjla
804,,"I'm just starting (read: Actually doing more than a ""Hello World"" program) programming for the first time since I sat down and thought I could teach myself C++ overnight. I've been having a lot of fun with Lua because it was easy to pickup and seems to do everything I would want it to do.

I see the power of the language and was very surprised to see that there wasn't a mass of comments going on about Lua. I remember the Ruby hype that went on forever (might still be), and was just surprised to see the Lua community appear nearly dead because no one was posting anything.

Oh well, work tomorrow. G2G","<div class=""md""><p>I&#39;m just starting (read: Actually doing more than a &quot;Hello World&quot; program) programming for the first time since I sat down and thought I could teach myself C++ overnight. I&#39;ve been having a lot of fun with Lua because it was easy to pickup and seems to do everything I would want it to do.</p>

<p>I see the power of the language and was very surprised to see that there wasn&#39;t a mass of comments going on about Lua. I remember the Ruby hype that went on forever (might still be), and was just surprised to see the Lua community appear nearly dead because no one was posting anything.</p>

<p>Oh well, work tomorrow. G2G</p>
</div>",1278386791.0,,False,c0tle5i,False,t3_b4pz6,t3_b4pz6,/r/lua/comments/b4pz6/the_first_rule_of_lua_followup_to_why_nobody/c0tle5i/,0,False,1,False,b4pz6,lua,t5_2qjla
805,inmatarian,I would be content to more posts in /r/lua,"<div class=""md""><p>I would be content to more posts in <a href=""/r/lua"">/r/lua</a></p>
</div>",1266855479.0,,False,c0kzs7z,False,t3_b4pz6,t1_c0kz8pf,/r/lua/comments/b4pz6/the_first_rule_of_lua_followup_to_why_nobody/c0kzs7z/,0,False,5,False,b4pz6,lua,t5_2qjla
806,AdamNejm,How did you manage to capture an infinite amount of time it would take to draw the fractal in a 2 second video? ;o,"<div class=""md""><p>How did you manage to capture an infinite amount of time it would take to draw the fractal in a 2 second video? ;o</p>
</div>",1596047797.0,,False,fzna7kh,False,t3_i05sdj,t3_i05sdj,/r/lua/comments/i05sdj/turtlelua_turtle_graphics_module_written_in_lua/fzna7kh/,1,False,5,False,i05sdj,lua,t5_2qjla
807,__arthure,Source code : [https://github.com/arthurealike/turtle.lua](https://github.com/arthurealike/turtle.lua),"<div class=""md""><p>Source code : <a href=""https://github.com/arthurealike/turtle.lua"">https://github.com/arthurealike/turtle.lua</a></p>
</div>",1596047336.0,,False,fzn98ow,True,t3_i05sdj,t3_i05sdj,/r/lua/comments/i05sdj/turtlelua_turtle_graphics_module_written_in_lua/fzn98ow/,0,False,3,False,i05sdj,lua,t5_2qjla
808,snow-blade,"wow, cool i'll use this to teach programming to my little brother, btw, can i contribute to this, it seems interesting ?","<div class=""md""><p>wow, cool i&#39;ll use this to teach programming to my little brother, btw, can i contribute to this, it seems interesting ?</p>
</div>",1596054903.0,,False,fznp8n9,False,t3_i05sdj,t3_i05sdj,/r/lua/comments/i05sdj/turtlelua_turtle_graphics_module_written_in_lua/fznp8n9/,2,False,1,False,i05sdj,lua,t5_2qjla
809,__arthure,"I shared source code. Give it a star if you are interested in and you can check main.lua to understand how i managed to draw koch's snowflake. Snowflake takes step count as an argument, every step adds complexity but it is limited, so number of lines that compose our snowflake is not infinite, it is fixed.

Check it out for better understanding.

[http://www.math.ubc.ca/\~cass/courses/m308/projects/fung/page.html#:\~:text=the%20Koch%20Curve.-,The%20Koch%20Snowflake,creating%20a%20%22snowflake%22%20shape.](http://www.math.ubc.ca/~cass/courses/m308/projects/fung/page.html#:~:text=the%20Koch%20Curve.-,The%20Koch%20Snowflake,creating%20a%20%22snowflake%22%20shape.)","<div class=""md""><p>I shared source code. Give it a star if you are interested in and you can check main.lua to understand how i managed to draw koch&#39;s snowflake. Snowflake takes step count as an argument, every step adds complexity but it is limited, so number of lines that compose our snowflake is not infinite, it is fixed.</p>

<p>Check it out for better understanding.</p>

<p><a href=""http://www.math.ubc.ca/%7Ecass/courses/m308/projects/fung/page.html#:%7E:text=the%20Koch%20Curve.-,The%20Koch%20Snowflake,creating%20a%20%22snowflake%22%20shape."">http://www.math.ubc.ca/~cass/courses/m308/projects/fung/page.html#:~:text=the%20Koch%20Curve.-,The%20Koch%20Snowflake,creating%20a%20%22snowflake%22%20shape.</a></p>
</div>",1596054636.0,,False,fznoojm,True,t3_i05sdj,t1_fzna7kh,/r/lua/comments/i05sdj/turtlelua_turtle_graphics_module_written_in_lua/fznoojm/,0,False,1,False,i05sdj,lua,t5_2qjla
810,__arthure,"Feel free to contribute, fork your own copy then send pull request :)","<div class=""md""><p>Feel free to contribute, fork your own copy then send pull request :)</p>
</div>",1596055228.0,,False,fznpx89,True,t3_i05sdj,t1_fznp8n9,/r/lua/comments/i05sdj/turtlelua_turtle_graphics_module_written_in_lua/fznpx89/,0,False,1,False,i05sdj,lua,t5_2qjla
811,__arthure,"I see that you are a wonderkid and also interested in vim. Check my .vimrc file, it saves a lot time when working on love2d.

[https://github.com/arthurealike/vimconfig](https://github.com/arthurealike/vimconfig)","<div class=""md""><p>I see that you are a wonderkid and also interested in vim. Check my .vimrc file, it saves a lot time when working on love2d.</p>

<p><a href=""https://github.com/arthurealike/vimconfig"">https://github.com/arthurealike/vimconfig</a></p>
</div>",1596056597.0,,False,fznsqge,True,t3_i05sdj,t1_fznp8n9,/r/lua/comments/i05sdj/turtlelua_turtle_graphics_module_written_in_lua/fznsqge/,0,False,-1,False,i05sdj,lua,t5_2qjla
812,,"Ruby implementation in Lua, anyone?","<div class=""md""><p>Ruby implementation in Lua, anyone?</p>
</div>",1381100635.0,,False,ccme1of,False,t3_1nvcbi,t3_1nvcbi,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccme1of/,1,False,3,False,1nvcbi,lua,t5_2qjla
813,dan200,"[Now, run it under LuaJ!](http://sourceforge.net/projects/luaj/)","<div class=""md""><p><a href=""http://sourceforge.net/projects/luaj/"">Now, run it under LuaJ!</a></p>
</div>",1381174531.0,,False,ccmxv6n,False,t3_1nvcbi,t3_1nvcbi,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccmxv6n/,0,False,3,False,1nvcbi,lua,t5_2qjla
814,,"Great job. I especially like this integer benchmarking part, and the fact that original JVM is like 100× (or even more?) times longer than yours.","<div class=""md""><p>Great job. I especially like this integer benchmarking part, and the fact that original JVM is like 100× (or even more?) times longer than yours.</p>
</div>",1381101272.0,,False,ccme9oy,False,t3_1nvcbi,t3_1nvcbi,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccme9oy/,0,False,1,False,1nvcbi,lua,t5_2qjla
815,,Nice. Though I misread and was hoping this was Lua FOR the JVM. I suppose I should not be lazy and see if that already exists...,"<div class=""md""><p>Nice. Though I misread and was hoping this was Lua FOR the JVM. I suppose I should not be lazy and see if that already exists...</p>
</div>",1381151757.0,,False,ccmq2di,False,t3_1nvcbi,t3_1nvcbi,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccmq2di/,1,False,1,False,1nvcbi,lua,t5_2qjla
816,orksliver,Think jruby would work?,"<div class=""md""><p>Think jruby would work?</p>
</div>",1381173180.0,,False,ccmxbsv,False,t3_1nvcbi,t1_ccme1of,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccmxbsv/,1,False,2,False,1nvcbi,lua,t5_2qjla
817,ummwut,"Be the first! Write a program that compiles Lua to Java bytecode.

You may need to figure out a way to implement Lua's table mechanics, but that should be easier than the compiler.","<div class=""md""><p>Be the first! Write a program that compiles Lua to Java bytecode.</p>

<p>You may need to figure out a way to implement Lua&#39;s table mechanics, but that should be easier than the compiler.</p>
</div>",1381183573.0,,False,ccn1lbp,False,t3_1nvcbi,t1_ccmq2di,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccn1lbp/,1,False,2,False,1nvcbi,lua,t5_2qjla
818,,"I mean, I suppose the fastest ever Ruby implementation will be written in Lua.","<div class=""md""><p>I mean, I suppose the fastest ever Ruby implementation will be written in Lua.</p>
</div>",1381930022.0,,False,ccstotu,False,t3_1nvcbi,t1_ccmxbsv,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccstotu/,0,False,1,False,1nvcbi,lua,t5_2qjla
819,brool,That would be a fun weekend project!   But does it have any practical use?,"<div class=""md""><p>That would be a fun weekend project!   But does it have any practical use?</p>
</div>",1382414394.0,,False,ccwvqjz,False,t3_1nvcbi,t1_ccn1lbp,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccwvqjz/,1,False,1,False,1nvcbi,lua,t5_2qjla
820,ummwut,"Well, if you like Lua and dislike java, but appreciate the portability, there you go.","<div class=""md""><p>Well, if you like Lua and dislike java, but appreciate the portability, there you go.</p>
</div>",1382418974.0,,False,ccwx66z,False,t3_1nvcbi,t1_ccwvqjz,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccwx66z/,1,False,1,False,1nvcbi,lua,t5_2qjla
821,brool,"Researched this a bit, and -- it already [already exists!](http://luaj.org/luaj/README.html)","<div class=""md""><p>Researched this a bit, and -- it already <a href=""http://luaj.org/luaj/README.html"">already exists!</a></p>
</div>",1382508060.0,,False,ccxp5bv,False,t3_1nvcbi,t1_ccwx66z,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccxp5bv/,1,False,1,False,1nvcbi,lua,t5_2qjla
822,ummwut,Well that's pretty neat!,"<div class=""md""><p>Well that&#39;s pretty neat!</p>
</div>",1382573828.0,,False,ccy9vpj,False,t3_1nvcbi,t1_ccxp5bv,/r/lua/comments/1nvcbi/luje_a_pure_lua_jvm/ccy9vpj/,0,False,1,False,1nvcbi,lua,t5_2qjla
823,,"While this is an impressive feat, the article overstates it in a misleading way:

> LJR beats the leading fastest Lua, LuaJIT, by around 28%

LJR does not beat LuaJIT by 28%; it only beats LuaJIT *with the JIT disabled*. If you're on a hostile platform like iOS which bans JIT, this is a big deal, but it's still a lot slower than normal LuaJIT.","<div class=""md""><p>While this is an impressive feat, the article overstates it in a misleading way:</p>

<blockquote>
<p>LJR beats the leading fastest Lua, LuaJIT, by around 28%</p>
</blockquote>

<p>LJR does not beat LuaJIT by 28%; it only beats LuaJIT <em>with the JIT disabled</em>. If you&#39;re on a hostile platform like iOS which bans JIT, this is a big deal, but it&#39;s still a lot slower than normal LuaJIT.</p>
</div>",1669515964.0,,False,ixx9gh8,False,t3_z5524j,t3_z5524j,/r/lua/comments/z5524j/reinterpreting_the_lua_interpreter/ixx9gh8/,2,False,7,False,z5524j,lua,t5_2qjla
824,lambda_abstraction,"Given the fact that my normal LuaJIT uses are upon Linux ARM and X86, this makes it not a win in any way.  If the platform is JIT hostile, I'll not really want to code for it anyhow unless someone is paying me very well and is willing to accept the consequences.","<div class=""md""><p>Given the fact that my normal LuaJIT uses are upon Linux ARM and X86, this makes it not a win in any way.  If the platform is JIT hostile, I&#39;ll not really want to code for it anyhow unless someone is paying me very well and is willing to accept the consequences.</p>
</div>",1669553665.0,,False,ixyqsuc,False,t3_z5524j,t1_ixx9gh8,/r/lua/comments/z5524j/reinterpreting_the_lua_interpreter/ixyqsuc/,1,False,2,False,z5524j,lua,t5_2qjla
825,codingai,Interesting. 👌 I somehow missed that. 🤔,"<div class=""md""><p>Interesting. 👌 I somehow missed that. 🤔</p>
</div>",1669516421.0,,False,ixxad2j,True,t3_z5524j,t1_ixx9gh8,/r/lua/comments/z5524j/reinterpreting_the_lua_interpreter/ixxad2j/,0,False,1,False,z5524j,lua,t5_2qjla
826,,"Well, it's a win in that it's a novel new technique that could be applied more broadly. The article goes on to say that it could be the foundation for an even more efficient JIT as well, tho that doesn't yet exist.

It doesn't have to be a competition. Even if it isn't practically useful to everyday Lua users, it's cool to see new techniques developed.","<div class=""md""><p>Well, it&#39;s a win in that it&#39;s a novel new technique that could be applied more broadly. The article goes on to say that it could be the foundation for an even more efficient JIT as well, tho that doesn&#39;t yet exist.</p>

<p>It doesn&#39;t have to be a competition. Even if it isn&#39;t practically useful to everyday Lua users, it&#39;s cool to see new techniques developed.</p>
</div>",1669572095.0,,False,ixztic5,False,t3_z5524j,t1_ixyqsuc,/r/lua/comments/z5524j/reinterpreting_the_lua_interpreter/ixztic5/,1,False,1,False,z5524j,lua,t5_2qjla
827,lambda_abstraction,I'm not seeing it as a competition.  I'm just not seeing it as applicable for me in its current form.  I do tend to view my tools though in terms of what they can do for me today.,"<div class=""md""><p>I&#39;m not seeing it as a competition.  I&#39;m just not seeing it as applicable for me in its current form.  I do tend to view my tools though in terms of what they can do for me today.</p>
</div>",1669578209.0,,1669579653.0,iy08z0v,False,t3_z5524j,t1_ixztic5,/r/lua/comments/z5524j/reinterpreting_the_lua_interpreter/iy08z0v/,0,False,2,False,z5524j,lua,t5_2qjla
828,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1628092988.0,,False,h7owkx6,False,t3_oxojsx,t3_oxojsx,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h7owkx6/,1,False,10,False,oxojsx,lua,t5_2qjla
829,,Love this site,"<div class=""md""><p>Love this site</p>
</div>",1628083655.0,,False,h7ob7sp,False,t3_oxojsx,t3_oxojsx,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h7ob7sp/,0,False,7,False,oxojsx,lua,t5_2qjla
830,claudi_m,Just wanted to thank with a meme the Lua demo site creators for such a useful tool.,"<div class=""md""><p>Just wanted to thank with a meme the Lua demo site creators for such a useful tool.</p>
</div>",1628067343.0,,False,h7nnthy,True,t3_oxojsx,t3_oxojsx,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h7nnthy/,1,False,7,False,oxojsx,lua,t5_2qjla
831,ElNico5,"or [TiO](https://tio.run/#lua), or [CodingGround](https://www.tutorialspoint.com/execute_lua_online.php)","<div class=""md""><p>or <a href=""https://tio.run/#lua"">TiO</a>, or <a href=""https://www.tutorialspoint.com/execute_lua_online.php"">CodingGround</a></p>
</div>",1628088838.0,,False,h7ommyu,False,t3_oxojsx,t3_oxojsx,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h7ommyu/,0,False,1,False,oxojsx,lua,t5_2qjla
832,lambda_abstraction,Lua demolisher?  But I don't have a web site.,"<div class=""md""><p>Lua demolisher?  But I don&#39;t have a web site.</p>
</div>",1628453549.0,,False,h87fsnz,False,t3_oxojsx,t3_oxojsx,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h87fsnz/,0,False,1,False,oxojsx,lua,t5_2qjla
833,--im-not-creative--,Hehehehe,"<div class=""md""><p>Hehehehe</p>
</div>",1628113322.0,,False,h7q9daj,False,t3_oxojsx,t1_h7owkx6,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h7q9daj/,0,False,3,False,oxojsx,lua,t5_2qjla
834,ws-ilazki,"That's such a bare-bones and barely usable Lua interpreter, though.  Basically *anything else* would be better than that insultingly bad option; why would you choose *that* instead of just running the Lua interpreter on your own system?  

Or better yet, use [iLua](https://github.com/guysv/ilua) for a much nicer interactive experience. Or set up a Jupyter kernel so you can have a persistent testing ground for Lua stuff.  Or use [repl.it](https://repl.it), which can do both plain Lua and Love2d REPLs.","<div class=""md""><p>That&#39;s such a bare-bones and barely usable Lua interpreter, though.  Basically <em>anything else</em> would be better than that insultingly bad option; why would you choose <em>that</em> instead of just running the Lua interpreter on your own system?  </p>

<p>Or better yet, use <a href=""https://github.com/guysv/ilua"">iLua</a> for a much nicer interactive experience. Or set up a Jupyter kernel so you can have a persistent testing ground for Lua stuff.  Or use <a href=""https://repl.it"">repl.it</a>, which can do both plain Lua and Love2d REPLs.</p>
</div>",1628070216.0,,False,h7nr03k,False,t3_oxojsx,t1_h7nnthy,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h7nr03k/,1,False,6,False,oxojsx,lua,t5_2qjla
835,claudi_m,"Because I just want Lua for using it as a statically linked library in a bigger project; I don't have any interpreter installed on my machine. On the other hand, Lua demo site is faster to load and to type code in and test than repl.it. Again, I use it for simple snippets such as matching string patterns or performing substitutions, among other simple scripts.","<div class=""md""><p>Because I just want Lua for using it as a statically linked library in a bigger project; I don&#39;t have any interpreter installed on my machine. On the other hand, Lua demo site is faster to load and to type code in and test than repl.it. Again, I use it for simple snippets such as matching string patterns or performing substitutions, among other simple scripts.</p>
</div>",1628074260.0,,False,h7nvvhh,True,t3_oxojsx,t1_h7nr03k,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h7nvvhh/,2,False,3,False,oxojsx,lua,t5_2qjla
836,ws-ilazki,"> Because I just want Lua for using it as a statically linked library in a bigger project; I don't have any interpreter installed on my machine.

That doesn't make sense, why should how you're using it in your project determine whether or not you can have the interpreter installed?  Just install it and run it, it would be easier, and you could leave it running that way so it's always there waiting to try out some new code snippet.  Is this some Windows-user ""I am afraid of the command line"" kind of thing where you'd rather make things harder on yourself just to avoid a terminal prompt with a REPL?

I guess it doesn't matter really, if checking your code with that horrible demo page works for you and you're happy it's not a big deal whether it makes sense or not.  But damn, it's such an easy thing to set up and do, especially since you can do it in WSL with a single command and not even have to deal with any Windows-specific installation weirdness; and you have the benefit of not sending your code to some unknown third party, so you can test potentially sensitive stuff as well.","<div class=""md""><blockquote>
<p>Because I just want Lua for using it as a statically linked library in a bigger project; I don&#39;t have any interpreter installed on my machine.</p>
</blockquote>

<p>That doesn&#39;t make sense, why should how you&#39;re using it in your project determine whether or not you can have the interpreter installed?  Just install it and run it, it would be easier, and you could leave it running that way so it&#39;s always there waiting to try out some new code snippet.  Is this some Windows-user &quot;I am afraid of the command line&quot; kind of thing where you&#39;d rather make things harder on yourself just to avoid a terminal prompt with a REPL?</p>

<p>I guess it doesn&#39;t matter really, if checking your code with that horrible demo page works for you and you&#39;re happy it&#39;s not a big deal whether it makes sense or not.  But damn, it&#39;s such an easy thing to set up and do, especially since you can do it in WSL with a single command and not even have to deal with any Windows-specific installation weirdness; and you have the benefit of not sending your code to some unknown third party, so you can test potentially sensitive stuff as well.</p>
</div>",1628076093.0,,False,h7nybdq,False,t3_oxojsx,t1_h7nvvhh,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h7nybdq/,1,False,2,False,oxojsx,lua,t5_2qjla
837,luarocks,You can use [this](https://www.reddit.com/r/lua/comments/moapds/actually_portable_executable_of_lua_running_on) cross-platform single-file executable.,"<div class=""md""><p>You can use <a href=""https://www.reddit.com/r/lua/comments/moapds/actually_portable_executable_of_lua_running_on"">this</a> cross-platform single-file executable.</p>
</div>",1628075616.0,,False,h7nxns3,False,t3_oxojsx,t1_h7nvvhh,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h7nxns3/,0,False,1,False,oxojsx,lua,t5_2qjla
838,claudi_m,"OMG, so much fuss for such a simple post... Again, I don't send useful/rocket-engineering code to third-party, and no, I'm not afraid of using CLI as I use it on a daily basis. I use lua.org as a quick, dirty way to quickly check something. That's all!","<div class=""md""><p>OMG, so much fuss for such a simple post... Again, I don&#39;t send useful/rocket-engineering code to third-party, and no, I&#39;m not afraid of using CLI as I use it on a daily basis. I use lua.org as a quick, dirty way to quickly check something. That&#39;s all!</p>
</div>",1628076376.0,,False,h7nyphj,True,t3_oxojsx,t1_h7nybdq,/r/lua/comments/oxojsx/thank_you_for_luaorgdemohtml/h7nyphj/,0,False,5,False,oxojsx,lua,t5_2qjla
839,,It's awesome!,"<div class=""md""><p>It&#39;s awesome!</p>
</div>",1685452878.0,,False,jm75zrt,False,t3_13vn9g5,t3_13vn9g5,/r/lua/comments/13vn9g5/a_lua_logo_i_made_long_ago_using_lua_and/jm75zrt/,0,False,1,False,13vn9g5,lua,t5_2qjla
840,carlos_daniel_gomes,Great!,"<div class=""md""><p>Great!</p>
</div>",1685461176.0,,False,jm7puri,False,t3_13vn9g5,t3_13vn9g5,/r/lua/comments/13vn9g5/a_lua_logo_i_made_long_ago_using_lua_and/jm7puri/,0,False,1,False,13vn9g5,lua,t5_2qjla
841,Substantial-Sir3944,very nise,"<div class=""md""><p>very nise</p>
</div>",1685463081.0,,False,jm7usjd,False,t3_13vn9g5,t3_13vn9g5,/r/lua/comments/13vn9g5/a_lua_logo_i_made_long_ago_using_lua_and/jm7usjd/,0,False,1,False,13vn9g5,lua,t5_2qjla
842,piguman3,neat,"<div class=""md""><p>neat</p>
</div>",1685482828.0,,False,jm99z40,False,t3_13vn9g5,t3_13vn9g5,/r/lua/comments/13vn9g5/a_lua_logo_i_made_long_ago_using_lua_and/jm99z40/,0,False,1,False,13vn9g5,lua,t5_2qjla
843,lifthrasiir,"Kailua is an integrated type checker and IDE (VS Code) support for Lua, which makes use of special comments driving the type checking. I have worked on Kailua for 1 1/2 years (at work), and the game studio I'm working for now internally is using or in progress of adopting Kailua for every single project requring Lua scripting. I'm pretty sure that this is one of the most complete solution for type checking with Lua, and after getting a clearance from the management I'm releasing Kailua as a free and open source software today. Enjoy!","<div class=""md""><p>Kailua is an integrated type checker and IDE (VS Code) support for Lua, which makes use of special comments driving the type checking. I have worked on Kailua for 1 1/2 years (at work), and the game studio I&#39;m working for now internally is using or in progress of adopting Kailua for every single project requring Lua scripting. I&#39;m pretty sure that this is one of the most complete solution for type checking with Lua, and after getting a clearance from the management I&#39;m releasing Kailua as a free and open source software today. Enjoy!</p>
</div>",1493106006.0,,False,dgpxdgp,True,t3_67f4cm,t3_67f4cm,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dgpxdgp/,2,False,7,False,67f4cm,lua,t5_2qjla
844,kevinclancy_,"Looks pretty cool. I haven't gotten around to trying it out yet, as I've been pretty busy lately, but I should get around to it next week. Having created my own optional type checker for lua (https://bitbucket.org/kevinclancy/game-kitchen/wiki/Home), I will definitely have to take a look.

Optional type checkers for lua really shine when it comes to configuration tables. Types can serve as statically enforced schemas for these tables. For example, a programmer making an RPG might decide that they need to add a new field to hold the filename of a profile png to their character tables. Updating a type schema for the character table forces the programmer to add the profile field to *every* character definition table rather than just the ones that they are immediately interested in, avoiding unnecessary crashes down the road.","<div class=""md""><p>Looks pretty cool. I haven&#39;t gotten around to trying it out yet, as I&#39;ve been pretty busy lately, but I should get around to it next week. Having created my own optional type checker for lua (<a href=""https://bitbucket.org/kevinclancy/game-kitchen/wiki/Home"">https://bitbucket.org/kevinclancy/game-kitchen/wiki/Home</a>), I will definitely have to take a look.</p>

<p>Optional type checkers for lua really shine when it comes to configuration tables. Types can serve as statically enforced schemas for these tables. For example, a programmer making an RPG might decide that they need to add a new field to hold the filename of a profile png to their character tables. Updating a type schema for the character table forces the programmer to add the profile field to <em>every</em> character definition table rather than just the ones that they are immediately interested in, avoiding unnecessary crashes down the road.</p>
</div>",1493246045.0,,1493314411.0,dgsnzf7,False,t3_67f4cm,t3_67f4cm,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dgsnzf7/,1,False,2,False,67f4cm,lua,t5_2qjla
845,xPhoenix777,"Amazing! What studio are you at now, if I may ask? Also, any thoughts on vim support?","<div class=""md""><p>Amazing! What studio are you at now, if I may ask? Also, any thoughts on vim support?</p>
</div>",1493139650.0,,False,dgqhing,False,t3_67f4cm,t1_dgpxdgp,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dgqhing/,1,False,1,False,67f4cm,lua,t5_2qjla
846,,"This looks exciting; thanks. Am I right in guessing that it only requires declaration of function arguments, and that locals are all handled with inference? Is it possible for inference to ever cross function boundaries?","<div class=""md""><p>This looks exciting; thanks. Am I right in guessing that it only requires declaration of function arguments, and that locals are all handled with inference? Is it possible for inference to ever cross function boundaries?</p>
</div>",1493159821.0,,False,dgqzwi1,False,t3_67f4cm,t1_dgpxdgp,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dgqzwi1/,1,False,1,False,67f4cm,lua,t5_2qjla
847,lifthrasiir,"I'm glad to see you! Especially given that I have gone through many existing type systems for Lua, including your type checker and [Tidal Lock](https://github.com/fab13n/metalua/blob/tilo/src/tilo/readme.md) which became the basis of the first internal version of Kailua (not same to the current version).

Kailua was developed under the major restrictions that no transpilation is possible (precluded almost all existing solutions), the code base should be updated incrementally, and globals should be supported well (precluded your type checker ;). I think the later revision of Kailua type system has made it more like your type checker, but considerably more complex (and buggier? :p). Another difference is that while Kailua does support gradual typing and other escape hatches, it is not directly targeted to *start* programming without types---it actively encourages you to put types if you are starting over.","<div class=""md""><p>I&#39;m glad to see you! Especially given that I have gone through many existing type systems for Lua, including your type checker and <a href=""https://github.com/fab13n/metalua/blob/tilo/src/tilo/readme.md"">Tidal Lock</a> which became the basis of the first internal version of Kailua (not same to the current version).</p>

<p>Kailua was developed under the major restrictions that no transpilation is possible (precluded almost all existing solutions), the code base should be updated incrementally, and globals should be supported well (precluded your type checker ;). I think the later revision of Kailua type system has made it more like your type checker, but considerably more complex (and buggier? :p). Another difference is that while Kailua does support gradual typing and other escape hatches, it is not directly targeted to <em>start</em> programming without types---it actively encourages you to put types if you are starting over.</p>
</div>",1493254162.0,,False,dgsuh0d,True,t3_67f4cm,t1_dgsnzf7,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dgsuh0d/,1,False,1,False,67f4cm,lua,t5_2qjla
848,xPhoenix777,devCAT - ok :P,"<div class=""md""><p>devCAT - ok :P</p>
</div>",1493139688.0,,False,dgqhjxi,False,t3_67f4cm,t1_dgqhing,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dgqhjxi/,0,False,1,False,67f4cm,lua,t5_2qjla
849,lifthrasiir,"A bit mixed (intentionally). Anonymous functions do not require argument types when the parent function calls can give types for them, and some types (in particular, `vector<T>` and `map<T, U>`) are strictly required to have the annotation. The explicit types for (most) functions is not really a restriction of the type system but rather exists for the usability (the convention is strongly modelled after C#)---if you can build Kailua yourself, there is an internal option that turns this restriction off.","<div class=""md""><p>A bit mixed (intentionally). Anonymous functions do not require argument types when the parent function calls can give types for them, and some types (in particular, <code>vector&lt;T&gt;</code> and <code>map&lt;T, U&gt;</code>) are strictly required to have the annotation. The explicit types for (most) functions is not really a restriction of the type system but rather exists for the usability (the convention is strongly modelled after C#)---if you can build Kailua yourself, there is an internal option that turns this restriction off.</p>
</div>",1493168334.0,,False,dgr6d28,True,t3_67f4cm,t1_dgqzwi1,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dgr6d28/,0,False,2,False,67f4cm,lua,t5_2qjla
850,kevinclancy_,"Just got around to trying it out. One thing I've noticed is that it currently lacks bidirectional typechecking. If I have the following program:

    --# open lua51
    --# type Date = {
    --#   hour : integer,
    --#   min : integer,
    --#   sec: integer
    --# }
    local function g(f) --: function(Date,integer)
      f( {hour = 3, min = 2, sec = ""nebula"" } )
    end 

I get an error message highlighting f, telling me that {hour : int, min : int, sec : ""nebula"", ...} is not a subtype of Date. However, the programmer would want to know why this subtyping relation does not hold, so I would rather see an error at ""nebula"" saying that ""nebula"" is not a subtype of integer.","<div class=""md""><p>Just got around to trying it out. One thing I&#39;ve noticed is that it currently lacks bidirectional typechecking. If I have the following program:</p>

<pre><code>--# open lua51
--# type Date = {
--#   hour : integer,
--#   min : integer,
--#   sec: integer
--# }
local function g(f) --: function(Date,integer)
  f( {hour = 3, min = 2, sec = &quot;nebula&quot; } )
end 
</code></pre>

<p>I get an error message highlighting f, telling me that {hour : int, min : int, sec : &quot;nebula&quot;, ...} is not a subtype of Date. However, the programmer would want to know why this subtyping relation does not hold, so I would rather see an error at &quot;nebula&quot; saying that &quot;nebula&quot; is not a subtype of integer.</p>
</div>",1493941511.0,,1493941951.0,dh57xhd,False,t3_67f4cm,t1_dgsuh0d,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dh57xhd/,1,False,1,False,67f4cm,lua,t5_2qjla
851,lifthrasiir,"You are mostly right, Kailua does not prominently use the bidirectional typechecking (but it does to limited extent, especially on the function arguments). I've found that people seems to be confused about the reverse flow of type inference [1], no matter it's due to the bidirectional typechecking or simple type variables. Combined with the fact that I hadn't much time to perfect the type checker, I haven't implemented bidirectional typechecking in Kailua.

[1] Please note that the people in question are mostly accustomed to C#. Therefore this is not a universal argument, but rather showing the fact that Kailua is tailored to them.","<div class=""md""><p>You are mostly right, Kailua does not prominently use the bidirectional typechecking (but it does to limited extent, especially on the function arguments). I&#39;ve found that people seems to be confused about the reverse flow of type inference [1], no matter it&#39;s due to the bidirectional typechecking or simple type variables. Combined with the fact that I hadn&#39;t much time to perfect the type checker, I haven&#39;t implemented bidirectional typechecking in Kailua.</p>

<p>[1] Please note that the people in question are mostly accustomed to C#. Therefore this is not a universal argument, but rather showing the fact that Kailua is tailored to them.</p>
</div>",1493973463.0,,False,dh5q6sx,True,t3_67f4cm,t1_dh57xhd,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dh5q6sx/,1,False,1,False,67f4cm,lua,t5_2qjla
852,kevinclancy_,"I noticed that Kailua is written in Rust. How was your experience using Rust? Do you think it is a good language for writing a type checker?
","<div class=""md""><p>I noticed that Kailua is written in Rust. How was your experience using Rust? Do you think it is a good language for writing a type checker?</p>
</div>",1494084222.0,,False,dh7ieb8,False,t3_67f4cm,t1_dh5q6sx,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dh7ieb8/,1,False,1,False,67f4cm,lua,t5_2qjla
853,lifthrasiir,"Not too bad, given that its ecosystem is still in development. (But keep in mind that I had been using it for years anyway.) I have previously developed language implementations in OCaml and Haskell to some extent, and the overall experience is much similar to, but significantly better than, OCaml. What I was particularly missing from Rust is a generic programming, something like [syb](https://hackage.haskell.org/package/syb) in Haskell, but it was not a showstopper. I was also tremendously benefited from very effective, fearless refactoring, but I guess this is common for all languages with strong type systems.","<div class=""md""><p>Not too bad, given that its ecosystem is still in development. (But keep in mind that I had been using it for years anyway.) I have previously developed language implementations in OCaml and Haskell to some extent, and the overall experience is much similar to, but significantly better than, OCaml. What I was particularly missing from Rust is a generic programming, something like <a href=""https://hackage.haskell.org/package/syb"">syb</a> in Haskell, but it was not a showstopper. I was also tremendously benefited from very effective, fearless refactoring, but I guess this is common for all languages with strong type systems.</p>
</div>",1494139145.0,,False,dh8hrk8,True,t3_67f4cm,t1_dh7ieb8,/r/lua/comments/67f4cm/kailua_type_checker_and_ide_support_for_lua/dh8hrk8/,0,False,1,False,67f4cm,lua,t5_2qjla
854,davethecomposer,"Lua is the only language I know. I have this one music project I'm working on that is software that generates music (in a novel manner, I think). I made a list of five languages that seemed good to use for various reasons: Lua, Scheme, Ruby, Python, and Perl. I tried my hand at all of them and it was with Lua that I was able to hit the ground running the fastest. Ie, I was able to make sounds with it faster and easier than I could with the others.

Since then as I've learned more about programming and other languages I've discovered its many charms. It keeps things simple and it's quick. And since my project allows *mods* (what I call *Style Algorithms*), Lua was a lucky choice given its popularity in that domain.","<div class=""md""><p>Lua is the only language I know. I have this one music project I&#39;m working on that is software that generates music (in a novel manner, I think). I made a list of five languages that seemed good to use for various reasons: Lua, Scheme, Ruby, Python, and Perl. I tried my hand at all of them and it was with Lua that I was able to hit the ground running the fastest. Ie, I was able to make sounds with it faster and easier than I could with the others.</p>

<p>Since then as I&#39;ve learned more about programming and other languages I&#39;ve discovered its many charms. It keeps things simple and it&#39;s quick. And since my project allows <em>mods</em> (what I call <em>Style Algorithms</em>), Lua was a lucky choice given its popularity in that domain.</p>
</div>",1465844507.0,,False,d47obzx,False,t3_4ni98h,t3_4ni98h,/r/lua/comments/4ni98h/lua_has_amazed_me/d47obzx/,1,False,4,False,4ni98h,lua,t5_2qjla
855,SupersonicSpitfire,"If you install and run Algernon, it comes with an interactive Lua prompt where you can see the Lua bytecode for a function just by typing the function name.","<div class=""md""><p>If you install and run Algernon, it comes with an interactive Lua prompt where you can see the Lua bytecode for a function just by typing the function name.</p>
</div>",1465593680.0,,False,d445vg0,False,t3_4ni98h,t3_4ni98h,/r/lua/comments/4ni98h/lua_has_amazed_me/d445vg0/,0,False,3,False,4ni98h,lua,t5_2qjla
856,Chaoticmass,"I love how lua let's you program according to many different styles and handles them all very elegantly and is still very simple, fast, and efficient.","<div class=""md""><p>I love how lua let&#39;s you program according to many different styles and handles them all very elegantly and is still very simple, fast, and efficient.</p>
</div>",1465611281.0,,False,d44g1ca,False,t3_4ni98h,t3_4ni98h,/r/lua/comments/4ni98h/lua_has_amazed_me/d44g1ca/,0,False,3,False,4ni98h,lua,t5_2qjla
857,shulg,deleted  ^^^^^^^^^^^^^^^^0.4754  [^^^What ^^^is ^^^this?](https://pastebin.com/FcrFs94k/07785),"<div class=""md""><p>deleted    <a href=""https://pastebin.com/FcrFs94k/07785""><sup><sup><sup>What</sup></sup></sup> <sup><sup><sup>is</sup></sup></sup> <sup><sup><sup>this?</sup></sup></sup></a></p>
</div>",1465626369.0,,1493620130.0,d44nd56,False,t3_4ni98h,t3_4ni98h,/r/lua/comments/4ni98h/lua_has_amazed_me/d44nd56/,2,False,3,False,4ni98h,lua,t5_2qjla
858,newocean,"If you write C++ also, Tecgraf makes 3 other packages (IUP, SC and IM) that are compatible with Lua out of the box.","<div class=""md""><p>If you write C++ also, Tecgraf makes 3 other packages (IUP, SC and IM) that are compatible with Lua out of the box.</p>
</div>",1465658393.0,,False,d44xjgx,False,t3_4ni98h,t3_4ni98h,/r/lua/comments/4ni98h/lua_has_amazed_me/d44xjgx/,0,False,3,False,4ni98h,lua,t5_2qjla
859,edalcol,I went through a similar journey! I started on it because it was invented in my university and I was very positively surprised! ,"<div class=""md""><p>I went through a similar journey! I started on it because it was invented in my university and I was very positively surprised! </p>
</div>",1465816639.0,,False,d475yng,False,t3_4ni98h,t3_4ni98h,/r/lua/comments/4ni98h/lua_has_amazed_me/d475yng/,0,False,3,False,4ni98h,lua,t5_2qjla
860,EricTboneJackson,"Yeah, I love Lua. I bugs me that every other language doesn't have multiple return values.","<div class=""md""><p>Yeah, I love Lua. I bugs me that every other language doesn&#39;t have multiple return values.</p>
</div>",1466028788.0,,False,d4at2ml,False,t3_4ni98h,t3_4ni98h,/r/lua/comments/4ni98h/lua_has_amazed_me/d4at2ml/,1,False,2,False,4ni98h,lua,t5_2qjla
861,,"I'm also on that boat. I first encountered lua on a project at work. I had never touched it before. 

I decided to spend a day learning it and I can't believe how effective I was after a couple hours of playing around with love2d and corona. 

If I'm working in C/C++ and I need to expose a scripting layer lua is always the first thing i think of now.","<div class=""md""><p>I&#39;m also on that boat. I first encountered lua on a project at work. I had never touched it before. </p>

<p>I decided to spend a day learning it and I can&#39;t believe how effective I was after a couple hours of playing around with love2d and corona. </p>

<p>If I&#39;m working in C/C++ and I need to expose a scripting layer lua is always the first thing i think of now.</p>
</div>",1465763463.0,,False,d46euy1,False,t3_4ni98h,t3_4ni98h,/r/lua/comments/4ni98h/lua_has_amazed_me/d46euy1/,0,False,1,False,4ni98h,lua,t5_2qjla
862,SinisterRectus,"Out of curiosity, what are you using to generate the sound? As far as I know, you can't do it without a lower level library.","<div class=""md""><p>Out of curiosity, what are you using to generate the sound? As far as I know, you can&#39;t do it without a lower level library.</p>
</div>",1467505847.0,,False,d4x5s6h,False,t3_4ni98h,t1_d47obzx,/r/lua/comments/4ni98h/lua_has_amazed_me/d4x5s6h/,1,False,1,False,4ni98h,lua,t5_2qjla
863,analogphototaker,Is Lua a gateway drug for ocaml? Why? ,"<div class=""md""><p>Is Lua a gateway drug for ocaml? Why? </p>
</div>",1465648941.0,,False,d44tayf,False,t3_4ni98h,t1_d44nd56,/r/lua/comments/4ni98h/lua_has_amazed_me/d44tayf/,1,False,3,False,4ni98h,lua,t5_2qjla
864,,"I""m just beginning to experience it now :)","<div class=""md""><p>I&quot;m just beginning to experience it now :)</p>
</div>",1465763514.0,,False,d46ewx9,False,t3_4ni98h,t1_d44nd56,/r/lua/comments/4ni98h/lua_has_amazed_me/d46ewx9/,0,False,1,False,4ni98h,lua,t5_2qjla
865,,Doesn't Python have that?,"<div class=""md""><p>Doesn&#39;t Python have that?</p>
</div>",1466280767.0,,False,d4ema1q,False,t3_4ni98h,t1_d4at2ml,/r/lua/comments/4ni98h/lua_has_amazed_me/d4ema1q/,0,False,2,False,4ni98h,lua,t5_2qjla
866,davethecomposer,"The underlying audio technology is MIDI. I use [this](http://www.pjb.com.au/comp/lua/MIDI.html) Lua library written entirely in Lua to generate MIDI files. It is more musician friendly than the other MIDI Lua libraries I found.

The original MIDI spec had some serious limitations. Fortunately there is the [MIDI Tuning Standard](http://www.microtonal-synthesis.com/MIDItuning.html) which allows one, with some computing, to basically send specific audio frequencies to the MIDI file. (You aren't actually doing that but that's what it looks like from a high enough level.)

And then if you have a MIDI synth, like Timidity but not Fluidsynth, that respects the MTS you're set. Not sure how much you understand about alternate tunings but I can have music that uses somewhere around 190,000-EDO tuning set against 10.666 octaves. That's pretty impressive.

So my software then calls Timidity to convert the MIDI file into an audio file and Lilypond to generate a standard music score and pdfLaTeX to generate any graphical notation (using TikZ) you might want.","<div class=""md""><p>The underlying audio technology is MIDI. I use <a href=""http://www.pjb.com.au/comp/lua/MIDI.html"">this</a> Lua library written entirely in Lua to generate MIDI files. It is more musician friendly than the other MIDI Lua libraries I found.</p>

<p>The original MIDI spec had some serious limitations. Fortunately there is the <a href=""http://www.microtonal-synthesis.com/MIDItuning.html"">MIDI Tuning Standard</a> which allows one, with some computing, to basically send specific audio frequencies to the MIDI file. (You aren&#39;t actually doing that but that&#39;s what it looks like from a high enough level.)</p>

<p>And then if you have a MIDI synth, like Timidity but not Fluidsynth, that respects the MTS you&#39;re set. Not sure how much you understand about alternate tunings but I can have music that uses somewhere around 190,000-EDO tuning set against 10.666 octaves. That&#39;s pretty impressive.</p>

<p>So my software then calls Timidity to convert the MIDI file into an audio file and Lilypond to generate a standard music score and pdfLaTeX to generate any graphical notation (using TikZ) you might want.</p>
</div>",1467561826.0,,False,d4xr77q,False,t3_4ni98h,t1_d4x5s6h,/r/lua/comments/4ni98h/lua_has_amazed_me/d4xr77q/,0,False,2,False,4ni98h,lua,t5_2qjla
867,smog_alado,I think he is just saying that functional programming is also really cool :),"<div class=""md""><p>I think he is just saying that functional programming is also really cool :)</p>
</div>",1465659442.0,,False,d44y4lq,False,t3_4ni98h,t1_d44tayf,/r/lua/comments/4ni98h/lua_has_amazed_me/d44y4lq/,1,False,4,False,4ni98h,lua,t5_2qjla
868,shulg,deleted  ^^^^^^^^^^^^^^^^0.1538  [^^^What ^^^is ^^^this?](https://pastebin.com/FcrFs94k/67230),"<div class=""md""><p>deleted    <a href=""https://pastebin.com/FcrFs94k/67230""><sup><sup><sup>What</sup></sup></sup> <sup><sup><sup>is</sup></sup></sup> <sup><sup><sup>this?</sup></sup></sup></a></p>
</div>",1465661498.0,,1493620134.0,d44zcdj,False,t3_4ni98h,t1_d44y4lq,/r/lua/comments/4ni98h/lua_has_amazed_me/d44zcdj/,0,False,3,False,4ni98h,lua,t5_2qjla
869,luascriptdev,Congrats on the software project! Successful projects are always to be celebrated!,"<div class=""md""><p>Congrats on the software project! Successful projects are always to be celebrated!</p>
</div>",1604941295.0,,False,gbqg0pn,False,t3_jqkxs7,t3_jqkxs7,/r/lua/comments/jqkxs7/a_big_thanks_to_this_sub/gbqg0pn/,0,False,5,False,jqkxs7,lua,t5_2qjla
870,,Lua :),"<div class=""md""><p>Lua :)</p>
</div>",1667137519.0,,False,iudarjt,False,t3_yh8mfd,t3_yh8mfd,/r/lua/comments/yh8mfd/i_edited_a_great_picture/iudarjt/,0,False,5,False,yh8mfd,lua,t5_2qjla
871,LoPiratoLOCO,J.LUA,"<div class=""md""><p>J.LUA</p>
</div>",1667156079.0,,False,iuejf7i,False,t3_yh8mfd,t3_yh8mfd,/r/lua/comments/yh8mfd/i_edited_a_great_picture/iuejf7i/,0,False,2,False,yh8mfd,lua,t5_2qjla
872,Rude-Enthusiasm-7255,Steell ball Run?,"<div class=""md""><p>Steell ball Run?</p>
</div>",1667507875.0,,False,iuxxpro,False,t3_yh8mfd,t3_yh8mfd,/r/lua/comments/yh8mfd/i_edited_a_great_picture/iuxxpro/,1,False,2,False,yh8mfd,lua,t5_2qjla
873,Cring3_Crimson,"More acuratly, My Steel Balls

But yes","<div class=""md""><p>More acuratly, My Steel Balls</p>

<p>But yes</p>
</div>",1667509584.0,,False,iuy26tm,True,t3_yh8mfd,t1_iuxxpro,/r/lua/comments/yh8mfd/i_edited_a_great_picture/iuy26tm/,1,False,1,False,yh8mfd,lua,t5_2qjla
874,Rude-Enthusiasm-7255,Gyro Spin,"<div class=""md""><p>Gyro Spin</p>
</div>",1667511307.0,,False,iuy6i1r,False,t3_yh8mfd,t1_iuy26tm,/r/lua/comments/yh8mfd/i_edited_a_great_picture/iuy6i1r/,0,False,1,False,yh8mfd,lua,t5_2qjla
875,pctammela,Fast just got faster!,"<div class=""md""><p>Fast just got faster!</p>
</div>",1593459615.0,,False,fwedxlw,False,t3_hi5ynb,t3_hi5ynb,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwedxlw/,1,False,15,False,hi5ynb,lua,t5_2qjla
876,,Still no increment and decrement operators 😔,"<div class=""md""><p>Still no increment and decrement operators 😔</p>
</div>",1593496759.0,,False,fwg6jyf,False,t3_hi5ynb,t3_hi5ynb,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwg6jyf/,1,False,3,False,hi5ynb,lua,t5_2qjla
877,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1593541534.0,,False,fwi1ezg,False,t3_hi5ynb,t3_hi5ynb,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwi1ezg/,1,False,1,False,hi5ynb,lua,t5_2qjla
878,-tsam-,"Back to Lua since few days (was dealing with Lua 5.1 some years ago)...
That release gives more speed, more functionnalities !! Contrats to the dev at PUC Rio ! 👍","<div class=""md""><p>Back to Lua since few days (was dealing with Lua 5.1 some years ago)...
That release gives more speed, more functionnalities !! Contrats to the dev at PUC Rio ! 👍</p>
</div>",1603306815.0,,False,g9kih9t,False,t3_hi5ynb,t3_hi5ynb,/r/lua/comments/hi5ynb/lua_54_is_officially_released/g9kih9t/,0,False,1,False,hi5ynb,lua,t5_2qjla
879,TomatoCo,*cries in Mike Pall retiring from LuaJIT*,"<div class=""md""><p><em>cries in Mike Pall retiring from LuaJIT</em></p>
</div>",1593461686.0,,False,fweiaaf,False,t3_hi5ynb,t1_fwedxlw,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fweiaaf/,1,False,13,False,hi5ynb,lua,t5_2qjla
880,rjek,"Still no reason to have them, and still plenty of complicated reasons to not.","<div class=""md""><p>Still no reason to have them, and still plenty of complicated reasons to not.</p>
</div>",1593519723.0,,False,fwgvbm9,False,t3_hi5ynb,t1_fwg6jyf,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwgvbm9/,1,False,6,False,hi5ynb,lua,t5_2qjla
881,un-def,"Run as `./lua`, not `lua` (the latter searches an executable using the `PATH` environment variable).","<div class=""md""><p>Run as <code>./lua</code>, not <code>lua</code> (the latter searches an executable using the <code>PATH</code> environment variable).</p>
</div>",1593541949.0,,False,fwi2bnm,False,t3_hi5ynb,t1_fwi1ezg,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwi2bnm/,1,False,3,False,hi5ynb,lua,t5_2qjla
882,,"He was fixing bugs for it a couple of months ago. It do be unfortunate that it doesn't seem to interest him like it presumably did back in the day (I'm a newcomer to Lua(JIT)), us mere mortals depend so much on people like Mike, I hope he's found something else he finds as interesting as he did LuaJIT.","<div class=""md""><p>He was fixing bugs for it a couple of months ago. It do be unfortunate that it doesn&#39;t seem to interest him like it presumably did back in the day (I&#39;m a newcomer to Lua(JIT)), us mere mortals depend so much on people like Mike, I hope he&#39;s found something else he finds as interesting as he did LuaJIT.</p>
</div>",1593474311.0,,False,fwf793l,False,t3_hi5ynb,t1_fweiaaf,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwf793l/,2,False,4,False,hi5ynb,lua,t5_2qjla
883,HowManySmall,"Compound assignments are far more useful and more readable, anyway.","<div class=""md""><p>Compound assignments are far more useful and more readable, anyway.</p>
</div>",1593532327.0,,False,fwhhw7z,False,t3_hi5ynb,t1_fwgvbm9,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwhhw7z/,1,False,3,False,hi5ynb,lua,t5_2qjla
884,saeleko,"I'm, currently hesitating between facepalming using my desk, or facepalming using my keyboard. I think I'll go with the desk as it's less expensive...

(Thanks, how did I miss that :')  )","<div class=""md""><p>I&#39;m, currently hesitating between facepalming using my desk, or facepalming using my keyboard. I think I&#39;ll go with the desk as it&#39;s less expensive...</p>

<p>(Thanks, how did I miss that :&#39;)  )</p>
</div>",1593542244.0,,False,fwi2yzy,False,t3_hi5ynb,t1_fwi2bnm,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwi2yzy/,1,False,7,False,hi5ynb,lua,t5_2qjla
885,ws-ilazki,"LuaJIT being perpetually stuck on 5.1+random backported bits is Lua's own Perl5/6 or Python2/3 problem.  You want to move forward with official Lua's new features but LuaJIT is *so fast* that it's still compelling despite not evolving as a language.

I wonder if the solution will be transpilers.  Various compiles-to-Lua languages like [Urn](https://urn-lang.com/) and [Amulet](https://amulet.works/) (which are both awesome) already provide LuaJIT compatibility so you can write in one language and target both reasonably.  Maybe if LuaJIT continues to be significantly faster but not evolving as a language, somebody will make a `lua2jit` transpiler that works like JS polyfills, where you write your 5.4 (or 5.5, 5.6, etc.) Lua and it makes it LuaJIT compatible for you.","<div class=""md""><p>LuaJIT being perpetually stuck on 5.1+random backported bits is Lua&#39;s own Perl5/6 or Python2/3 problem.  You want to move forward with official Lua&#39;s new features but LuaJIT is <em>so fast</em> that it&#39;s still compelling despite not evolving as a language.</p>

<p>I wonder if the solution will be transpilers.  Various compiles-to-Lua languages like <a href=""https://urn-lang.com/"">Urn</a> and <a href=""https://amulet.works/"">Amulet</a> (which are both awesome) already provide LuaJIT compatibility so you can write in one language and target both reasonably.  Maybe if LuaJIT continues to be significantly faster but not evolving as a language, somebody will make a <code>lua2jit</code> transpiler that works like JS polyfills, where you write your 5.4 (or 5.5, 5.6, etc.) Lua and it makes it LuaJIT compatible for you.</p>
</div>",1593483453.0,,False,fwfn6ss,False,t3_hi5ynb,t1_fwf793l,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwfn6ss/,1,False,6,False,hi5ynb,lua,t5_2qjla
886,fsfod,"He pushed some some commits just last week that refactored the internal random number generator thats also used by math.random to be seeded by the OS RNG. Another commit improved string interning by using full string hashing if there is lot of hash collisions instead of just hashing the first, last and middle four bytes.","<div class=""md""><p>He pushed some some commits just last week that refactored the internal random number generator thats also used by math.random to be seeded by the OS RNG. Another commit improved string interning by using full string hashing if there is lot of hash collisions instead of just hashing the first, last and middle four bytes.</p>
</div>",1593488721.0,,False,fwfvmor,False,t3_hi5ynb,t1_fwf793l,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwfvmor/,1,False,3,False,hi5ynb,lua,t5_2qjla
887,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1593537987.0,,False,fwhtsg8,False,t3_hi5ynb,t1_fwhhw7z,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwhtsg8/,1,False,1,False,hi5ynb,lua,t5_2qjla
888,,Why not both?,"<div class=""md""><p>Why not both?</p>
</div>",1593558696.0,,False,fwj0u3s,False,t3_hi5ynb,t1_fwi2yzy,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwj0u3s/,1,False,3,False,hi5ynb,lua,t5_2qjla
889,,"I've seen a few forks of LuaJIT, but the general consensus seems to be nobody of the calibre of Mike has taken up the challenge. Many of the forks support fewer systems as well..","<div class=""md""><p>I&#39;ve seen a few forks of LuaJIT, but the general consensus seems to be nobody of the calibre of Mike has taken up the challenge. Many of the forks support fewer systems as well..</p>
</div>",1593484190.0,,False,fwfoeg4,False,t3_hi5ynb,t1_fwfn6ss,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwfoeg4/,0,False,5,False,hi5ynb,lua,t5_2qjla
890,,Our man!,"<div class=""md""><p>Our man!</p>
</div>",1593495662.0,,False,fwg57ca,False,t3_hi5ynb,t1_fwfvmor,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwg57ca/,0,False,2,False,hi5ynb,lua,t5_2qjla
891,HowManySmall,"Roblox's Lua (Luau) supports them now, so I don't see why vanilla Lua shouldn't be able to. Maybe one day.","<div class=""md""><p>Roblox&#39;s Lua (Luau) supports them now, so I don&#39;t see why vanilla Lua shouldn&#39;t be able to. Maybe one day.</p>
</div>",1593541811.0,,False,fwi20tq,False,t3_hi5ynb,t1_fwhtsg8,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwi20tq/,1,False,1,False,hi5ynb,lua,t5_2qjla
892,saeleko,An option worth considering for next time this occurs.,"<div class=""md""><p>An option worth considering for next time this occurs.</p>
</div>",1593625821.0,,False,fwlsz15,False,t3_hi5ynb,t1_fwj0u3s,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwlsz15/,0,False,1,False,hi5ynb,lua,t5_2qjla
893,Macaronic_Snack,Because Lua roblox is aimed at kids,"<div class=""md""><p>Because Lua roblox is aimed at kids</p>
</div>",1593627914.0,,False,fwlxow4,False,t3_hi5ynb,t1_fwi20tq,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwlxow4/,1,False,1,False,hi5ynb,lua,t5_2qjla
894,HowManySmall,...I don't see how compound assignments relate to that?,"<div class=""md""><p>...I don&#39;t see how compound assignments relate to that?</p>
</div>",1593655794.0,,False,fwni8lf,False,t3_hi5ynb,t1_fwlxow4,/r/lua/comments/hi5ynb/lua_54_is_officially_released/fwni8lf/,0,False,4,False,hi5ynb,lua,t5_2qjla
895,WrongAndBeligerent,"Thanks for keeping an eye on this, the entire sub was becoming people asking for help on how to assign a value to a variable.

I've seen subs implement rules like minimum title lengths, which helps weed out nonsense like ""Question"" or ""coding help"".","<div class=""md""><p>Thanks for keeping an eye on this, the entire sub was becoming people asking for help on how to assign a value to a variable.</p>

<p>I&#39;ve seen subs implement rules like minimum title lengths, which helps weed out nonsense like &quot;Question&quot; or &quot;coding help&quot;.</p>
</div>",1598407256.0,,1598407612.0,g2v9gpr,False,t3_igp1p6,t3_igp1p6,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/g2v9gpr/,2,False,7,False,igp1p6,lua,t5_2qjla
896,3xp01t,"That's facts right there.

When you code in lua you're 90% of the time using an API of some sort, and 99% of your errors are related to that API.","<div class=""md""><p>That&#39;s facts right there.</p>

<p>When you code in lua you&#39;re 90% of the time using an API of some sort, and 99% of your errors are related to that API.</p>
</div>",1598452288.0,,False,g2wvyhr,False,t3_igp1p6,t3_igp1p6,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/g2wvyhr/,1,False,3,False,igp1p6,lua,t5_2qjla
897,st3f-ping,"I think that many of those that are asking for help have been left high and dry by the developers of the app/game that they are trying to mod. I imagine that a developer might just leave a readme with a few notes and the knowledge that the language Lua is used to write any mods. Someone unfamiliar with Lua and new to programming might not know what a library or framework is and will innocently assume that surely, Lua is just Lua and come here for help.

I'm wondering if, instead of deleting their post, a moderator could trigger a standard reply which tells the user that when Lua is used to extend a game or app, most of the vocabulary will come from the game or app and not from Lua. Therefore, it is unlikely that a user of r/lua will be able to help. It could further list the places that we know about where they might be able to get their question better answered.

This leaves them with a pleasant first encounter with r/lua, encouraging them to return when they know more and can contribute to the community. It doesn't solve the problem of an increasing number of posts appearing in the subreddit which require specialist knowledge outside of Lua to solve but I have an idea about that, too.

I've not never been a moderator of a subreddit so I'm not sure what tools exist but, would it be possible when adding a standard reply to also add a flair? It could indicate the post to be about an external framework. This would enable users who don't want to interact with those posts to see the flair and ignore them, not so much removing them from view but allowing them to be easily filtered.","<div class=""md""><p>I think that many of those that are asking for help have been left high and dry by the developers of the app/game that they are trying to mod. I imagine that a developer might just leave a readme with a few notes and the knowledge that the language Lua is used to write any mods. Someone unfamiliar with Lua and new to programming might not know what a library or framework is and will innocently assume that surely, Lua is just Lua and come here for help.</p>

<p>I&#39;m wondering if, instead of deleting their post, a moderator could trigger a standard reply which tells the user that when Lua is used to extend a game or app, most of the vocabulary will come from the game or app and not from Lua. Therefore, it is unlikely that a user of <a href=""/r/lua"">r/lua</a> will be able to help. It could further list the places that we know about where they might be able to get their question better answered.</p>

<p>This leaves them with a pleasant first encounter with <a href=""/r/lua"">r/lua</a>, encouraging them to return when they know more and can contribute to the community. It doesn&#39;t solve the problem of an increasing number of posts appearing in the subreddit which require specialist knowledge outside of Lua to solve but I have an idea about that, too.</p>

<p>I&#39;ve not never been a moderator of a subreddit so I&#39;m not sure what tools exist but, would it be possible when adding a standard reply to also add a flair? It could indicate the post to be about an external framework. This would enable users who don&#39;t want to interact with those posts to see the flair and ignore them, not so much removing them from view but allowing them to be easily filtered.</p>
</div>",1598462095.0,,False,g2xghmk,False,t3_igp1p6,t3_igp1p6,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/g2xghmk/,1,False,3,False,igp1p6,lua,t5_2qjla
898,ramjithunder24,"Yo u/ws-ilazki, I have a few suggestions for this sub:

1. lets add a logo to the sub because right now, it's just the generic r/ logo, and I personally couldn't tell if this was the lua sub as in the programming language or something else
2. lets have a help/questions thread because right now, the entire sub is filled with ""This is a dumb question but..."" posts
3. lets have a montly lua discussion thread, because I've realised that the email chain is really active, but the subreddit is not.","<div class=""md""><p>Yo <a href=""/u/ws-ilazki"">u/ws-ilazki</a>, I have a few suggestions for this sub:</p>

<ol>
<li>lets add a logo to the sub because right now, it&#39;s just the generic r/ logo, and I personally couldn&#39;t tell if this was the lua sub as in the programming language or something else</li>
<li>lets have a help/questions thread because right now, the entire sub is filled with &quot;This is a dumb question but...&quot; posts</li>
<li>lets have a montly lua discussion thread, because I&#39;ve realised that the email chain is really active, but the subreddit is not.</li>
</ol>
</div>",1653660080.0,,False,ia6zy9f,False,t3_igp1p6,t3_igp1p6,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/ia6zy9f/,0,False,1,False,igp1p6,lua,t5_2qjla
899,,"I think you should add a default tag. All parts titles must contain a /\^[]/ the inside doesn't matter, but this will force others to attempt a bit of rubber duck debugging and maybe read the rules. It would be nice if all posts indicated what they're about in the title like [std] or [Garry's mod] or Game application and so on.","<div class=""md""><p>I think you should add a default tag. All parts titles must contain a /^[]/ the inside doesn&#39;t matter, but this will force others to attempt a bit of rubber duck debugging and maybe read the rules. It would be nice if all posts indicated what they&#39;re about in the title like [std] or [Garry&#39;s mod] or Game application and so on.</p>
</div>",1666700774.0,,False,itpq0vl,False,t3_igp1p6,t3_igp1p6,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/itpq0vl/,0,False,1,False,igp1p6,lua,t5_2qjla
900,TheBiggestNPC,"
The proposed changes to the Lua subreddit's guidelines and enforcement are commendable. It's great to see the community actively working to improve the quality of discussions and foster a more helpful environment.

Requiring users to mention the specific API they are using in their post titles is a practical step. This will make it easier for everyone to find relevant discussions and provide targeted assistance, avoiding unnecessary confusion.

Encouraging users to provide clear and detailed explanations when seeking help is essential for effective problem-solving. It ensures that those who want to assist have enough context to understand the issue and offer meaningful solutions, which benefits everyone involved.

Pruning low-quality posts is a necessary step to maintain the subreddit's value and save time for users seeking genuine assistance.

The suggestion of a weekly general discussion topic is intriguing. It could potentially create a space for addressing common questions and fostering friendly conversations within the community. However, it's essential to consider the subreddit's size and activity before implementing such a change.

Overall, the dedication of the community and its moderators to creating a more informative and welcoming space for Lua enthusiasts is evident. Keep up the excellent work!","<div class=""md""><p>The proposed changes to the Lua subreddit&#39;s guidelines and enforcement are commendable. It&#39;s great to see the community actively working to improve the quality of discussions and foster a more helpful environment.</p>

<p>Requiring users to mention the specific API they are using in their post titles is a practical step. This will make it easier for everyone to find relevant discussions and provide targeted assistance, avoiding unnecessary confusion.</p>

<p>Encouraging users to provide clear and detailed explanations when seeking help is essential for effective problem-solving. It ensures that those who want to assist have enough context to understand the issue and offer meaningful solutions, which benefits everyone involved.</p>

<p>Pruning low-quality posts is a necessary step to maintain the subreddit&#39;s value and save time for users seeking genuine assistance.</p>

<p>The suggestion of a weekly general discussion topic is intriguing. It could potentially create a space for addressing common questions and fostering friendly conversations within the community. However, it&#39;s essential to consider the subreddit&#39;s size and activity before implementing such a change.</p>

<p>Overall, the dedication of the community and its moderators to creating a more informative and welcoming space for Lua enthusiasts is evident. Keep up the excellent work!</p>
</div>",1689977085.0,,False,jsxawk6,False,t3_igp1p6,t3_igp1p6,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/jsxawk6/,0,False,1,False,igp1p6,lua,t5_2qjla
901,ws-ilazki,"> the entire sub was becoming people asking for help on how to assign a value to a variable.

Yeah, it probably didn't help that new-reddit doesn't show the submission guidelines that old-reddit users see, so new redidt users that make accounts to ask for help got no direction on the matter.  I noticed that and fixed it as best I could (the text field for it in new-reddit is less than half the original one) so hopefully it helps some.

> I've seen subs implement rules like minimum title lengths, which helps weed out nonsense like ""Question"" or ""coding help"".

That's a good idea, might have to look into that if useless titles remain a problem.  I prefer a hands-off approach as much as possible, so I'm hoping just guiding people toward asking better questions helps enough to make that sort of heavy-handed approach unnecessary.  So, small changes first and see how they go before trying larger ones.","<div class=""md""><blockquote>
<p>the entire sub was becoming people asking for help on how to assign a value to a variable.</p>
</blockquote>

<p>Yeah, it probably didn&#39;t help that new-reddit doesn&#39;t show the submission guidelines that old-reddit users see, so new redidt users that make accounts to ask for help got no direction on the matter.  I noticed that and fixed it as best I could (the text field for it in new-reddit is less than half the original one) so hopefully it helps some.</p>

<blockquote>
<p>I&#39;ve seen subs implement rules like minimum title lengths, which helps weed out nonsense like &quot;Question&quot; or &quot;coding help&quot;.</p>
</blockquote>

<p>That&#39;s a good idea, might have to look into that if useless titles remain a problem.  I prefer a hands-off approach as much as possible, so I&#39;m hoping just guiding people toward asking better questions helps enough to make that sort of heavy-handed approach unnecessary.  So, small changes first and see how they go before trying larger ones.</p>
</div>",1598481220.0,,False,g2yltp1,True,t3_igp1p6,t1_g2v9gpr,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/g2yltp1/,1,False,2,False,igp1p6,lua,t5_2qjla
902,,"I like people being able to ask questions or look for coding help, especially without it being delegated to another subreddit very few people subscribe to and hence see. Kudos to the mod(s) for this reasonable compromise.","<div class=""md""><p>I like people being able to ask questions or look for coding help, especially without it being delegated to another subreddit very few people subscribe to and hence see. Kudos to the mod(s) for this reasonable compromise.</p>
</div>",1598440691.0,,False,g2we57l,False,t3_igp1p6,t1_g2v9gpr,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/g2we57l/,0,False,1,False,igp1p6,lua,t5_2qjla
903,ws-ilazki,"> When you code in lua you're 90% of the time using an API of some sort, and 99% of your errors are related to that API.

Yep, but if that API is your first time programming you have *no idea* about this and think that's just how Lua works, so like it or not, these kinds of questions appear here.  

Rather than delete those posts and try to maintain sub ""purity"" at the cost of pissing off new Lua users, we started out trying to streamline the ""this isn't the best sub to ask this, try in this other sub"" process by having automod trigger and direct them to another place for help.  That way they can ask there as well but still potentially get help here if someone happens to be familiar with the API.

However, that only works if someone mentions what API, and people leaving that off has been a big problem lately, so I decided to tweak the submission text to hopefully reduce some of it.  Which is when I noticed that new reddit doesn't even show the submission guideline text at all, which is part of the problem.  It has its own separate field in the settings and it seems like that field only appears if you're using new reddit to adjust the settings.

So, anybody using new reddit (like most new users) got no guidance on how to post due to the stupid new/old reddit split.  And better still, the text area for new-reddit submission notes is less than half the length of the old one.  Thanks, reddit, your redesign has been nothing but a headache.","<div class=""md""><blockquote>
<p>When you code in lua you&#39;re 90% of the time using an API of some sort, and 99% of your errors are related to that API.</p>
</blockquote>

<p>Yep, but if that API is your first time programming you have <em>no idea</em> about this and think that&#39;s just how Lua works, so like it or not, these kinds of questions appear here.  </p>

<p>Rather than delete those posts and try to maintain sub &quot;purity&quot; at the cost of pissing off new Lua users, we started out trying to streamline the &quot;this isn&#39;t the best sub to ask this, try in this other sub&quot; process by having automod trigger and direct them to another place for help.  That way they can ask there as well but still potentially get help here if someone happens to be familiar with the API.</p>

<p>However, that only works if someone mentions what API, and people leaving that off has been a big problem lately, so I decided to tweak the submission text to hopefully reduce some of it.  Which is when I noticed that new reddit doesn&#39;t even show the submission guideline text at all, which is part of the problem.  It has its own separate field in the settings and it seems like that field only appears if you&#39;re using new reddit to adjust the settings.</p>

<p>So, anybody using new reddit (like most new users) got no guidance on how to post due to the stupid new/old reddit split.  And better still, the text area for new-reddit submission notes is less than half the length of the old one.  Thanks, reddit, your redesign has been nothing but a headache.</p>
</div>",1598480962.0,,False,g2ylbgm,True,t3_igp1p6,t1_g2wvyhr,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/g2ylbgm/,0,False,2,False,igp1p6,lua,t5_2qjla
904,ws-ilazki,"> I think that many of those that are asking for help have been left high and dry by the developers of the app/game that they are trying to mod. 

That's basically been our reasoning for the current automod setup where it detects certain words like ""roblox"" in submissions and responds with info about the correct community without removing the submission.  Sometimes the question is still generic Lua and can be answered here, and sometimes people here are familiar with the API and can help, so the idea is that someone is more likely to get help if it remains visible here in addition to asking in some other sub or forum.

> I'm wondering if, instead of deleting their post, a moderator could trigger a standard reply which tells the user that when Lua is used to extend a game or app, most of the vocabulary will come from the game or app and not from Lua. Therefore, it is unlikely that a user of r/lua will be able to help. It could further list the places that we know about where they might be able to get their question better answered.

We've been removing false positives when we see them so it's not always visible to readers, but Automod is already set to do precisely this.  I'm sure you've seen it already, but if the title or body mentions common APIs like roblox, gmod, glua, etc. it will spit out a comment explaining that this is a general Lua sub and that they should try there to get more visibility. It only works if they mention what API they're using, though, which is another reason it's beneficial if submissions explicitly state that information.  

To be clear, I'm only planning to delete the lowest of low-effort help posts I see that make no attempt to get good help.  If you can't at least tell people what API you're using you're wasting everyone's time (including your own) and should resubmit with a better title/body.  

If there's no riot over the idea and it seems to be working out, I'll look into ways to streamline the process a bit.  Maybe add a rule so that users can report low-effort posts or something, I don't know yet.

> I've not never been a moderator of a subreddit so I'm not sure what tools exist but, would it be possible when adding a standard reply to also add a flair?

I believe so, and that's something to consider, but we have to figure out what we want to do with flairs in general.  I don't know how the other mods feel about it but I'm not keen on *forcing* flairs for things, at least not on a smaller sub like this, since it just adds another barrier for entry that might turn people away.

That's why I tried to keep this simple with a loose ""please tell us wtf you're using"" for now instead of opening with a more rigid system.  Hopefully it will be enough for a while and more strict post requirements won't be necessary; I'm a laid back (or lazy if you're not feeling charitable) mod that prefers leaving things alone unless they start getting out of hand.  Getting too hands-on with the modding feels like you're treating people like they're children, and nobody likes that.","<div class=""md""><blockquote>
<p>I think that many of those that are asking for help have been left high and dry by the developers of the app/game that they are trying to mod. </p>
</blockquote>

<p>That&#39;s basically been our reasoning for the current automod setup where it detects certain words like &quot;roblox&quot; in submissions and responds with info about the correct community without removing the submission.  Sometimes the question is still generic Lua and can be answered here, and sometimes people here are familiar with the API and can help, so the idea is that someone is more likely to get help if it remains visible here in addition to asking in some other sub or forum.</p>

<blockquote>
<p>I&#39;m wondering if, instead of deleting their post, a moderator could trigger a standard reply which tells the user that when Lua is used to extend a game or app, most of the vocabulary will come from the game or app and not from Lua. Therefore, it is unlikely that a user of <a href=""/r/lua"">r/lua</a> will be able to help. It could further list the places that we know about where they might be able to get their question better answered.</p>
</blockquote>

<p>We&#39;ve been removing false positives when we see them so it&#39;s not always visible to readers, but Automod is already set to do precisely this.  I&#39;m sure you&#39;ve seen it already, but if the title or body mentions common APIs like roblox, gmod, glua, etc. it will spit out a comment explaining that this is a general Lua sub and that they should try there to get more visibility. It only works if they mention what API they&#39;re using, though, which is another reason it&#39;s beneficial if submissions explicitly state that information.  </p>

<p>To be clear, I&#39;m only planning to delete the lowest of low-effort help posts I see that make no attempt to get good help.  If you can&#39;t at least tell people what API you&#39;re using you&#39;re wasting everyone&#39;s time (including your own) and should resubmit with a better title/body.  </p>

<p>If there&#39;s no riot over the idea and it seems to be working out, I&#39;ll look into ways to streamline the process a bit.  Maybe add a rule so that users can report low-effort posts or something, I don&#39;t know yet.</p>

<blockquote>
<p>I&#39;ve not never been a moderator of a subreddit so I&#39;m not sure what tools exist but, would it be possible when adding a standard reply to also add a flair?</p>
</blockquote>

<p>I believe so, and that&#39;s something to consider, but we have to figure out what we want to do with flairs in general.  I don&#39;t know how the other mods feel about it but I&#39;m not keen on <em>forcing</em> flairs for things, at least not on a smaller sub like this, since it just adds another barrier for entry that might turn people away.</p>

<p>That&#39;s why I tried to keep this simple with a loose &quot;please tell us wtf you&#39;re using&quot; for now instead of opening with a more rigid system.  Hopefully it will be enough for a while and more strict post requirements won&#39;t be necessary; I&#39;m a laid back (or lazy if you&#39;re not feeling charitable) mod that prefers leaving things alone unless they start getting out of hand.  Getting too hands-on with the modding feels like you&#39;re treating people like they&#39;re children, and nobody likes that.</p>
</div>",1598480368.0,,False,g2yk57c,True,t3_igp1p6,t1_g2xghmk,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/g2yk57c/,1,False,2,False,igp1p6,lua,t5_2qjla
905,WrongAndBeligerent,"Hands off is great instead of one person making judgements about every submission but I do think there are automatic rules that can be used that seem reasonable even to the person that gets caught by them.

I was going to submit some one or two word nonsense somewhere and the subreddit rules blocked it with an explanation like ""we've found that short titles are usually low effort posts that increase noise, so be more specific on what your post is about"" or something to that effect.  I thought it was cool even though it blocked my submission (which would have been low effort noise)","<div class=""md""><p>Hands off is great instead of one person making judgements about every submission but I do think there are automatic rules that can be used that seem reasonable even to the person that gets caught by them.</p>

<p>I was going to submit some one or two word nonsense somewhere and the subreddit rules blocked it with an explanation like &quot;we&#39;ve found that short titles are usually low effort posts that increase noise, so be more specific on what your post is about&quot; or something to that effect.  I thought it was cool even though it blocked my submission (which would have been low effort noise)</p>
</div>",1598481711.0,,False,g2ymsgl,False,t3_igp1p6,t1_g2yltp1,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/g2ymsgl/,1,False,2,False,igp1p6,lua,t5_2qjla
906,st3f-ping,"Thanks for the well-thought-out answer. It looks that you’d already taken into account much of what I said. I’m all for simple approaches that respect everybody involved and don’t waste anybody’s time, yours included.","<div class=""md""><p>Thanks for the well-thought-out answer. It looks that you’d already taken into account much of what I said. I’m all for simple approaches that respect everybody involved and don’t waste anybody’s time, yours included.</p>
</div>",1598510790.0,,False,g2zyh4c,False,t3_igp1p6,t1_g2yk57c,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/g2zyh4c/,0,False,2,False,igp1p6,lua,t5_2qjla
907,ws-ilazki,"Yeah, like I was saying I like that idea, seems like it should be easy to implement and not get a lot of false positives, so it's a good candidate for another tweak to submissions.  

I'm just trying to do minor things one at a time and see how they work before piling more changes on top, if that makes sense.  Because 1) it's hard to tell *which* changes are working if I do too many at once and 2) I'm lazy.  (mostly kidding about 2.)","<div class=""md""><p>Yeah, like I was saying I like that idea, seems like it should be easy to implement and not get a lot of false positives, so it&#39;s a good candidate for another tweak to submissions.  </p>

<p>I&#39;m just trying to do minor things one at a time and see how they work before piling more changes on top, if that makes sense.  Because 1) it&#39;s hard to tell <em>which</em> changes are working if I do too many at once and 2) I&#39;m lazy.  (mostly kidding about 2.)</p>
</div>",1598486014.0,,False,g2yuwm8,True,t3_igp1p6,t1_g2ymsgl,/r/lua/comments/igp1p6/new_submission_guideline_and_enforcement/g2yuwm8/,0,False,1,False,igp1p6,lua,t5_2qjla
908,the_gnarts,This looks great. I would love for Lua to have (optional) type annotations like the ``terra`` keyword has.,"<div class=""md""><p>This looks great. I would love for Lua to have (optional) type annotations like the <code>terra</code> keyword has.</p>
</div>",1368540314.0,,False,c9yjlwc,False,t3_1ean1t,t3_1ean1t,/r/lua/comments/1ean1t/terra_a_lowlevel_counterpart_to_lua/c9yjlwc/,0,False,5,False,1ean1t,lua,t5_2qjla
909,villiger2,This looks really cool! It looks like it will make Lua a more viable language to be used on it's own when combined with the Terra.,"<div class=""md""><p>This looks really cool! It looks like it will make Lua a more viable language to be used on it&#39;s own when combined with the Terra.</p>
</div>",1368509581.0,,False,c9yelpu,False,t3_1ean1t,t3_1ean1t,/r/lua/comments/1ean1t/terra_a_lowlevel_counterpart_to_lua/c9yelpu/,1,False,5,False,1ean1t,lua,t5_2qjla
910,benthor,"Could someone explain how this compares to the C interface offered by luajit? My gut-feeling is that in face of this, Terra is rather pointless but I may be wrong.","<div class=""md""><p>Could someone explain how this compares to the C interface offered by luajit? My gut-feeling is that in face of this, Terra is rather pointless but I may be wrong.</p>
</div>",1368555783.0,,False,c9yozth,False,t3_1ean1t,t3_1ean1t,/r/lua/comments/1ean1t/terra_a_lowlevel_counterpart_to_lua/c9yozth/,1,False,3,False,1ean1t,lua,t5_2qjla
911,kinow,A side note that I forgot. Lua in Portuguese means moon. Terra is the same as Earth :o) ,"<div class=""md""><p>A side note that I forgot. Lua in Portuguese means moon. Terra is the same as Earth :o) </p>
</div>",1368576232.0,,False,c9ywgf8,True,t3_1ean1t,t3_1ean1t,/r/lua/comments/1ean1t/terra_a_lowlevel_counterpart_to_lua/c9ywgf8/,0,False,2,False,1ean1t,lua,t5_2qjla
912,d4rch0n,"Lua is already a viable language, but I agree this looks awesome.","<div class=""md""><p>Lua is already a viable language, but I agree this looks awesome.</p>
</div>",1368511487.0,,False,c9yf1hb,False,t3_1ean1t,t1_c9yelpu,/r/lua/comments/1ean1t/terra_a_lowlevel_counterpart_to_lua/c9yf1hb/,1,False,3,False,1ean1t,lua,t5_2qjla
913,slime73,"https://news.ycombinator.com/item?id=5703132

> we designed Terra primarily to be an enviornment for generating low-level code. In particular, we want to be able to easily design and prototype DSLs and auto-tuners for high-performance programming applications. We explain this use-case in more detail in our upcoming PLDI paper (http://terralang.org/pldi071-devito.pdf).","<div class=""md""><p><a href=""https://news.ycombinator.com/item?id=5703132"">https://news.ycombinator.com/item?id=5703132</a></p>

<blockquote>
<p>we designed Terra primarily to be an enviornment for generating low-level code. In particular, we want to be able to easily design and prototype DSLs and auto-tuners for high-performance programming applications. We explain this use-case in more detail in our upcoming PLDI paper (<a href=""http://terralang.org/pldi071-devito.pdf"">http://terralang.org/pldi071-devito.pdf</a>).</p>
</blockquote>
</div>",1368556045.0,,False,c9yp37o,False,t3_1ean1t,t1_c9yozth,/r/lua/comments/1ean1t/terra_a_lowlevel_counterpart_to_lua/c9yp37o/,0,False,2,False,1ean1t,lua,t5_2qjla
914,kinow,"That's right, probably it'll be an alternative in cases that you need better performance.","<div class=""md""><p>That&#39;s right, probably it&#39;ll be an alternative in cases that you need better performance.</p>
</div>",1368529624.0,,False,c9yhiym,True,t3_1ean1t,t1_c9yf1hb,/r/lua/comments/1ean1t/terra_a_lowlevel_counterpart_to_lua/c9yhiym/,0,False,1,False,1ean1t,lua,t5_2qjla
915,DeltaDaedalus,"Cool!  I tried doing almost exactly this a while ago, but I just couldn't get reasonable performance out of it, gratz on managing it!","<div class=""md""><p>Cool!  I tried doing almost exactly this a while ago, but I just couldn&#39;t get reasonable performance out of it, gratz on managing it!</p>
</div>",1491860029.0,,False,dg3bjxb,False,t3_64ilhg,t3_64ilhg,/r/lua/comments/64ilhg/luagb_a_gameboy_emulator_in_pure_lua/dg3bjxb/,0,False,3,False,64ilhg,lua,t5_2qjla
916,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1491909024.0,,1492331867.0,dg44apn,False,t3_64ilhg,t3_64ilhg,/r/lua/comments/64ilhg/luagb_a_gameboy_emulator_in_pure_lua/dg44apn/,1,False,1,False,64ilhg,lua,t5_2qjla
917,WuTangTan,I tried this by bootstrapping Lua5.1 onto Love and running a Pokemon Yellow ROM. The results were not very good. ~20FPS on my macbook pro vs ~60FPS with LuaJIT.,"<div class=""md""><p>I tried this by bootstrapping Lua5.1 onto Love and running a Pokemon Yellow ROM. The results were not very good. ~20FPS on my macbook pro vs ~60FPS with LuaJIT.</p>
</div>",1491911772.0,,False,dg45ito,False,t3_64ilhg,t1_dg44apn,/r/lua/comments/64ilhg/luagb_a_gameboy_emulator_in_pure_lua/dg45ito/,1,False,1,False,64ilhg,lua,t5_2qjla
918,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1491939330.0,,1492331864.0,dg4seo2,False,t3_64ilhg,t1_dg45ito,/r/lua/comments/64ilhg/luagb_a_gameboy_emulator_in_pure_lua/dg4seo2/,1,False,1,False,64ilhg,lua,t5_2qjla
919,WuTangTan,"Yeah, it does seem to locked to a maximum of 60FPS. Take this report with a grain of salt, though, because this benchmark was done very hastily.","<div class=""md""><p>Yeah, it does seem to locked to a maximum of 60FPS. Take this report with a grain of salt, though, because this benchmark was done very hastily.</p>
</div>",1491941236.0,,False,dg4u5wb,False,t3_64ilhg,t1_dg4seo2,/r/lua/comments/64ilhg/luagb_a_gameboy_emulator_in_pure_lua/dg4u5wb/,0,False,1,False,64ilhg,lua,t5_2qjla
920,Tritonio,"IIRC Love allows os.execute(). Please tell me you have removed that. :-)

Sounds amazing otherwise. What kind of protocol does it use for voice chat?","<div class=""md""><p>IIRC Love allows os.execute(). Please tell me you have removed that. :-)</p>

<p>Sounds amazing otherwise. What kind of protocol does it use for voice chat?</p>
</div>",1571563029.0,,False,f4etjfl,False,t3_dkcmrz,t3_dkcmrz,/r/lua/comments/dkcmrz/announcing_castle_a_browser_for_games_built_in_lua/f4etjfl/,2,False,4,False,dkcmrz,lua,t5_2qjla
921,nikki93,"Haven't removed os.execute yet... I should do a security pass and remove those things hehe. I think there's a complete list of which functions are safe or not here: http://lua-users.org/wiki/SandBoxes -- I may also just end up doing the sandboxing at the native app level -- not sure.

For voice chat we use WebRTC.","<div class=""md""><p>Haven&#39;t removed os.execute yet... I should do a security pass and remove those things hehe. I think there&#39;s a complete list of which functions are safe or not here: <a href=""http://lua-users.org/wiki/SandBoxes"">http://lua-users.org/wiki/SandBoxes</a> -- I may also just end up doing the sandboxing at the native app level -- not sure.</p>

<p>For voice chat we use WebRTC.</p>
</div>",1571571131.0,,False,f4fk0c3,False,t3_dkcmrz,t3_dkcmrz,/r/lua/comments/dkcmrz/announcing_castle_a_browser_for_games_built_in_lua/f4fk0c3/,0,False,3,False,dkcmrz,lua,t5_2qjla
922,,[deleted],"<div class=""md""><p>[deleted]</p>
</div>",1571603176.0,,False,f4iez5l,False,t3_dkcmrz,t3_dkcmrz,/r/lua/comments/dkcmrz/announcing_castle_a_browser_for_games_built_in_lua/f4iez5l/,1,False,3,False,dkcmrz,lua,t5_2qjla
923,ezethnesthrown,Android not supported yet as of now?,"<div class=""md""><p>Android not supported yet as of now?</p>
</div>",1571543705.0,,False,f4dk4gg,False,t3_dkcmrz,t3_dkcmrz,/r/lua/comments/dkcmrz/announcing_castle_a_browser_for_games_built_in_lua/f4dk4gg/,1,False,1,False,dkcmrz,lua,t5_2qjla
924,nikki93,Oops it seems like I accidentally made a top-level comment instead of replying: https://www.reddit.com/r/lua/comments/dkcmrz/comment/f4fk0c3,"<div class=""md""><p>Oops it seems like I accidentally made a top-level comment instead of replying: <a href=""https://www.reddit.com/r/lua/comments/dkcmrz/comment/f4fk0c3"">https://www.reddit.com/r/lua/comments/dkcmrz/comment/f4fk0c3</a></p>
</div>",1571593334.0,,False,f4hmjke,False,t3_dkcmrz,t1_f4etjfl,/r/lua/comments/dkcmrz/announcing_castle_a_browser_for_games_built_in_lua/f4hmjke/,0,False,1,False,dkcmrz,lua,t5_2qjla
925,k1cho,"definitely agree we need to do a security pass. for now we've just been monitoring games that people publish to the platform but this is a good reminder to actually disable these calls. we can work on that this week. https://github.com/castle-games/castle-client/blob/master/base/__ghost__/portal.lua#L353 you can take a look here to see how we build the env for the game lua code. like /u/nikki93 said we could either do it here or just remove the native method when compiling.

for voice chat we used this library https://mediasoup.org/. it made it pretty easy! there is an issue with microphone permissions on some windows machines that we haven't figured out yet, but otherwise seems to be working well.","<div class=""md""><p>definitely agree we need to do a security pass. for now we&#39;ve just been monitoring games that people publish to the platform but this is a good reminder to actually disable these calls. we can work on that this week. <a href=""https://github.com/castle-games/castle-client/blob/master/base/__ghost__/portal.lua#L353"">https://github.com/castle-games/castle-client/blob/master/base/__ghost__/portal.lua#L353</a> you can take a look here to see how we build the env for the game lua code. like <a href=""/u/nikki93"">/u/nikki93</a> said we could either do it here or just remove the native method when compiling.</p>

<p>for voice chat we used this library <a href=""https://mediasoup.org/"">https://mediasoup.org/</a>. it made it pretty easy! there is an issue with microphone permissions on some windows machines that we haven&#39;t figured out yet, but otherwise seems to be working well.</p>
</div>",1571593884.0,,False,f4hnyj1,False,t3_dkcmrz,t1_f4etjfl,/r/lua/comments/dkcmrz/announcing_castle_a_browser_for_games_built_in_lua/f4hnyj1/,0,False,1,False,dkcmrz,lua,t5_2qjla
926,ccheever,Thanks u/underhooked ! Lots of ways it can be improved. Will keep working on it,"<div class=""md""><p>Thanks <a href=""/u/underhooked"">u/underhooked</a> ! Lots of ways it can be improved. Will keep working on it</p>
</div>",1571673680.0,,False,f4m2180,True,t3_dkcmrz,t1_f4iez5l,/r/lua/comments/dkcmrz/announcing_castle_a_browser_for_games_built_in_lua/f4m2180/,0,False,1,False,dkcmrz,lua,t5_2qjla
927,ccheever,"You can try the alpha of the android and iOS mobile app by following the instructions here. 

https://forums.castle.games/t/how-to-try-out-the-mobile-client-prototypes/24

They need some work but you can play games.","<div class=""md""><p>You can try the alpha of the android and iOS mobile app by following the instructions here. </p>

<p><a href=""https://forums.castle.games/t/how-to-try-out-the-mobile-client-prototypes/24"">https://forums.castle.games/t/how-to-try-out-the-mobile-client-prototypes/24</a></p>

<p>They need some work but you can play games.</p>
</div>",1571543881.0,,False,f4dkl2h,True,t3_dkcmrz,t1_f4dk4gg,/r/lua/comments/dkcmrz/announcing_castle_a_browser_for_games_built_in_lua/f4dkl2h/,0,False,4,False,dkcmrz,lua,t5_2qjla
928,disperso,"There are a lot of other implementations of a type checked Lua, or similar (Teal, Pallene, Luau, Yuescript...). It would be nice if you introduced the project in the context of those other projects as well, and strengths or weaknesses. Also, I think the name is a bad idea, as it's gonna be super hard to search for it. Take that in mind.","<div class=""md""><p>There are a lot of other implementations of a type checked Lua, or similar (Teal, Pallene, Luau, Yuescript...). It would be nice if you introduced the project in the context of those other projects as well, and strengths or weaknesses. Also, I think the name is a bad idea, as it&#39;s gonna be super hard to search for it. Take that in mind.</p>
</div>",1678179232.0,,False,jb8xepw,False,t3_11kn4bo,t3_11kn4bo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jb8xepw/,1,False,26,False,11kn4bo,lua,t5_2qjla
929,JustALittleAverage,"> To decrement variables the --- operator is used which functions exactly like the ++ operator.

--- is used for annotations with LSP, so if you use it there might be some interesting effects.","<div class=""md""><blockquote>
<p>To decrement variables the --- operator is used which functions exactly like the ++ operator.</p>
</blockquote>

<p>--- is used for annotations with LSP, so if you use it there might be some interesting effects.</p>
</div>",1678169000.0,,False,jb8k9pv,False,t3_11kn4bo,t3_11kn4bo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jb8k9pv/,1,False,12,False,11kn4bo,lua,t5_2qjla
930,EricTboneJackson,">  Running on hundreds of millions of computers worldwide, **inefficient and slow classic Lua code** has an outsized negative impact on the environment

Wut? ""classic Lua"" is faster than most non-JIT scripting languages, and Lua JIT is faster than any JIT language but JavaScript, and only because the latter has had literally billions of dollars of R&D poured into it. In what universe is Lua an ""inefficient and slow"" dynamic language?

> As the rest of the paper will demonstrate, Lua++ retains all the benefits of Lua while making it possible to run code close to the speed of today’s fastest programming languages

Where? How? Are you changing it to a compiled language?","<div class=""md""><blockquote>
<p>Running on hundreds of millions of computers worldwide, <strong>inefficient and slow classic Lua code</strong> has an outsized negative impact on the environment</p>
</blockquote>

<p>Wut? &quot;classic Lua&quot; is faster than most non-JIT scripting languages, and Lua JIT is faster than any JIT language but JavaScript, and only because the latter has had literally billions of dollars of R&amp;D poured into it. In what universe is Lua an &quot;inefficient and slow&quot; dynamic language?</p>

<blockquote>
<p>As the rest of the paper will demonstrate, Lua++ retains all the benefits of Lua while making it possible to run code close to the speed of today’s fastest programming languages</p>
</blockquote>

<p>Where? How? Are you changing it to a compiled language?</p>
</div>",1678209992.0,,1678225190.0,jbai8gx,False,t3_11kn4bo,t3_11kn4bo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbai8gx/,1,False,11,False,11kn4bo,lua,t5_2qjla
931,Planebagels1,"on a somewhat unrelated note: If my memory serves me correct, I think that Luau (roblox's own version of Lua) also has some of the features you have here, such as a type system. ([https://luau-lang.org/](https://luau-lang.org/))

Anyways, this is a cool project, thanks for sharing!","<div class=""md""><p>on a somewhat unrelated note: If my memory serves me correct, I think that Luau (roblox&#39;s own version of Lua) also has some of the features you have here, such as a type system. (<a href=""https://luau-lang.org/"">https://luau-lang.org/</a>)</p>

<p>Anyways, this is a cool project, thanks for sharing!</p>
</div>",1678161729.0,,False,jb885iv,False,t3_11kn4bo,t3_11kn4bo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jb885iv/,1,False,13,False,11kn4bo,lua,t5_2qjla
932,ItsFrank11,"Very neat!

One note, I felt the triangle example was a bit disingenuous, no one would ever write a table like that

It should instead use the [""idiomatic Lua oop"" pattern](https://www.lua.org/pil/16.2.html)

Not only would that be a fairer comparison, but it would make luapp look even more terse, efficient, and pleasant to write in comparison 

As-is, that example is demonstrating a reusable class (luapp example) vs some super strange single use table","<div class=""md""><p>Very neat!</p>

<p>One note, I felt the triangle example was a bit disingenuous, no one would ever write a table like that</p>

<p>It should instead use the <a href=""https://www.lua.org/pil/16.2.html"">&quot;idiomatic Lua oop&quot; pattern</a></p>

<p>Not only would that be a fairer comparison, but it would make luapp look even more terse, efficient, and pleasant to write in comparison </p>

<p>As-is, that example is demonstrating a reusable class (luapp example) vs some super strange single use table</p>
</div>",1678165658.0,,1678204509.0,jb8f4xb,False,t3_11kn4bo,t3_11kn4bo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jb8f4xb/,2,False,6,False,11kn4bo,lua,t5_2qjla
933,weregod,"1.Can Lua++ run Lua code? Which versions? Limitations?

2. Do you have FFI interface? Does it documented?
How much work is needed to port Lua library binding to  Lua++ FFI?","<div class=""md""><p>1.Can Lua++ run Lua code? Which versions? Limitations?</p>

<ol>
<li>Do you have FFI interface? Does it documented?
How much work is needed to port Lua library binding to  Lua++ FFI?</li>
</ol>
</div>",1678206563.0,,False,jba9eyz,False,t3_11kn4bo,t3_11kn4bo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jba9eyz/,1,False,3,False,11kn4bo,lua,t5_2qjla
934,TrickComfortable999,"> Lua++ is a fully-featured new programming language for a wide range of applications that is fast, lightweight, and energy-efficient. The author created Lua++ with the goal of helping reduce carbon emissions through low power consumption, decreasing barriers to adoption on low-cost hardware platforms, and providing a tool for learning advanced computer science concepts.

I'm genuinely extremely curious and interested about this “reduce carbon emissions” claim. Could you elaborate on that, please?","<div class=""md""><blockquote>
<p>Lua++ is a fully-featured new programming language for a wide range of applications that is fast, lightweight, and energy-efficient. The author created Lua++ with the goal of helping reduce carbon emissions through low power consumption, decreasing barriers to adoption on low-cost hardware platforms, and providing a tool for learning advanced computer science concepts.</p>
</blockquote>

<p>I&#39;m genuinely extremely curious and interested about this “reduce carbon emissions” claim. Could you elaborate on that, please?</p>
</div>",1678314175.0,,False,jbgnzek,False,t3_11kn4bo,t3_11kn4bo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbgnzek/,1,False,3,False,11kn4bo,lua,t5_2qjla
935,EcstaticBicycle,"How big is the file for Lua++? Besides speed, lua is valued for its extremely small fingerprint. I believe the whole thing is about 1.3mb.

also, it would be nice if you changed the commenting macro to // instead of #, since // is used by most modern/big languages to begin with. It's already strange how python and lua and some other languages decided to deviate from this pattern, so it would be cool if your compiler allowed for more common commenting formats.","<div class=""md""><p>How big is the file for Lua++? Besides speed, lua is valued for its extremely small fingerprint. I believe the whole thing is about 1.3mb.</p>

<p>also, it would be nice if you changed the commenting macro to // instead of #, since // is used by most modern/big languages to begin with. It&#39;s already strange how python and lua and some other languages decided to deviate from this pattern, so it would be cool if your compiler allowed for more common commenting formats.</p>
</div>",1678338926.0,,1678339171.0,jbi5gr7,False,t3_11kn4bo,t3_11kn4bo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbi5gr7/,1,False,3,False,11kn4bo,lua,t5_2qjla
936,jwongsquared,"Cool project! I’m wondering how this compares to Pallene? On the surface, the two projects seem to have quite a few overlapping goals.","<div class=""md""><p>Cool project! I’m wondering how this compares to Pallene? On the surface, the two projects seem to have quite a few overlapping goals.</p>
</div>",1678166632.0,,False,jb8gpdi,False,t3_11kn4bo,t3_11kn4bo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jb8gpdi/,0,False,2,False,11kn4bo,lua,t5_2qjla
937,Alaska-Kid,Any tests? How about a simple ray tracer?,"<div class=""md""><p>Any tests? How about a simple ray tracer?</p>
</div>",1678164848.0,,False,jb8ds55,False,t3_11kn4bo,t3_11kn4bo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jb8ds55/,0,False,2,False,11kn4bo,lua,t5_2qjla
938,MaxPrihodko,"Thanks for the comment, I will do some research into the projects that you mentioned and attempt to compare them to Lua++.  


The name, ""Lua++"", was chosen as I wanted to make it clear that this project applies similar changes to Lua as C++ did to C. I quite like the name, nevertheless I will take your concern into consideration.  


Thanks for the feedback!","<div class=""md""><p>Thanks for the comment, I will do some research into the projects that you mentioned and attempt to compare them to Lua++.  </p>

<p>The name, &quot;Lua++&quot;, was chosen as I wanted to make it clear that this project applies similar changes to Lua as C++ did to C. I quite like the name, nevertheless I will take your concern into consideration.  </p>

<p>Thanks for the feedback!</p>
</div>",1678318664.0,,False,jbgyt1k,True,t3_11kn4bo,t1_jb8xepw,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbgyt1k/,0,False,1,False,11kn4bo,lua,t5_2qjla
939,MaxPrihodko,"For cases like this, Lua++ has various macros that allow you to tweak the behavior of the compiler. You can read about the comment macro [here](https://docs.luaplusplus.org/language-improvements/macros/comment).","<div class=""md""><p>For cases like this, Lua++ has various macros that allow you to tweak the behavior of the compiler. You can read about the comment macro <a href=""https://docs.luaplusplus.org/language-improvements/macros/comment"">here</a>.</p>
</div>",1678318844.0,,False,jbgz8b7,True,t3_11kn4bo,t1_jb8k9pv,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbgz8b7/,1,False,1,False,11kn4bo,lua,t5_2qjla
940,MaxPrihodko,"When I mention ""classic Lua"" I am referring to Lua 5.x which seems to be the most widespread version.   


Your point about regular Lua being faster than most non-JIT scripting languages is true, but what I was implying was that the Lua VM has areas where it could be optimized leading to significant performance improvements. I will change the wording as that sentence leads to unwanted implications.   


Moreover, I am not changing it to a compiled language, I am applying various compiler and VM optimizations that will significantly decrease the runtime of Lua programs. I will also be more specific about what ""programming languages"" I am referring to. 

  
Thanks for your feedback, I will apply some changes to the docs.","<div class=""md""><p>When I mention &quot;classic Lua&quot; I am referring to Lua 5.x which seems to be the most widespread version.   </p>

<p>Your point about regular Lua being faster than most non-JIT scripting languages is true, but what I was implying was that the Lua VM has areas where it could be optimized leading to significant performance improvements. I will change the wording as that sentence leads to unwanted implications.   </p>

<p>Moreover, I am not changing it to a compiled language, I am applying various compiler and VM optimizations that will significantly decrease the runtime of Lua programs. I will also be more specific about what &quot;programming languages&quot; I am referring to. </p>

<p>Thanks for your feedback, I will apply some changes to the docs.</p>
</div>",1678317948.0,,False,jbgx4qu,True,t3_11kn4bo,t1_jbai8gx,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbgx4qu/,1,False,2,False,11kn4bo,lua,t5_2qjla
941,MaxPrihodko,"Yes, Luau was actually a key inspiration for Lua++. I loved where Roblox was going with the project but wanted these features to be applicable to other areas of Lua programming, not just game development.","<div class=""md""><p>Yes, Luau was actually a key inspiration for Lua++. I loved where Roblox was going with the project but wanted these features to be applicable to other areas of Lua programming, not just game development.</p>
</div>",1678318166.0,,False,jbgxn4i,True,t3_11kn4bo,t1_jb885iv,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbgxn4i/,0,False,2,False,11kn4bo,lua,t5_2qjla
942,Sewbacca,"About the link you mentioned. It confuses me, why do they overwrite superclass values when creating a object? On the otger hand I just glanced over it, so maybe I've missed something.","<div class=""md""><p>About the link you mentioned. It confuses me, why do they overwrite superclass values when creating a object? On the otger hand I just glanced over it, so maybe I&#39;ve missed something.</p>
</div>",1678187185.0,,False,jb96lcm,False,t3_11kn4bo,t1_jb8f4xb,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jb96lcm/,2,False,3,False,11kn4bo,lua,t5_2qjla
943,MaxPrihodko,"Awesome, thanks for the suggestion, I will change the Lua example ASAP!","<div class=""md""><p>Awesome, thanks for the suggestion, I will change the Lua example ASAP!</p>
</div>",1678318029.0,,False,jbgxbme,True,t3_11kn4bo,t1_jb8f4xb,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbgxbme/,0,False,2,False,11kn4bo,lua,t5_2qjla
944,MaxPrihodko,"1. Lua++ is backward compatible with Lua 5.x, meaning any Lua version released before Lua 6.0 should run fine (The Lua++ VM is a heavily modified and optimized Lua 5.1 VM)
2. I had not been previously aware of FFI,  and now that you being it to my attention I believe that it's definitely worth implementing in the language. This may be a little tricky as to my knowledge this is a unique LuaJIT feature, but I will give it my best after I release the first official version.

Thank you for your suggestion!","<div class=""md""><ol>
<li>Lua++ is backward compatible with Lua 5.x, meaning any Lua version released before Lua 6.0 should run fine (The Lua++ VM is a heavily modified and optimized Lua 5.1 VM)</li>
<li>I had not been previously aware of FFI,  and now that you being it to my attention I believe that it&#39;s definitely worth implementing in the language. This may be a little tricky as to my knowledge this is a unique LuaJIT feature, but I will give it my best after I release the first official version.</li>
</ol>

<p>Thank you for your suggestion!</p>
</div>",1678331250.0,,False,jbhr1ao,True,t3_11kn4bo,t1_jba9eyz,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbhr1ao/,2,False,1,False,11kn4bo,lua,t5_2qjla
945,MaxPrihodko,"The ""reduce carbon emissions"" claim should be changed to energy efficiency. I originally wanted to argue that a more efficient alternative to Lua would lead to less power consumption, producing fewer carbon emissions. After reflecting on this claim I have come to realize that defending it would be very difficult, and simply reformatting the argument around energy efficiency would be much easier.  


I hope this didn't cause much confusion. Thanks for showing interest in Lua++!","<div class=""md""><p>The &quot;reduce carbon emissions&quot; claim should be changed to energy efficiency. I originally wanted to argue that a more efficient alternative to Lua would lead to less power consumption, producing fewer carbon emissions. After reflecting on this claim I have come to realize that defending it would be very difficult, and simply reformatting the argument around energy efficiency would be much easier.  </p>

<p>I hope this didn&#39;t cause much confusion. Thanks for showing interest in Lua++!</p>
</div>",1678330753.0,,False,jbhpxkb,True,t3_11kn4bo,t1_jbgnzek,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbhpxkb/,1,False,1,False,11kn4bo,lua,t5_2qjla
946,MaxPrihodko,"Yes, Lua++ has been able to retain this small footprint. As of right now, the interpreter (just the compiler and VM combined) is about 356 KB and the VM is about 224 KB in size. I am sure that the size of these files will increase as I add more libraries.

&#x200B;

Thank you for the suggestion about the comments syntax, I agree the \`#\` symbol is a little unconventional. I will change that!","<div class=""md""><p>Yes, Lua++ has been able to retain this small footprint. As of right now, the interpreter (just the compiler and VM combined) is about 356 KB and the VM is about 224 KB in size. I am sure that the size of these files will increase as I add more libraries.</p>

<p>&#x200B;</p>

<p>Thank you for the suggestion about the comments syntax, I agree the `#` symbol is a little unconventional. I will change that!</p>
</div>",1678384346.0,,False,jbkdme0,True,t3_11kn4bo,t1_jbi5gr7,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbkdme0/,0,False,2,False,11kn4bo,lua,t5_2qjla
947,,"Question from someone who doesn’t know a whole lot about how programming languages are made.

Could you not change comments to use “//“ for single line and “/* */“ for multi line so that — could be used for decrementing? I’ve always hated — for comments anyway.","<div class=""md""><p>Question from someone who doesn’t know a whole lot about how programming languages are made.</p>

<p>Could you not change comments to use “//“ for single line and “/* */“ for multi line so that — could be used for decrementing? I’ve always hated — for comments anyway.</p>
</div>",1678799609.0,,False,jc6oguc,False,t3_11kn4bo,t1_jbgz8b7,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jc6oguc/,0,False,1,False,11kn4bo,lua,t5_2qjla
948,EricTboneJackson,"> When I mention ""classic Lua"" I am referring to Lua 5.x which seems to be the most widespread version.

Yes, and all my remarks apply to that version. Calling it ""inefficient and slow"" is nonsensical. It's one of the fastest scripting languages there is.

> what I was implying was that the Lua VM has areas where it could be optimized leading to significant performance improvements

Like *what*?","<div class=""md""><blockquote>
<p>When I mention &quot;classic Lua&quot; I am referring to Lua 5.x which seems to be the most widespread version.</p>
</blockquote>

<p>Yes, and all my remarks apply to that version. Calling it &quot;inefficient and slow&quot; is nonsensical. It&#39;s one of the fastest scripting languages there is.</p>

<blockquote>
<p>what I was implying was that the Lua VM has areas where it could be optimized leading to significant performance improvements</p>
</blockquote>

<p>Like <em>what</em>?</p>
</div>",1678351972.0,,False,jbin10l,False,t3_11kn4bo,t1_jbgx4qu,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbin10l/,0,False,2,False,11kn4bo,lua,t5_2qjla
949,ItsFrank11,"You're right, that's a bit weird, replaced the link with one from lua.org","<div class=""md""><p>You&#39;re right, that&#39;s a bit weird, replaced the link with one from lua.org</p>
</div>",1678204528.0,,False,jba4atf,False,t3_11kn4bo,t1_jb96lcm,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jba4atf/,1,False,3,False,11kn4bo,lua,t5_2qjla
950,DavidJCobb,"As best as I can tell, the authors got their code wrong and literally never tested using two or more instances of the same class. They're basically setting static members by accident, and then accessing them through the instances.","<div class=""md""><p>As best as I can tell, the authors got their code wrong and literally never tested using two or more instances of the same class. They&#39;re basically setting static members by accident, and then accessing them through the instances.</p>
</div>",1678199991.0,,False,jb9tafo,False,t3_11kn4bo,t1_jb96lcm,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jb9tafo/,0,False,2,False,11kn4bo,lua,t5_2qjla
951,weregod,"For clarity my main question: how to port existing Lua/C libraries to Lua++? 

1. Is it possible to make standard comments work with Lua++?

2. FFI is means foreign function interface. For some reason LuaJIT named only their interface FFI. I'm more concerned about standard Lua C API. Can I just recompile Lua5.1 C binding or some tweaks are needed?","<div class=""md""><p>For clarity my main question: how to port existing Lua/C libraries to Lua++? </p>

<ol>
<li><p>Is it possible to make standard comments work with Lua++?</p></li>
<li><p>FFI is means foreign function interface. For some reason LuaJIT named only their interface FFI. I&#39;m more concerned about standard Lua C API. Can I just recompile Lua5.1 C binding or some tweaks are needed?</p></li>
</ol>
</div>",1678352270.0,,False,jbind8l,False,t3_11kn4bo,t1_jbhr1ao,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbind8l/,1,False,1,False,11kn4bo,lua,t5_2qjla
952,weregod,1. I can't compile and run simplest Lua code. Either I got Segmentation fault or infinite loop. I suggest you to take existing Lua library and make it compile and run because if you can't use existing code users will not choose your language.,"<div class=""md""><ol>
<li>I can&#39;t compile and run simplest Lua code. Either I got Segmentation fault or infinite loop. I suggest you to take existing Lua library and make it compile and run because if you can&#39;t use existing code users will not choose your language.</li>
</ol>
</div>",1678451379.0,,False,jbnzpdo,False,t3_11kn4bo,t1_jbhr1ao,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbnzpdo/,1,False,1,False,11kn4bo,lua,t5_2qjla
953,Artistic-Switch-7134,Remove this part if it’s not authentic or it will make the project look bs,"<div class=""md""><p>Remove this part if it’s not authentic or it will make the project look bs</p>
</div>",1678899802.0,,False,jcbe3mr,False,t3_11kn4bo,t1_jbhpxkb,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jcbe3mr/,0,False,1,False,11kn4bo,lua,t5_2qjla
954,Sewbacca,"Yeah, they probably copied the code and assumed that they can init fields in new like they do in deposit. In new fields must be initialized within the object (e.g. o)","<div class=""md""><p>Yeah, they probably copied the code and assumed that they can init fields in new like they do in deposit. In new fields must be initialized within the object (e.g. o)</p>
</div>",1678204994.0,,False,jba5h59,False,t3_11kn4bo,t1_jba4atf,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jba5h59/,1,False,2,False,11kn4bo,lua,t5_2qjla
955,MaxPrihodko,"Since the Lua++ VM is a fork of Lua 5.x VM, porting existing Lua/C libraries should be very easy. Although I have not tested this yet, there should be no reason recompiling the Lua 5.1 C binding would not work.","<div class=""md""><p>Since the Lua++ VM is a fork of Lua 5.x VM, porting existing Lua/C libraries should be very easy. Although I have not tested this yet, there should be no reason recompiling the Lua 5.1 C binding would not work.</p>
</div>",1678383417.0,,False,jbkb4du,True,t3_11kn4bo,t1_jbind8l,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbkb4du/,0,False,1,False,11kn4bo,lua,t5_2qjla
956,MaxPrihodko,"Have you tried to use the interpreter? If so, I should have warned you that there are still a few bugs that I need to fix before I can release an official build. I will let you know when Lua++ is stable.","<div class=""md""><p>Have you tried to use the interpreter? If so, I should have warned you that there are still a few bugs that I need to fix before I can release an official build. I will let you know when Lua++ is stable.</p>
</div>",1678452334.0,,False,jbo1but,True,t3_11kn4bo,t1_jbnzpdo,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jbo1but/,0,False,1,False,11kn4bo,lua,t5_2qjla
957,ItsFrank11,I should have known better than to link tutorials point XD,"<div class=""md""><p>I should have known better than to link tutorials point XD</p>
</div>",1678205108.0,,False,jba5rbm,False,t3_11kn4bo,t1_jba5h59,/r/lua/comments/11kn4bo/lua_a_new_typebased_alternative_for_lua/jba5rbm/,0,False,2,False,11kn4bo,lua,t5_2qjla
958,luarocks,Awesome! Thank you so much for your hard work.,"<div class=""md""><p>Awesome! Thank you so much for your hard work.</p>
</div>",1630602959.0,,False,hbc7pta,False,t3_pgfx3h,t3_pgfx3h,/r/lua/comments/pgfx3h/sqlitelua_it_just_cant_be_simpler_than_that/hbc7pta/,1,False,3,False,pgfx3h,lua,t5_2qjla
959,lambda_abstraction,"What in particular does this offer over Doug Currie's lsqlite3 that would compel its use?

One if the things I liked about that was it could easily deal with the sqlcipher patch on sqlite3.","<div class=""md""><p>What in particular does this offer over Doug Currie&#39;s lsqlite3 that would compel its use?</p>

<p>One if the things I liked about that was it could easily deal with the sqlcipher patch on sqlite3.</p>
</div>",1630677321.0,,1630677631.0,hbg3o4q,False,t3_pgfx3h,t3_pgfx3h,/r/lua/comments/pgfx3h/sqlitelua_it_just_cant_be_simpler_than_that/hbg3o4q/,1,False,1,False,pgfx3h,lua,t5_2qjla
960,evilbadmad,"Sorry, it may not be in main interest of the topic, but is the example code tested?

My lua 5.3 installation 's require function cannot return multiple value, I wonder if there is a newer/older lua version has this different.

db file:

`...`

`return projects, todos`

Use:

`local projects, todos = require'mydb'`

`...`","<div class=""md""><p>Sorry, it may not be in main interest of the topic, but is the example code tested?</p>

<p>My lua 5.3 installation &#39;s require function cannot return multiple value, I wonder if there is a newer/older lua version has this different.</p>

<p>db file:</p>

<p><code>...</code></p>

<p><code>return projects, todos</code></p>

<p>Use:</p>

<p><code>local projects, todos = require&#39;mydb&#39;</code></p>

<p><code>...</code></p>
</div>",1630871926.0,,False,hbq3ddz,False,t3_pgfx3h,t3_pgfx3h,/r/lua/comments/pgfx3h/sqlitelua_it_just_cant_be_simpler_than_that/hbq3ddz/,1,False,1,False,pgfx3h,lua,t5_2qjla
961,evilbadmad,"Alright, thank you~
(Sorry, misplaced. It's for op'.)","<div class=""md""><p>Alright, thank you~
(Sorry, misplaced. It&#39;s for op&#39;.)</p>
</div>",1631265793.0,,False,hcaily5,False,t3_pgfx3h,t3_pgfx3h,/r/lua/comments/pgfx3h/sqlitelua_it_just_cant_be_simpler_than_that/hcaily5/,0,False,1,False,pgfx3h,lua,t5_2qjla
962,tami5,<3,"<div class=""md""><p>&lt;3</p>
</div>",1630643503.0,,False,hbepvs2,True,t3_pgfx3h,t1_hbc7pta,/r/lua/comments/pgfx3h/sqlitelua_it_just_cant_be_simpler_than_that/hbepvs2/,0,False,1,False,pgfx3h,lua,t5_2qjla
963,tami5,"hmmm I don't think it offers anything additional, if anything it may miss some few things that `lsqlite3` offer. However, `sqlite.lua` tries to make dealing sqlite databases simple and intuitive. Enabling the users to avoid dealing with ""sql statement"" to do operations on the db.

for sqlcipher, you can open an issue and I will see what I can do in this regards.","<div class=""md""><p>hmmm I don&#39;t think it offers anything additional, if anything it may miss some few things that <code>lsqlite3</code> offer. However, <code>sqlite.lua</code> tries to make dealing sqlite databases simple and intuitive. Enabling the users to avoid dealing with &quot;sql statement&quot; to do operations on the db.</p>

<p>for sqlcipher, you can open an issue and I will see what I can do in this regards.</p>
</div>",1630714554.0,,False,hbifmhm,True,t3_pgfx3h,t1_hbg3o4q,/r/lua/comments/pgfx3h/sqlitelua_it_just_cant_be_simpler_than_that/hbifmhm/,0,False,1,False,pgfx3h,lua,t5_2qjla
964,tami5,"I did not consider lua 5.3 but you can test this in your env and see

      local M = sqlite.tbl(""neoclip"", { uri = ""/tmp/db1"", id = true, contents = ""luatable"", ft = ""text"" })

      function M:insert(entry)
        -- do some pre processing before inserting a row
        return self:__insert(entry)
      end

      M:insert {
        { contents = { ""line 1"", ""  line 2"", ""line 3"" }, ft = ""lua"" },
        { contents = { ""some other string"" }, ft = ""lua"" },
      }

      function M:get(query)
        local entries = self:__get(query)
        -- do some sorting or stuff you need.
        return entries
      end

      print(vim.inspect(M:get()))

      return M","<div class=""md""><p>I did not consider lua 5.3 but you can test this in your env and see</p>

<pre><code>  local M = sqlite.tbl(&quot;neoclip&quot;, { uri = &quot;/tmp/db1&quot;, id = true, contents = &quot;luatable&quot;, ft = &quot;text&quot; })

  function M:insert(entry)
    -- do some pre processing before inserting a row
    return self:__insert(entry)
  end

  M:insert {
    { contents = { &quot;line 1&quot;, &quot;  line 2&quot;, &quot;line 3&quot; }, ft = &quot;lua&quot; },
    { contents = { &quot;some other string&quot; }, ft = &quot;lua&quot; },
  }

  function M:get(query)
    local entries = self:__get(query)
    -- do some sorting or stuff you need.
    return entries
  end

  print(vim.inspect(M:get()))

  return M
</code></pre>
</div>",1631072065.0,,False,hc0n6u7,True,t3_pgfx3h,t1_hbq3ddz,/r/lua/comments/pgfx3h/sqlitelua_it_just_cant_be_simpler_than_that/hc0n6u7/,0,False,1,False,pgfx3h,lua,t5_2qjla
965,EricTboneJackson,No mention of metaprogramming.,"<div class=""md""><p>No mention of metaprogramming.</p>
</div>",1668716737.0,,False,iwrio60,False,t3_yxr1el,t3_yxr1el,/r/lua/comments/yxr1el/lua_in_100_seconds/iwrio60/,2,False,6,False,yxr1el,lua,t5_2qjla
966,superstring-man,"Odd choice to choose to write the code into a file and then run it, rather than executing each line directly into the interpreter (except for the `local` gotcha)","<div class=""md""><p>Odd choice to choose to write the code into a file and then run it, rather than executing each line directly into the interpreter (except for the <code>local</code> gotcha)</p>
</div>",1683242646.0,,False,jiwaawb,False,t3_yxr1el,t3_yxr1el,/r/lua/comments/yxr1el/lua_in_100_seconds/jiwaawb/,0,False,2,False,yxr1el,lua,t5_2qjla
967,lambda_abstraction,"Actually there's a lot of stuff that's at best only glossed over.  To be honest, if I were teaching Lua, I think I'd add it as part of a multi-week project somewhere in a C class.  I wish it had existed in its current form when I TAed a C/Unix class back during my university days.","<div class=""md""><p>Actually there&#39;s a lot of stuff that&#39;s at best only glossed over.  To be honest, if I were teaching Lua, I think I&#39;d add it as part of a multi-week project somewhere in a C class.  I wish it had existed in its current form when I TAed a C/Unix class back during my university days.</p>
</div>",1669205711.0,,False,ixh4zml,False,t3_yxr1el,t1_iwrio60,/r/lua/comments/yxr1el/lua_in_100_seconds/ixh4zml/,0,False,4,False,yxr1el,lua,t5_2qjla
968,Torn_vagina,I mean... 100 seconds.. Maybe if it were 2 full minutes,"<div class=""md""><p>I mean... 100 seconds.. Maybe if it were 2 full minutes</p>
</div>",1672478563.0,,False,j2d02u5,False,t3_yxr1el,t1_iwrio60,/r/lua/comments/yxr1el/lua_in_100_seconds/j2d02u5/,1,False,4,False,yxr1el,lua,t5_2qjla
969,lbp22yt,AKA 120 Seconds,"<div class=""md""><p>AKA 120 Seconds</p>
</div>",1683871776.0,,False,jjuaq48,False,t3_yxr1el,t1_j2d02u5,/r/lua/comments/yxr1el/lua_in_100_seconds/jjuaq48/,0,False,3,False,yxr1el,lua,t5_2qjla
970,Tenecifer,"Great, It's one of my future projects.
Thank you !","<div class=""md""><p>Great, It&#39;s one of my future projects.
Thank you !</p>
</div>",1681580192.0,,False,jgdqt0r,False,t3_12n5ivp,t3_12n5ivp,/r/lua/comments/12n5ivp/build_a_lua_interpreter_in_rust/jgdqt0r/,0,False,3,False,12n5ivp,lua,t5_2qjla
971,Zireael07,"Wow! I expected a half-baked toy 2+2=4 thing, and this seems to be a full tutorial from scratch to an actual Lua interpreter <3 <3","<div class=""md""><p>Wow! I expected a half-baked toy 2+2=4 thing, and this seems to be a full tutorial from scratch to an actual Lua interpreter &lt;3 &lt;3</p>
</div>",1681647557.0,,False,jgh27zm,False,t3_12n5ivp,t3_12n5ivp,/r/lua/comments/12n5ivp/build_a_lua_interpreter_in_rust/jgh27zm/,1,False,2,False,12n5ivp,lua,t5_2qjla
972,Charlito33,"Waw ! You detailled the entire process ! That's very cool, thanks !","<div class=""md""><p>Waw ! You detailled the entire process ! That&#39;s very cool, thanks !</p>
</div>",1681661392.0,,False,jghvhly,False,t3_12n5ivp,t3_12n5ivp,/r/lua/comments/12n5ivp/build_a_lua_interpreter_in_rust/jghvhly/,0,False,1,False,12n5ivp,lua,t5_2qjla
973,hellowub,"yeah, not a toy, but (try to be) a product :)","<div class=""md""><p>yeah, not a toy, but (try to be) a product :)</p>
</div>",1681651565.0,,False,jgh9azd,True,t3_12n5ivp,t1_jgh27zm,/r/lua/comments/12n5ivp/build_a_lua_interpreter_in_rust/jgh9azd/,0,False,1,False,12n5ivp,lua,t5_2qjla
974,petsagouris,Thanks for this post!,"<div class=""md""><p>Thanks for this post!</p>
</div>",1354776211.0,,False,c7c2d1h,False,t3_14cw9d,t3_14cw9d,/r/lua/comments/14cw9d/lua_workshop_2012_presentations/c7c2d1h/,0,False,1,False,14cw9d,lua,t5_2qjla
975,holgerschurig,Unfortunately the PDF for the Textadept slides (http://www.lua.org/wshop12/Foral.pdf) is wrong ... or the document hasn't yet been uploaded.,"<div class=""md""><p>Unfortunately the PDF for the Textadept slides (<a href=""http://www.lua.org/wshop12/Foral.pdf"">http://www.lua.org/wshop12/Foral.pdf</a>) is wrong ... or the document hasn&#39;t yet been uploaded.</p>
</div>",1355057489.0,,False,c7dnkvj,False,t3_14cw9d,t3_14cw9d,/r/lua/comments/14cw9d/lua_workshop_2012_presentations/c7dnkvj/,1,False,1,False,14cw9d,lua,t5_2qjla
976,aDevilInMe,"Thanks, that seems to be a change made on the Lua site. I have updated it .","<div class=""md""><p>Thanks, that seems to be a change made on the Lua site. I have updated it .</p>
</div>",1355064504.0,,False,c7doe27,True,t3_14cw9d,t1_c7dnkvj,/r/lua/comments/14cw9d/lua_workshop_2012_presentations/c7doe27/,0,False,1,False,14cw9d,lua,t5_2qjla
